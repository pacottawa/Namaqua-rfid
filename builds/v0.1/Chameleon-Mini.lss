
Chameleon-Mini.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b24  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00802000  00004b24  00004bd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000060b  00802092  00802092  00004c6a  2**0
                  ALLOC
  3 .eeprom       00000013  00810000  00810000  00004c6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00004c7d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000b40  00000000  00000000  00004cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000186b6  00000000  00000000  00005819  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000549f  00000000  00000000  0001decf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009b58  00000000  00000000  0002336e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ce4  00000000  00000000  0002cec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007730  00000000  00000000  0002ebac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c6d6  00000000  00000000  000362dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001640  00000000  00000000  000429b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5b c3       	rjmp	.+1718   	; 0x6b8 <__ctors_end>
       2:	00 00       	nop
       4:	75 c3       	rjmp	.+1770   	; 0x6f0 <__bad_interrupt>
       6:	00 00       	nop
       8:	73 c3       	rjmp	.+1766   	; 0x6f0 <__bad_interrupt>
       a:	00 00       	nop
       c:	71 c3       	rjmp	.+1762   	; 0x6f0 <__bad_interrupt>
       e:	00 00       	nop
      10:	6f c3       	rjmp	.+1758   	; 0x6f0 <__bad_interrupt>
      12:	00 00       	nop
      14:	6d c3       	rjmp	.+1754   	; 0x6f0 <__bad_interrupt>
      16:	00 00       	nop
      18:	6b c3       	rjmp	.+1750   	; 0x6f0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	69 c3       	rjmp	.+1746   	; 0x6f0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	67 c3       	rjmp	.+1742   	; 0x6f0 <__bad_interrupt>
      22:	00 00       	nop
      24:	65 c3       	rjmp	.+1738   	; 0x6f0 <__bad_interrupt>
      26:	00 00       	nop
      28:	63 c3       	rjmp	.+1734   	; 0x6f0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	61 c3       	rjmp	.+1730   	; 0x6f0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5f c3       	rjmp	.+1726   	; 0x6f0 <__bad_interrupt>
      32:	00 00       	nop
      34:	5d c3       	rjmp	.+1722   	; 0x6f0 <__bad_interrupt>
      36:	00 00       	nop
      38:	5b c3       	rjmp	.+1718   	; 0x6f0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	59 c3       	rjmp	.+1714   	; 0x6f0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	57 c3       	rjmp	.+1710   	; 0x6f0 <__bad_interrupt>
      42:	00 00       	nop
      44:	55 c3       	rjmp	.+1706   	; 0x6f0 <__bad_interrupt>
      46:	00 00       	nop
      48:	53 c3       	rjmp	.+1702   	; 0x6f0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	51 c3       	rjmp	.+1698   	; 0x6f0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4f c3       	rjmp	.+1694   	; 0x6f0 <__bad_interrupt>
      52:	00 00       	nop
      54:	4d c3       	rjmp	.+1690   	; 0x6f0 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__vector_22>
      5c:	49 c3       	rjmp	.+1682   	; 0x6f0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	47 c3       	rjmp	.+1678   	; 0x6f0 <__bad_interrupt>
      62:	00 00       	nop
      64:	45 c3       	rjmp	.+1674   	; 0x6f0 <__bad_interrupt>
      66:	00 00       	nop
      68:	43 c3       	rjmp	.+1670   	; 0x6f0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	41 c3       	rjmp	.+1666   	; 0x6f0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3f c3       	rjmp	.+1662   	; 0x6f0 <__bad_interrupt>
      72:	00 00       	nop
      74:	3d c3       	rjmp	.+1658   	; 0x6f0 <__bad_interrupt>
      76:	00 00       	nop
      78:	3b c3       	rjmp	.+1654   	; 0x6f0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	39 c3       	rjmp	.+1650   	; 0x6f0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	37 c3       	rjmp	.+1646   	; 0x6f0 <__bad_interrupt>
      82:	00 00       	nop
      84:	35 c3       	rjmp	.+1642   	; 0x6f0 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__vector_34>
      8c:	31 c3       	rjmp	.+1634   	; 0x6f0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	2f c3       	rjmp	.+1630   	; 0x6f0 <__bad_interrupt>
      92:	00 00       	nop
      94:	2d c3       	rjmp	.+1626   	; 0x6f0 <__bad_interrupt>
      96:	00 00       	nop
      98:	2b c3       	rjmp	.+1622   	; 0x6f0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	29 c3       	rjmp	.+1618   	; 0x6f0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	27 c3       	rjmp	.+1614   	; 0x6f0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	25 c3       	rjmp	.+1610   	; 0x6f0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	23 c3       	rjmp	.+1606   	; 0x6f0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	21 c3       	rjmp	.+1602   	; 0x6f0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	1f c3       	rjmp	.+1598   	; 0x6f0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	1d c3       	rjmp	.+1594   	; 0x6f0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1b c3       	rjmp	.+1590   	; 0x6f0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	19 c3       	rjmp	.+1586   	; 0x6f0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	17 c3       	rjmp	.+1582   	; 0x6f0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	15 c3       	rjmp	.+1578   	; 0x6f0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	13 c3       	rjmp	.+1574   	; 0x6f0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	11 c3       	rjmp	.+1570   	; 0x6f0 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	0f c3       	rjmp	.+1566   	; 0x6f0 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	0d c3       	rjmp	.+1562   	; 0x6f0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0b c3       	rjmp	.+1558   	; 0x6f0 <__bad_interrupt>
      da:	00 00       	nop
      dc:	09 c3       	rjmp	.+1554   	; 0x6f0 <__bad_interrupt>
      de:	00 00       	nop
      e0:	07 c3       	rjmp	.+1550   	; 0x6f0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	05 c3       	rjmp	.+1546   	; 0x6f0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	03 c3       	rjmp	.+1542   	; 0x6f0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	01 c3       	rjmp	.+1538   	; 0x6f0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ff c2       	rjmp	.+1534   	; 0x6f0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	fd c2       	rjmp	.+1530   	; 0x6f0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	fb c2       	rjmp	.+1526   	; 0x6f0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f9 c2       	rjmp	.+1522   	; 0x6f0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f7 c2       	rjmp	.+1518   	; 0x6f0 <__bad_interrupt>
     102:	00 00       	nop
     104:	f5 c2       	rjmp	.+1514   	; 0x6f0 <__bad_interrupt>
     106:	00 00       	nop
     108:	f3 c2       	rjmp	.+1510   	; 0x6f0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f1 c2       	rjmp	.+1506   	; 0x6f0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	ef c2       	rjmp	.+1502   	; 0x6f0 <__bad_interrupt>
     112:	00 00       	nop
     114:	ed c2       	rjmp	.+1498   	; 0x6f0 <__bad_interrupt>
     116:	00 00       	nop
     118:	eb c2       	rjmp	.+1494   	; 0x6f0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e9 c2       	rjmp	.+1490   	; 0x6f0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	e7 c2       	rjmp	.+1486   	; 0x6f0 <__bad_interrupt>
     122:	00 00       	nop
     124:	e5 c2       	rjmp	.+1482   	; 0x6f0 <__bad_interrupt>
     126:	00 00       	nop
     128:	e3 c2       	rjmp	.+1478   	; 0x6f0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	e1 c2       	rjmp	.+1474   	; 0x6f0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	df c2       	rjmp	.+1470   	; 0x6f0 <__bad_interrupt>
     132:	00 00       	nop
     134:	dd c2       	rjmp	.+1466   	; 0x6f0 <__bad_interrupt>
     136:	00 00       	nop
     138:	db c2       	rjmp	.+1462   	; 0x6f0 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d9 c2       	rjmp	.+1458   	; 0x6f0 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d7 c2       	rjmp	.+1454   	; 0x6f0 <__bad_interrupt>
     142:	00 00       	nop
     144:	d5 c2       	rjmp	.+1450   	; 0x6f0 <__bad_interrupt>
     146:	00 00       	nop
     148:	d3 c2       	rjmp	.+1446   	; 0x6f0 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__vector_83>
     150:	cf c2       	rjmp	.+1438   	; 0x6f0 <__bad_interrupt>
     152:	00 00       	nop
     154:	cd c2       	rjmp	.+1434   	; 0x6f0 <__bad_interrupt>
     156:	00 00       	nop
     158:	cb c2       	rjmp	.+1430   	; 0x6f0 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c9 c2       	rjmp	.+1426   	; 0x6f0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	c7 c2       	rjmp	.+1422   	; 0x6f0 <__bad_interrupt>
     162:	00 00       	nop
     164:	c5 c2       	rjmp	.+1418   	; 0x6f0 <__bad_interrupt>
     166:	00 00       	nop
     168:	c3 c2       	rjmp	.+1414   	; 0x6f0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	c1 c2       	rjmp	.+1410   	; 0x6f0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	bf c2       	rjmp	.+1406   	; 0x6f0 <__bad_interrupt>
     172:	00 00       	nop
     174:	bd c2       	rjmp	.+1402   	; 0x6f0 <__bad_interrupt>
     176:	00 00       	nop
     178:	bb c2       	rjmp	.+1398   	; 0x6f0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b9 c2       	rjmp	.+1394   	; 0x6f0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b7 c2       	rjmp	.+1390   	; 0x6f0 <__bad_interrupt>
     182:	00 00       	nop
     184:	b5 c2       	rjmp	.+1386   	; 0x6f0 <__bad_interrupt>
     186:	00 00       	nop
     188:	b3 c2       	rjmp	.+1382   	; 0x6f0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b1 c2       	rjmp	.+1378   	; 0x6f0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	af c2       	rjmp	.+1374   	; 0x6f0 <__bad_interrupt>
     192:	00 00       	nop
     194:	ad c2       	rjmp	.+1370   	; 0x6f0 <__bad_interrupt>
     196:	00 00       	nop
     198:	ab c2       	rjmp	.+1366   	; 0x6f0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a9 c2       	rjmp	.+1362   	; 0x6f0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a7 c2       	rjmp	.+1358   	; 0x6f0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	a5 c2       	rjmp	.+1354   	; 0x6f0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a3 c2       	rjmp	.+1350   	; 0x6f0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a1 c2       	rjmp	.+1346   	; 0x6f0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	9f c2       	rjmp	.+1342   	; 0x6f0 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	9d c2       	rjmp	.+1338   	; 0x6f0 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	9b c2       	rjmp	.+1334   	; 0x6f0 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	99 c2       	rjmp	.+1330   	; 0x6f0 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	97 c2       	rjmp	.+1326   	; 0x6f0 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	95 c2       	rjmp	.+1322   	; 0x6f0 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	93 c2       	rjmp	.+1318   	; 0x6f0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	91 c2       	rjmp	.+1314   	; 0x6f0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	8f c2       	rjmp	.+1310   	; 0x6f0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	8d c2       	rjmp	.+1306   	; 0x6f0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	8b c2       	rjmp	.+1302   	; 0x6f0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	89 c2       	rjmp	.+1298   	; 0x6f0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	87 c2       	rjmp	.+1294   	; 0x6f0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	85 c2       	rjmp	.+1290   	; 0x6f0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	83 c2       	rjmp	.+1286   	; 0x6f0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	81 c2       	rjmp	.+1282   	; 0x6f0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	7f c2       	rjmp	.+1278   	; 0x6f0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 48 1f 	jmp	0x3e90	; 0x3e90 <__vector_125>
     1f8:	7b c2       	rjmp	.+1270   	; 0x6f0 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	ab 0d       	add	r26, r11
     1fe:	ab 0d       	add	r26, r11
     200:	93 0d       	add	r25, r3
     202:	9c 0d       	add	r25, r12
     204:	b5 0d       	add	r27, r5
     206:	69 0d       	add	r22, r9
     208:	83 0d       	add	r24, r3
     20a:	86 0d       	add	r24, r6
     20c:	7d 0d       	add	r23, r13
     20e:	6e 12       	cpse	r6, r30
     210:	fa 11       	cpse	r31, r10
     212:	03 12       	cpse	r0, r19
     214:	0a 12       	cpse	r0, r26
     216:	18 12       	cpse	r1, r24
     218:	23 12       	cpse	r2, r19
     21a:	48 12       	cpse	r4, r24
     21c:	c2 11       	cpse	r28, r2
     21e:	56 12       	cpse	r5, r22
     220:	5d 12       	cpse	r5, r29
     222:	64 12       	cpse	r6, r20
     224:	c6 13       	cpse	r28, r22
     226:	c6 13       	cpse	r28, r22
     228:	da 13       	cpse	r29, r26
     22a:	95 14       	cp	r9, r5
     22c:	ec 13       	cpse	r30, r28
     22e:	0a 14       	cp	r0, r10
     230:	8a 13       	cpse	r24, r26
     232:	ae 13       	cpse	r26, r30
     234:	ae 13       	cpse	r26, r30
     236:	ae 13       	cpse	r26, r30
     238:	53 1a       	sub	r5, r19
     23a:	20 1a       	sub	r2, r16
     23c:	bf 19       	sub	r27, r15
     23e:	20 1a       	sub	r2, r16
     240:	bf 19       	sub	r27, r15
     242:	0e 1a       	sub	r0, r30
     244:	f0 19       	sub	r31, r0
     246:	bf 19       	sub	r27, r15
     248:	e7 19       	sub	r30, r7
     24a:	d0 19       	sub	r29, r0

0000024c <ProductString>:
     24c:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     25c:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000026a <ManufacturerString>:
     26a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     27a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000284 <LanguageString>:
     284:	04 03 09 04                                         ....

00000288 <ConfigurationDescriptor>:
     288:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     298:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     2a8:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     2b8:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000002c6 <DeviceDescriptor>:
     2c6:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     2d6:	dc 01                                               ..

000002d8 <ConfigurationTable>:
     2d8:	00 4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00     .NONE...........
     2e8:	00 65 04 66 04 67 04 68 04 69 04 6a 04 6d 04 6e     .e.f.g.h.i.j.m.n
     2f8:	04 00 00 00 01 01 4d 46 5f 43 4c 41 53 53 49 43     ......MF_CLASSIC
     308:	5f 31 4b 00 00 00 88 12 bf 12 3a 13 54 13 58 13     _1K.......:.T.X.
     318:	59 13 2c 17 32 17 00 04 04 00 02 4d 46 5f 43 4c     Y.,.2......MF_CL
     328:	41 53 53 49 43 5f 34 4b 00 00 00 88 12 bf 12 47     ASSIC_4K.......G
     338:	13 54 13 58 13 59 13 2c 17 32 17 00 10 04 00        .T.X.Y.,.2.....

00000347 <ButtonActionTable>:
     347:	4e 4f 4e 45 00 00 00 00 00 00 00 00 00 00 00 00     NONE............
     357:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     367:	55 49 44 5f 52 41 4e 44 4f 4d 00 00 00 00 00 00     UID_RANDOM......
     377:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     387:	55 49 44 5f 4c 45 46 54 5f 49 4e 43 52 45 4d 45     UID_LEFT_INCREME
     397:	4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     NT..............
     3a7:	55 49 44 5f 52 49 47 48 54 5f 49 4e 43 52 45 4d     UID_RIGHT_INCREM
     3b7:	45 4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00     ENT.............
     3c7:	55 49 44 5f 4c 45 46 54 5f 44 45 43 52 45 4d 45     UID_LEFT_DECREME
     3d7:	4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     NT..............
     3e7:	55 49 44 5f 52 49 47 48 54 5f 44 45 43 52 45 4d     UID_RIGHT_DECREM
     3f7:	45 4e 54 00 00 00 00 00 00 00 00 00 00 00 00 00     ENT.............
     407:	43 59 43 4c 45 5f 53 45 54 54 49 4e 47 53 00 00     CYCLE_SETTINGS..
     417:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

00000427 <__c.6526>:
     427:	25 35 75 20 6d 56 00                                %5u mV.

0000042e <__c.6487>:
     42e:	25 75 00                                            %u.

00000431 <__c.6482>:
     431:	25 75 00                                            %u.

00000434 <__c.6455>:
     434:	52 41 4e 44 4f 4d 00                                RANDOM.

0000043b <__c.6437>:
     43b:	25 73 00                                            %s.

0000043e <__c.6426>:
     43e:	43 68 61 6d 65 6c 65 6f 6e 2d 4d 69 6e 69 20 25     Chameleon-Mini %
     44e:	53 20 75 73 69 6e 67 20 4c 55 46 41 20 25 53 20     S using LUFA %S 
     45e:	63 6f 6d 70 69 6c 65 64 20 77 69 74 68 20 41 56     compiled with AV
     46e:	52 2d 47 43 43 20 25 53 00                          R-GCC %S.

00000477 <__c.6428>:
     477:	31 34 30 35 30 36 00                                140506.

0000047e <__c.6430>:
     47e:	31 33 30 39 30 31 00                                130901.

00000485 <__c.6432>:
     485:	34 2e 38 2e 31 00                                   4.8.1.

0000048b <__c.6224>:
     48b:	0d 0a 00                                            ...

0000048e <__c.6222>:
     48e:	0d 0a 00                                            ...

00000491 <StatusTable>:
     491:	64 31 30 30 3a 4f 4b 00 00 00 00 00 00 00 00 00     d100:OK.........
     4a1:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4b1:	00 65 31 30 31 3a 4f 4b 20 57 49 54 48 20 54 45     .e101:OK WITH TE
     4c1:	58 54 00 00 00 00 00 00 00 00 00 00 00 00 00 00     XT..............
     4d1:	00 00 6e 31 31 30 3a 57 41 49 54 49 4e 47 20 46     ..n110:WAITING F
     4e1:	4f 52 20 58 4d 4f 44 45 4d 00 00 00 00 00 00 00     OR XMODEM.......
     4f1:	00 00 00 c8 32 30 30 3a 55 4e 4b 4e 4f 57 4e 20     ....200:UNKNOWN 
     501:	43 4f 4d 4d 41 4e 44 00 00 00 00 00 00 00 00 00     COMMAND.........
     511:	00 00 00 00 c9 32 30 31 3a 49 4e 56 41 4c 49 44     .....201:INVALID
     521:	20 43 4f 4d 4d 41 4e 44 20 55 53 41 47 45 00 00      COMMAND USAGE..
     531:	00 00 00 00 00 ca 32 30 32 3a 49 4e 56 41 4c 49     ......202:INVALI
     541:	44 20 50 41 52 41 4d 45 54 45 52 00 00 00 00 00     D PARAMETER.....
     551:	00 00 00 00 00 00                                   ......

00000557 <CommandTable>:
     557:	56 45 52 53 49 4f 4e 00 00 00 00 00 00 00 00 00     VERSION.........
     567:	00 00 00 00 5f 0b 43 4f 4e 46 49 47 00 00 00 00     ...._.CONFIG....
     577:	00 00 00 00 00 00 9b 0b 93 0b 7d 0b 55 49 44 00     ..........}.UID.
     587:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 c9 0b     ................
     597:	a0 0b 52 45 41 44 4f 4e 4c 59 00 00 00 00 00 00     ..READONLY......
     5a7:	00 00 00 00 2b 0c 19 0c 55 50 4c 4f 41 44 00 00     ....+...UPLOAD..
     5b7:	00 00 00 00 00 00 00 00 3f 0c 00 00 00 00 44 4f     ........?.....DO
     5c7:	57 4e 4c 4f 41 44 00 00 00 00 00 00 00 00 44 0c     WNLOAD........D.
     5d7:	00 00 00 00 52 45 53 45 54 00 00 00 00 00 00 00     ....RESET.......
     5e7:	00 00 00 00 49 0c 00 00 00 00 55 50 47 52 41 44     ....I.....UPGRAD
     5f7:	45 00 00 00 00 00 00 00 00 00 54 0c 00 00 00 00     E.........T.....
     607:	4d 45 4d 53 49 5a 45 00 00 00 00 00 00 00 00 00     MEMSIZE.........
     617:	00 00 00 00 5f 0c 55 49 44 53 49 5a 45 00 00 00     ...._.UIDSIZE...
     627:	00 00 00 00 00 00 00 00 00 00 77 0c 42 55 54 54     ..........w.BUTT
     637:	4f 4e 00 00 00 00 00 00 00 00 00 00 8d 0c 97 0c     ON..............
     647:	92 0c 53 45 54 54 49 4e 47 00 00 00 00 00 00 00     ..SETTING.......
     657:	00 00 00 00 a4 0c 9f 0c 43 4c 45 41 52 00 00 00     ........CLEAR...
     667:	00 00 00 00 00 00 00 00 ac 0c 00 00 00 00 48 45     ..............HE
     677:	4c 50 00 00 00 00 00 00 00 00 00 00 00 00 af 0c     LP..............
     687:	00 00 00 00 52 53 53 49 00 00 00 00 00 00 00 00     ....RSSI........
     697:	00 00 00 00 00 00 00 00 f9 0c 00 00 00 00 00 00     ................
     6a7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     6b7:	00                                                  .

000006b8 <__ctors_end>:
     6b8:	11 24       	eor	r1, r1
     6ba:	1f be       	out	0x3f, r1	; 63
     6bc:	cf ef       	ldi	r28, 0xFF	; 255
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	df e2       	ldi	r29, 0x2F	; 47
     6c2:	de bf       	out	0x3e, r29	; 62

000006c4 <__do_copy_data>:
     6c4:	10 e2       	ldi	r17, 0x20	; 32
     6c6:	a0 e0       	ldi	r26, 0x00	; 0
     6c8:	b0 e2       	ldi	r27, 0x20	; 32
     6ca:	e4 e2       	ldi	r30, 0x24	; 36
     6cc:	fb e4       	ldi	r31, 0x4B	; 75
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <__do_copy_data+0x10>
     6d0:	05 90       	lpm	r0, Z+
     6d2:	0d 92       	st	X+, r0
     6d4:	a2 39       	cpi	r26, 0x92	; 146
     6d6:	b1 07       	cpc	r27, r17
     6d8:	d9 f7       	brne	.-10     	; 0x6d0 <__do_copy_data+0xc>

000006da <__do_clear_bss>:
     6da:	26 e2       	ldi	r18, 0x26	; 38
     6dc:	a2 e9       	ldi	r26, 0x92	; 146
     6de:	b0 e2       	ldi	r27, 0x20	; 32
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <.do_clear_bss_start>

000006e2 <.do_clear_bss_loop>:
     6e2:	1d 92       	st	X+, r1

000006e4 <.do_clear_bss_start>:
     6e4:	ad 39       	cpi	r26, 0x9D	; 157
     6e6:	b2 07       	cpc	r27, r18
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <.do_clear_bss_loop>
     6ea:	03 d0       	rcall	.+6      	; 0x6f2 <main>
     6ec:	0c 94 90 25 	jmp	0x4b20	; 0x4b20 <_exit>

000006f0 <__bad_interrupt>:
     6f0:	75 c0       	rjmp	.+234    	; 0x7dc <__vector_default>

000006f2 <main>:

#include "Chameleon-Mini.h"

int main(void)
{
    SystemInit();
     6f2:	7a d0       	rcall	.+244    	; 0x7e8 <SystemInit>
    SettingsLoad();
     6f4:	b1 d6       	rcall	.+3426   	; 0x1458 <SettingsLoad>

extern uint8_t LEDPulseMask;

static inline
void LEDInit(void) {
    LED_PORT.DIRSET = LED_MASK;
     6f6:	80 e3       	ldi	r24, 0x30	; 48
     6f8:	80 93 01 06 	sts	0x0601, r24
    LEDInit();
    MemoryInit();
     6fc:	31 d2       	rcall	.+1122   	; 0xb60 <MemoryInit>
    ConfigurationInit();
     6fe:	0a d1       	rcall	.+532    	; 0x914 <ConfigurationInit>
    TerminalInit();
     700:	6a d7       	rcall	.+3796   	; 0x15d6 <TerminalInit>
    RandomInit();
     702:	85 d1       	rcall	.+778    	; 0xa0e <RandomInit>
    ButtonInit();
     704:	3b d5       	rcall	.+2678   	; 0x117c <ButtonInit>
#define ANTENNA_LEVEL_DENOMINATOR (ANTENNA_LEVEL_SCALE)

static inline
void AntennaLevelInit(void)
{
	ADCA.CTRLA = ADC_ENABLE_bm;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	80 93 00 02 	sts	0x0200, r24
	ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc;
     70c:	10 92 01 02 	sts	0x0201, r1
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc | ADC_BANDGAP_bm;
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	90 93 02 02 	sts	0x0202, r25
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
     716:	93 e0       	ldi	r25, 0x03	; 3
     718:	90 93 04 02 	sts	0x0204, r25
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     71c:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc;
     720:	88 e3       	ldi	r24, 0x38	; 56
     722:	80 93 21 02 	sts	0x0221, r24
    AntennaLevelInit();

    SystemInterruptInit();
     726:	cb d0       	rcall	.+406    	; 0x8be <SystemInterruptInit>
}

INLINE bool SystemTick100ms(void)
{
    if (TCE0.INTFLAGS & TC0_OVFIF_bm) {
        TCE0.INTFLAGS = TC0_OVFIF_bm;
     728:	c1 e0       	ldi	r28, 0x01	; 1

    while(1) {
        TerminalTask();
     72a:	5a d7       	rcall	.+3764   	; 0x15e0 <TerminalTask>
INLINE void CodecInit(void) {
    ActiveConfiguration.CodecInitFunc();
}

INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
     72c:	e0 91 eb 20 	lds	r30, 0x20EB
     730:	f0 91 ec 20 	lds	r31, 0x20EC
     734:	09 95       	icall
INLINE void ApplicationInit(void) {
    ActiveConfiguration.ApplicationInitFunc();
}

INLINE void ApplicationTask(void) {
    ActiveConfiguration.ApplicationTaskFunc();
     736:	e0 91 f1 20 	lds	r30, 0x20F1
     73a:	f0 91 f2 20 	lds	r31, 0x20F2
     73e:	09 95       	icall
    return RTC.CNT;
}

INLINE bool SystemTick100ms(void)
{
    if (TCE0.INTFLAGS & TC0_OVFIF_bm) {
     740:	80 91 0c 0a 	lds	r24, 0x0A0C
     744:	80 ff       	sbrs	r24, 0
     746:	f1 cf       	rjmp	.-30     	; 0x72a <main+0x38>
        TCE0.INTFLAGS = TC0_OVFIF_bm;
     748:	c0 93 0c 0a 	sts	0x0A0C, r28
        CodecTask();
        ApplicationTask();

        if (SystemTick100ms()) {
            RandomTick();
     74c:	74 d1       	rcall	.+744    	; 0xa36 <RandomTick>
            TerminalTick();
     74e:	67 d7       	rcall	.+3790   	; 0x161e <TerminalTick>
            ButtonTick();
     750:	1c d5       	rcall	.+2616   	; 0x118a <ButtonTick>
	LED_PORT.OUTSET = Mask;
}

static inline
void LEDTick(void) {
	LED_PORT.OUTCLR = LEDPulseMask;
     752:	80 91 93 20 	lds	r24, 0x2093
     756:	80 93 06 06 	sts	0x0606, r24
	LEDPulseMask = 0;
     75a:	10 92 93 20 	sts	0x2093, r1
     75e:	e5 cf       	rjmp	.-54     	; 0x72a <main+0x38>

00000760 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
     760:	29 2f       	mov	r18, r25
     762:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     764:	22 30       	cpi	r18, 0x02	; 2
     766:	31 05       	cpc	r19, r1
     768:	29 f1       	breq	.+74     	; 0x7b4 <CALLBACK_USB_GetDescriptor+0x54>
     76a:	23 30       	cpi	r18, 0x03	; 3
     76c:	31 05       	cpc	r19, r1
     76e:	99 f0       	breq	.+38     	; 0x796 <CALLBACK_USB_GetDescriptor+0x36>
     770:	21 30       	cpi	r18, 0x01	; 1
     772:	31 05       	cpc	r19, r1
     774:	41 f0       	breq	.+16     	; 0x786 <CALLBACK_USB_GetDescriptor+0x26>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
     77e:	fa 01       	movw	r30, r20
     780:	20 83       	st	Z, r18
     782:	31 83       	std	Z+1, r19	; 0x01
    return Size;
}
     784:	08 95       	ret

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     786:	82 e1       	ldi	r24, 0x12	; 18
     788:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     78a:	26 ec       	ldi	r18, 0xC6	; 198
     78c:	32 e0       	ldi	r19, 0x02	; 2
            }

            break;
    }

    *DescriptorAddress = Address;
     78e:	fa 01       	movw	r30, r20
     790:	20 83       	st	Z, r18
     792:	31 83       	std	Z+1, r19	; 0x01
    return Size;
}
     794:	08 95       	ret
     796:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	91 05       	cpc	r25, r1
     79c:	99 f0       	breq	.+38     	; 0x7c4 <CALLBACK_USB_GetDescriptor+0x64>
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	91 05       	cpc	r25, r1
     7a2:	b1 f0       	breq	.+44     	; 0x7d0 <CALLBACK_USB_GetDescriptor+0x70>
     7a4:	89 2b       	or	r24, r25
     7a6:	39 f7       	brne	.-50     	; 0x776 <CALLBACK_USB_GetDescriptor+0x16>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     7a8:	e4 e8       	ldi	r30, 0x84	; 132
     7aa:	f2 e0       	ldi	r31, 0x02	; 2
     7ac:	84 91       	lpm	r24, Z+
     7ae:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
            {
                case 0x00:
                    Address = &LanguageString;
     7b0:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
     7b2:	e5 cf       	rjmp	.-54     	; 0x77e <CALLBACK_USB_GetDescriptor+0x1e>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     7b4:	8e e3       	ldi	r24, 0x3E	; 62
     7b6:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     7b8:	28 e8       	ldi	r18, 0x88	; 136
     7ba:	32 e0       	ldi	r19, 0x02	; 2
            }

            break;
    }

    *DescriptorAddress = Address;
     7bc:	fa 01       	movw	r30, r20
     7be:	20 83       	st	Z, r18
     7c0:	31 83       	std	Z+1, r19	; 0x01
    return Size;
}
     7c2:	08 95       	ret
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     7c4:	ea e6       	ldi	r30, 0x6A	; 106
     7c6:	f2 e0       	ldi	r31, 0x02	; 2
     7c8:	84 91       	lpm	r24, Z+
     7ca:	90 e0       	ldi	r25, 0x00	; 0
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case 0x01:
                    Address = &ManufacturerString;
     7cc:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
     7ce:	d7 cf       	rjmp	.-82     	; 0x77e <CALLBACK_USB_GetDescriptor+0x1e>
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     7d0:	ec e4       	ldi	r30, 0x4C	; 76
     7d2:	f2 e0       	ldi	r31, 0x02	; 2
     7d4:	84 91       	lpm	r24, Z+
     7d6:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
     7d8:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
     7da:	d1 cf       	rjmp	.-94     	; 0x77e <CALLBACK_USB_GetDescriptor+0x1e>

000007dc <__vector_default>:

#include "System.h"
#include "LED.h"

ISR(BADISR_vect)
{
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	ff cf       	rjmp	.-2      	; 0x7e6 <__vector_default+0xa>

000007e8 <SystemInit>:
    while(1);
}

void SystemInit(void)
{
    if (RST.STATUS & RST_WDRF_bm) {
     7e8:	80 91 78 00 	lds	r24, 0x0078
     7ec:	83 ff       	sbrs	r24, 3
     7ee:	0a c0       	rjmp	.+20     	; 0x804 <SystemInit+0x1c>
        /* On Watchdog reset clear WDRF bit, disable watchdog
        * and jump into bootloader */
        RST.STATUS = RST_WDRF_bm;
     7f0:	88 e0       	ldi	r24, 0x08	; 8
     7f2:	80 93 78 00 	sts	0x0078, r24

        CCP = CCP_IOREG_gc;
     7f6:	88 ed       	ldi	r24, 0xD8	; 216
     7f8:	84 bf       	out	0x34, r24	; 52
        WDT.CTRL = WDT_CEN_bm;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 80 00 	sts	0x0080, r24

        asm volatile ("jmp %0"::"i" (BOOT_SECTION_START + 0x1FC));
     800:	fd 95 fe c0 	jmp	0x7f81fc	; 0x7f81fc <__data_load_end+0x7f3646>
    }

    /* 32MHz system clock using internal RC and 32K DFLL*/
    OSC.CTRL |= OSC_RC32MEN_bm | OSC_RC32KEN_bm;
     804:	80 91 50 00 	lds	r24, 0x0050
     808:	86 60       	ori	r24, 0x06	; 6
     80a:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_RC32MRDY_bm))
     80e:	80 91 51 00 	lds	r24, 0x0051
     812:	81 ff       	sbrs	r24, 1
     814:	fc cf       	rjmp	.-8      	; 0x80e <SystemInit+0x26>
        ;
    while(!(OSC.STATUS & OSC_RC32KRDY_bm))
     816:	80 91 51 00 	lds	r24, 0x0051
     81a:	82 ff       	sbrs	r24, 2
     81c:	fc cf       	rjmp	.-8      	; 0x816 <SystemInit+0x2e>
        ;

    OSC.DFLLCTRL = OSC_RC32MCREF_RC32K_gc;
     81e:	10 92 56 00 	sts	0x0056, r1
    DFLLRC32M.CTRL = DFLL_ENABLE_bm;
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	20 93 60 00 	sts	0x0060, r18

    CCP = CCP_IOREG_gc;
     828:	88 ed       	ldi	r24, 0xD8	; 216
     82a:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     82c:	20 93 40 00 	sts	0x0040, r18

    /* Use TCE0 as system tick */
    TCE0.PER = F_CPU / 256 / SYSTEM_TICK_FREQ - 1;
     830:	83 ed       	ldi	r24, 0xD3	; 211
     832:	90 e3       	ldi	r25, 0x30	; 48
     834:	80 93 26 0a 	sts	0x0A26, r24
     838:	90 93 27 0a 	sts	0x0A27, r25
    TCE0.CTRLA = TC_CLKSEL_DIV256_gc;
     83c:	86 e0       	ldi	r24, 0x06	; 6
     83e:	80 93 00 0a 	sts	0x0A00, r24

    /* Enable RTC with roughly 1kHz clock */
    CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm;
     842:	20 93 43 00 	sts	0x0043, r18
    RTC.CTRL = RTC_PRESCALER_DIV1_gc;
     846:	20 93 00 04 	sts	0x0400, r18

    /* Enable EEPROM data memory mapping */
    NVM.CTRLB |= NVM_EEMAPEN_bm;
     84a:	80 91 cc 01 	lds	r24, 0x01CC
     84e:	88 60       	ori	r24, 0x08	; 8
     850:	80 93 cc 01 	sts	0x01CC, r24
     854:	08 95       	ret

00000856 <SystemReset>:
}

void SystemReset(void)
{
    CCP = CCP_IOREG_gc;
     856:	88 ed       	ldi	r24, 0xD8	; 216
     858:	84 bf       	out	0x34, r24	; 52
    RST.CTRL = RST_SWRST_bm;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	e8 e7       	ldi	r30, 0x78	; 120
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	81 83       	std	Z+1, r24	; 0x01
     862:	08 95       	ret

00000864 <SystemEnterBootloader>:
}

void SystemEnterBootloader(void)
{
    /* Use Watchdog timer to reset into bootloader. */
    CCP = CCP_IOREG_gc;
     864:	88 ed       	ldi	r24, 0xD8	; 216
     866:	84 bf       	out	0x34, r24	; 52
    WDT.CTRL = WDT_PER_500CLK_gc | WDT_ENABLE_bm | WDT_CEN_bm;
     868:	8b e1       	ldi	r24, 0x1B	; 27
     86a:	80 93 80 00 	sts	0x0080, r24
     86e:	08 95       	ret

00000870 <SystemStartUSBClock>:


void SystemStartUSBClock(void)
{
    /* 48MHz USB Clock using 12MHz XTAL */
    OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
     870:	8b ec       	ldi	r24, 0xCB	; 203
     872:	80 93 52 00 	sts	0x0052, r24
    OSC.CTRL |= OSC_XOSCEN_bm;
     876:	80 91 50 00 	lds	r24, 0x0050
     87a:	88 60       	ori	r24, 0x08	; 8
     87c:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_XOSCRDY_bm))
     880:	80 91 51 00 	lds	r24, 0x0051
     884:	83 ff       	sbrs	r24, 3
     886:	fc cf       	rjmp	.-8      	; 0x880 <SystemStartUSBClock+0x10>
        ;

    OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | (4 << OSC_PLLFAC_gp);
     888:	84 ec       	ldi	r24, 0xC4	; 196
     88a:	80 93 55 00 	sts	0x0055, r24

    OSC.CTRL |= OSC_PLLEN_bm;
     88e:	80 91 50 00 	lds	r24, 0x0050
     892:	80 61       	ori	r24, 0x10	; 16
     894:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_PLLRDY_bm))
     898:	80 91 51 00 	lds	r24, 0x0051
     89c:	84 ff       	sbrs	r24, 4
     89e:	fc cf       	rjmp	.-8      	; 0x898 <SystemStartUSBClock+0x28>
        ;
}
     8a0:	08 95       	ret

000008a2 <SystemStopUSBClock>:

void SystemStopUSBClock(void)
{
    /* Disable USB Clock to minimize power consumption */
    CLK.USBCTRL &= ~CLK_USBSEN_bm;
     8a2:	e0 e4       	ldi	r30, 0x40	; 64
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	84 81       	ldd	r24, Z+4	; 0x04
     8a8:	8e 7f       	andi	r24, 0xFE	; 254
     8aa:	84 83       	std	Z+4, r24	; 0x04
    OSC.CTRL &= ~OSC_PLLEN_bm;
     8ac:	e0 e5       	ldi	r30, 0x50	; 80
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	8f 7e       	andi	r24, 0xEF	; 239
     8b4:	80 83       	st	Z, r24
    OSC.CTRL &= ~OSC_XOSCEN_bm;
     8b6:	80 81       	ld	r24, Z
     8b8:	87 7f       	andi	r24, 0xF7	; 247
     8ba:	80 83       	st	Z, r24
     8bc:	08 95       	ret

000008be <SystemInterruptInit>:
}

void SystemInterruptInit(void)
{
    /* Enable all interrupt levels */
    PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     8be:	87 e0       	ldi	r24, 0x07	; 7
     8c0:	e0 ea       	ldi	r30, 0xA0	; 160
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	82 83       	std	Z+2, r24	; 0x02
    sei();
     8c6:	78 94       	sei
     8c8:	08 95       	ret

000008ca <CodecInitDummy>:

/* Include all Codecs and Applications */
#include "Codec/Codec.h"
#include "Application/Application.h"

static void CodecInitDummy(void) { }
     8ca:	08 95       	ret

000008cc <CodecTaskDummy>:
static void CodecTaskDummy(void) { }
     8cc:	08 95       	ret

000008ce <ApplicationInitDummy>:
static void ApplicationInitDummy(void) {}
     8ce:	08 95       	ret

000008d0 <ApplicationResetDummy>:
static void ApplicationResetDummy(void) {}
     8d0:	08 95       	ret

000008d2 <ApplicationTaskDummy>:
static void ApplicationTaskDummy(void) {}
     8d2:	08 95       	ret

000008d4 <ApplicationProcessDummy>:
static uint16_t ApplicationProcessDummy(uint8_t* ByteBuffer, uint16_t ByteCount) { return 0; }
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	08 95       	ret

000008da <ApplicationGetUidDummy>:
static void ApplicationGetUidDummy(ConfigurationUidType Uid) { }
     8da:	08 95       	ret

000008dc <ApplicationSetUidDummy>:
static void ApplicationSetUidDummy(ConfigurationUidType Uid) { }
     8dc:	08 95       	ret

000008de <ConfigurationSetById>:
    ConfigurationSetById(GlobalSettings.ActiveSettingPtr->Configuration);
}

void ConfigurationSetById( ConfigurationEnum Configuration )
{
	GlobalSettings.ActiveSettingPtr->Configuration = Configuration;
     8de:	e0 91 fe 20 	lds	r30, 0x20FE
     8e2:	f0 91 ff 20 	lds	r31, 0x20FF
     8e6:	81 83       	std	Z+1, r24	; 0x01

    /* Copy struct from PROGMEM to RAM */
    memcpy_P(&ActiveConfiguration,
            &ConfigurationTable[Configuration], sizeof(ConfigurationType));
     8e8:	95 e2       	ldi	r25, 0x25	; 37
     8ea:	89 9f       	mul	r24, r25
     8ec:	b0 01       	movw	r22, r0
     8ee:	11 24       	eor	r1, r1
     8f0:	68 52       	subi	r22, 0x28	; 40
     8f2:	7d 4f       	sbci	r23, 0xFD	; 253
void ConfigurationSetById( ConfigurationEnum Configuration )
{
	GlobalSettings.ActiveSettingPtr->Configuration = Configuration;

    /* Copy struct from PROGMEM to RAM */
    memcpy_P(&ActiveConfiguration,
     8f4:	45 e2       	ldi	r20, 0x25	; 37
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	88 ed       	ldi	r24, 0xD8	; 216
     8fa:	90 e2       	ldi	r25, 0x20	; 32
     8fc:	0e 94 2a 22 	call	0x4454	; 0x4454 <memcpy_P>
/* Applications */
#include "MifareClassic.h"

/* Function wrappers */
INLINE void ApplicationInit(void) {
    ActiveConfiguration.ApplicationInitFunc();
     900:	e0 91 ed 20 	lds	r30, 0x20ED
     904:	f0 91 ee 20 	lds	r31, 0x20EE
     908:	09 95       	icall
#define CODEC_CARRIER_FREQ          13560000

extern uint8_t CodecBuffer[CODEC_BUFFER_SIZE];

INLINE void CodecInit(void) {
    ActiveConfiguration.CodecInitFunc();
     90a:	e0 91 e9 20 	lds	r30, 0x20E9
     90e:	f0 91 ea 20 	lds	r31, 0x20EA
     912:	09 94       	ijmp

00000914 <ConfigurationInit>:

ConfigurationType ActiveConfiguration;

void ConfigurationInit(void)
{
    ConfigurationSetById(GlobalSettings.ActiveSettingPtr->Configuration);
     914:	e0 91 fe 20 	lds	r30, 0x20FE
     918:	f0 91 ff 20 	lds	r31, 0x20FF
     91c:	81 81       	ldd	r24, Z+1	; 0x01
     91e:	df cf       	rjmp	.-66     	; 0x8de <ConfigurationSetById>

00000920 <ConfigurationSetByName>:
    ApplicationInit();
    CodecInit();
}

bool ConfigurationSetByName(const char* ConfigurationName)
{
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	49 ed       	ldi	r20, 0xD9	; 217
     92a:	52 e0       	ldi	r21, 0x02	; 2
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
     92c:	10 e0       	ldi	r17, 0x00	; 0
     92e:	bc 01       	movw	r22, r24
     930:	6f 5f       	subi	r22, 0xFF	; 255
     932:	7f 4f       	sbci	r23, 0xFF	; 255
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
     934:	9a 01       	movw	r18, r20
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);
     936:	fa 01       	movw	r30, r20
     938:	c4 91       	lpm	r28, Z+

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     93a:	c1 11       	cpse	r28, r1
     93c:	0f c0       	rjmp	.+30     	; 0x95c <ConfigurationSetByName+0x3c>
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
        const char* pTableConfigName = ConfigurationTable[i].ConfigurationName;
        const char* pRequestedConfigName = ConfigurationName;
     93e:	ec 01       	movw	r28, r24
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     940:	28 81       	ld	r18, Y
     942:	22 23       	and	r18, r18
     944:	11 f1       	breq	.+68     	; 0x98a <ConfigurationSetByName+0x6a>
bool ConfigurationSetByName(const char* ConfigurationName)
{
    uint8_t i;

    /* Loop through table trying to find the configuration */
    for (i=0; i<(sizeof(ConfigurationTable) / sizeof(*ConfigurationTable)); i++) {
     946:	1f 5f       	subi	r17, 0xFF	; 255
     948:	4b 5d       	subi	r20, 0xDB	; 219
     94a:	5f 4f       	sbci	r21, 0xFF	; 255
     94c:	13 30       	cpi	r17, 0x03	; 3
     94e:	91 f7       	brne	.-28     	; 0x934 <ConfigurationSetByName+0x14>
            ConfigurationSetById(i);
            return true;
        }
    }

    return false;
     950:	80 e0       	ldi	r24, 0x00	; 0
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	08 95       	ret
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     95c:	dc 01       	movw	r26, r24
     95e:	fc 91       	ld	r31, X
     960:	ff 23       	and	r31, r31
     962:	89 f3       	breq	.-30     	; 0x946 <ConfigurationSetByName+0x26>
                /* One String ended before the other did -> unequal length */
                StringMismatch = true;
                break;
            }

            if (c != *pRequestedConfigName) {
     964:	cf 13       	cpse	r28, r31
     966:	ef cf       	rjmp	.-34     	; 0x946 <ConfigurationSetByName+0x26>
     968:	db 01       	movw	r26, r22
     96a:	05 c0       	rjmp	.+10     	; 0x976 <ConfigurationSetByName+0x56>
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
            if ( (c == '\0') || (*pRequestedConfigName == '\0') ) {
     96c:	fd 91       	ld	r31, X+
     96e:	ff 23       	and	r31, r31
     970:	51 f3       	breq	.-44     	; 0x946 <ConfigurationSetByName+0x26>
                /* One String ended before the other did -> unequal length */
                StringMismatch = true;
                break;
            }

            if (c != *pRequestedConfigName) {
     972:	f0 13       	cpse	r31, r16
     974:	e8 cf       	rjmp	.-48     	; 0x946 <ConfigurationSetByName+0x26>
                StringMismatch = true;
                break;
            }

            /* Proceed to next character */
            pTableConfigName++;
     976:	2f 5f       	subi	r18, 0xFF	; 255
     978:	3f 4f       	sbci	r19, 0xFF	; 255
            pRequestedConfigName++;
     97a:	ed 01       	movw	r28, r26

            c = pgm_read_byte(pTableConfigName);
     97c:	f9 01       	movw	r30, r18
     97e:	04 91       	lpm	r16, Z+
        const char* pRequestedConfigName = ConfigurationName;
        bool StringMismatch = false;
        char c = pgm_read_byte(pTableConfigName);

        /* Try to keep running until both strings end at the same point */
        while ( !(c == '\0' && *pRequestedConfigName == '\0') ) {
     980:	01 11       	cpse	r16, r1
     982:	f4 cf       	rjmp	.-24     	; 0x96c <ConfigurationSetByName+0x4c>
     984:	28 81       	ld	r18, Y
     986:	21 11       	cpse	r18, r1
     988:	de cf       	rjmp	.-68     	; 0x946 <ConfigurationSetByName+0x26>
            c = pgm_read_byte(pTableConfigName);
        }

        if (!StringMismatch) {
            /* Configuration found */
            ConfigurationSetById(i);
     98a:	81 2f       	mov	r24, r17
     98c:	a8 df       	rcall	.-176    	; 0x8de <ConfigurationSetById>
            return true;
     98e:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return false;
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <ConfigurationGetList>:

void ConfigurationGetList(char* ConfigListOut, uint16_t ByteCount)
{
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
    uint8_t i;

    /* Account for '\0' */
    ByteCount--;
     9a2:	61 50       	subi	r22, 0x01	; 1
     9a4:	71 09       	sbc	r23, r1
     9a6:	49 ed       	ldi	r20, 0xD9	; 217
     9a8:	52 e0       	ldi	r21, 0x02	; 2
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     9aa:	1c e2       	ldi	r17, 0x2C	; 44

    /* Account for '\0' */
    ByteCount--;

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
     9ac:	9a 01       	movw	r18, r20
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     9ae:	fa 01       	movw	r30, r20
     9b0:	04 91       	lpm	r16, Z+
     9b2:	00 23       	and	r16, r16
     9b4:	51 f1       	breq	.+84     	; 0xa0a <ConfigurationGetList+0x70>
     9b6:	61 31       	cpi	r22, 0x11	; 17
     9b8:	71 05       	cpc	r23, r1
     9ba:	20 f4       	brcc	.+8      	; 0x9c4 <ConfigurationGetList+0x2a>
     9bc:	26 c0       	rjmp	.+76     	; 0xa0a <ConfigurationGetList+0x70>
     9be:	60 31       	cpi	r22, 0x10	; 16
     9c0:	71 05       	cpc	r23, r1
     9c2:	61 f0       	breq	.+24     	; 0x9dc <ConfigurationGetList+0x42>
     9c4:	dc 01       	movw	r26, r24
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	ec 01       	movw	r28, r24
            /* While not end-of-string and enough buffer to
            * put a complete configuration name */
            *ConfigListOut++ = c;
     9ca:	0c 93       	st	X, r16
            ConfigName++;
     9cc:	2f 5f       	subi	r18, 0xFF	; 255
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
            ByteCount--;
     9d0:	61 50       	subi	r22, 0x01	; 1
     9d2:	71 09       	sbc	r23, r1

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     9d4:	f9 01       	movw	r30, r18
     9d6:	04 91       	lpm	r16, Z+
     9d8:	01 11       	cpse	r16, r1
     9da:	f1 cf       	rjmp	.-30     	; 0x9be <ConfigurationGetList+0x24>
            *ConfigListOut++ = c;
            ConfigName++;
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
     9dc:	f3 e0       	ldi	r31, 0x03	; 3
     9de:	43 32       	cpi	r20, 0x23	; 35
     9e0:	5f 07       	cpc	r21, r31
     9e2:	31 f4       	brne	.+12     	; 0x9f0 <ConfigurationGetList+0x56>
            *ConfigListOut++ = ',';
            ByteCount--;
        }
    }

    *ConfigListOut = '\0';
     9e4:	18 82       	st	Y, r1
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	08 95       	ret
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	18 83       	st	Y, r17
            ByteCount--;
     9f6:	61 50       	subi	r22, 0x01	; 1
     9f8:	71 09       	sbc	r23, r1
     9fa:	4b 5d       	subi	r20, 0xDB	; 219
     9fc:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;

    /* Account for '\0' */
    ByteCount--;

    for (i=0; i<CONFIG_COUNT; i++) {
     9fe:	23 e0       	ldi	r18, 0x03	; 3
     a00:	48 34       	cpi	r20, 0x48	; 72
     a02:	52 07       	cpc	r21, r18
     a04:	99 f6       	brne	.-90     	; 0x9ac <ConfigurationGetList+0x12>
            ByteCount--;
        }

        if ( i < (CONFIG_COUNT - 1) ) {
            /* No comma on last configuration */
            *ConfigListOut++ = ',';
     a06:	ec 01       	movw	r28, r24
     a08:	ed cf       	rjmp	.-38     	; 0x9e4 <ConfigurationGetList+0x4a>

    for (i=0; i<CONFIG_COUNT; i++) {
        const char* ConfigName = ConfigurationTable[i].ConfigurationName;
        char c;

        while( (c = pgm_read_byte(ConfigName)) != '\0' && ByteCount > CONFIGURATION_NAME_LENGTH_MAX) {
     a0a:	ec 01       	movw	r28, r24
     a0c:	e7 cf       	rjmp	.-50     	; 0x9dc <ConfigurationGetList+0x42>

00000a0e <RandomInit>:
#include "Random.h"

#include <stdlib.h>

void RandomInit(void)
{
     a0e:	08 95       	ret

00000a10 <RandomGetByte>:

}

uint8_t RandomGetByte(void)
{
    return rand() & 0xFF;
     a10:	0c 94 1c 22 	jmp	0x4438	; 0x4438 <rand>
}
     a14:	08 95       	ret

00000a16 <RandomGetBuffer>:

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
{
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     a1c:	66 23       	and	r22, r22
     a1e:	39 f0       	breq	.+14     	; 0xa2e <RandomGetBuffer+0x18>
     a20:	ec 01       	movw	r28, r24
     a22:	16 2f       	mov	r17, r22

}

uint8_t RandomGetByte(void)
{
    return rand() & 0xFF;
     a24:	0e 94 1c 22 	call	0x4438	; 0x4438 <rand>
     a28:	89 93       	st	Y+, r24
     a2a:	11 50       	subi	r17, 0x01	; 1

void RandomGetBuffer(void* Buffer, uint8_t ByteCount)
{
    uint8_t* BufferPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
     a2c:	d9 f7       	brne	.-10     	; 0xa24 <RandomGetBuffer+0xe>
        *BufferPtr++ = RandomGetByte();
    }
}
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	08 95       	ret

00000a36 <RandomTick>:

void RandomTick(void)
{
    rand();
     a36:	0e 94 1c 22 	call	0x4438	; 0x4438 <rand>
    rand();
     a3a:	0e 94 1c 22 	call	0x4438	; 0x4438 <rand>
    rand();
     a3e:	0e 94 1c 22 	call	0x4438	; 0x4438 <rand>
    rand();
     a42:	0c 94 1c 22 	jmp	0x4438	; 0x4438 <rand>

00000a46 <BufferToHexString>:
 */

#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	dc 01       	movw	r26, r24
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;
     a4c:	61 50       	subi	r22, 0x01	; 1
     a4e:	71 09       	sbc	r23, r1

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     a50:	21 15       	cp	r18, r1
     a52:	31 05       	cpc	r19, r1
     a54:	a9 f1       	breq	.+106    	; 0xac0 <BufferToHexString+0x7a>
     a56:	62 30       	cpi	r22, 0x02	; 2
     a58:	71 05       	cpc	r23, r1
     a5a:	90 f1       	brcs	.+100    	; 0xac0 <BufferToHexString+0x7a>
     a5c:	fa 01       	movw	r30, r20
     a5e:	21 50       	subi	r18, 0x01	; 1
     a60:	31 09       	sbc	r19, r1
     a62:	24 0f       	add	r18, r20
     a64:	35 1f       	adc	r19, r21
#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	17 c0       	rjmp	.+46     	; 0xa9a <BufferToHexString+0x54>
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
        uint8_t Byte = *ByteBuffer;

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
     a6c:	d0 5d       	subi	r29, 0xD0	; 208
     a6e:	dc 93       	st	X, r29
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );
     a70:	cf 70       	andi	r28, 0x0F	; 15
     a72:	4c 2f       	mov	r20, r28
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	4a 30       	cpi	r20, 0x0A	; 10
     a78:	51 05       	cpc	r21, r1
     a7a:	04 f5       	brge	.+64     	; 0xabc <BufferToHexString+0x76>
     a7c:	c0 5d       	subi	r28, 0xD0	; 208
     a7e:	11 96       	adiw	r26, 0x01	; 1
     a80:	cc 93       	st	X, r28
     a82:	11 97       	sbiw	r26, 0x01	; 1

        HexOut += 2;
     a84:	12 96       	adiw	r26, 0x02	; 2
        MaxChars -= 2;
     a86:	62 50       	subi	r22, 0x02	; 2
     a88:	71 09       	sbc	r23, r1
        CharCount += 2;
     a8a:	02 96       	adiw	r24, 0x02	; 2
    uint16_t CharCount = 0;

    /* Account for '\0' at the end */
    MaxChars--;

    while( (ByteCount > 0) && (MaxChars >= 2) ) {
     a8c:	e2 17       	cp	r30, r18
     a8e:	f3 07       	cpc	r31, r19
     a90:	c9 f0       	breq	.+50     	; 0xac4 <BufferToHexString+0x7e>
     a92:	31 96       	adiw	r30, 0x01	; 1
     a94:	62 30       	cpi	r22, 0x02	; 2
     a96:	71 05       	cpc	r23, r1
     a98:	a8 f0       	brcs	.+42     	; 0xac4 <BufferToHexString+0x7e>
        uint8_t Byte = *ByteBuffer;
     a9a:	c0 81       	ld	r28, Z

        HexOut[0] = NIBBLE_TO_HEXCHAR( (Byte >> 4) & 0x0F );
     a9c:	dc 2f       	mov	r29, r28
     a9e:	d2 95       	swap	r29
     aa0:	df 70       	andi	r29, 0x0F	; 15
     aa2:	4d 2f       	mov	r20, r29
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	4a 30       	cpi	r20, 0x0A	; 10
     aa8:	51 05       	cpc	r21, r1
     aaa:	04 f3       	brlt	.-64     	; 0xa6c <BufferToHexString+0x26>
     aac:	d9 5c       	subi	r29, 0xC9	; 201
     aae:	dc 93       	st	X, r29
        HexOut[1] = NIBBLE_TO_HEXCHAR( (Byte >> 0) & 0x0F );
     ab0:	cf 70       	andi	r28, 0x0F	; 15
     ab2:	4c 2f       	mov	r20, r28
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	4a 30       	cpi	r20, 0x0A	; 10
     ab8:	51 05       	cpc	r21, r1
     aba:	04 f3       	brlt	.-64     	; 0xa7c <BufferToHexString+0x36>
     abc:	c9 5c       	subi	r28, 0xC9	; 201
     abe:	df cf       	rjmp	.-66     	; 0xa7e <BufferToHexString+0x38>
#include "Common.h"

uint16_t BufferToHexString(char* HexOut, uint16_t MaxChars, const void* Buffer, uint16_t ByteCount)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t CharCount = 0;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
        CharCount += 2;
        ByteBuffer++;
        ByteCount -= 1;
    }

    *HexOut = '\0';
     ac4:	1c 92       	st	X, r1

    return CharCount;
}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	08 95       	ret

00000acc <HexStringToBuffer>:

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
     acc:	dc 01       	movw	r26, r24
     ace:	fa 01       	movw	r30, r20
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     ad0:	80 81       	ld	r24, Z
     ad2:	88 23       	and	r24, r24
     ad4:	09 f4       	brne	.+2      	; 0xad8 <HexStringToBuffer+0xc>
     ad6:	41 c0       	rjmp	.+130    	; 0xb5a <HexStringToBuffer+0x8e>
     ad8:	91 81       	ldd	r25, Z+1	; 0x01
     ada:	99 23       	and	r25, r25
     adc:	d9 f1       	breq	.+118    	; 0xb54 <HexStringToBuffer+0x88>
}

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     ae2:	61 15       	cp	r22, r1
     ae4:	71 05       	cpc	r23, r1
     ae6:	a1 f4       	brne	.+40     	; 0xb10 <HexStringToBuffer+0x44>
     ae8:	33 c0       	rjmp	.+102    	; 0xb50 <HexStringToBuffer+0x84>
        if (VALID_HEXCHAR(HexIn[0]) && VALID_HEXCHAR(HexIn[1])) {
            uint8_t Byte = 0;

            Byte |= HEXCHAR_TO_NIBBLE(HexIn[0]) << 4;
     aea:	82 95       	swap	r24
     aec:	80 7f       	andi	r24, 0xF0	; 240
            Byte |= HEXCHAR_TO_NIBBLE(HexIn[1]) << 0;
     aee:	91 34       	cpi	r25, 0x41	; 65
     af0:	30 f5       	brcc	.+76     	; 0xb3e <HexStringToBuffer+0x72>
     af2:	94 2f       	mov	r25, r20
     af4:	89 2b       	or	r24, r25

            *ByteBuffer = Byte;
     af6:	8d 93       	st	X+, r24

            ByteBuffer++;
            MaxBytes--;
            ByteCount++;
     af8:	2f 5f       	subi	r18, 0xFF	; 255
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
            HexIn += 2;
     afc:	32 96       	adiw	r30, 0x02	; 2
uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     afe:	80 81       	ld	r24, Z
     b00:	88 23       	and	r24, r24
     b02:	31 f1       	breq	.+76     	; 0xb50 <HexStringToBuffer+0x84>
     b04:	91 81       	ldd	r25, Z+1	; 0x01
     b06:	99 23       	and	r25, r25
     b08:	29 f1       	breq	.+74     	; 0xb54 <HexStringToBuffer+0x88>
     b0a:	62 17       	cp	r22, r18
     b0c:	73 07       	cpc	r23, r19
     b0e:	01 f1       	breq	.+64     	; 0xb50 <HexStringToBuffer+0x84>
        if (VALID_HEXCHAR(HexIn[0]) && VALID_HEXCHAR(HexIn[1])) {
     b10:	40 ed       	ldi	r20, 0xD0	; 208
     b12:	48 0f       	add	r20, r24
     b14:	4a 30       	cpi	r20, 0x0A	; 10
     b16:	20 f0       	brcs	.+8      	; 0xb20 <HexStringToBuffer+0x54>
     b18:	4f eb       	ldi	r20, 0xBF	; 191
     b1a:	48 0f       	add	r20, r24
     b1c:	46 30       	cpi	r20, 0x06	; 6
     b1e:	d0 f4       	brcc	.+52     	; 0xb54 <HexStringToBuffer+0x88>
     b20:	40 ed       	ldi	r20, 0xD0	; 208
     b22:	49 0f       	add	r20, r25
     b24:	4a 30       	cpi	r20, 0x0A	; 10
     b26:	20 f0       	brcs	.+8      	; 0xb30 <HexStringToBuffer+0x64>
     b28:	5f eb       	ldi	r21, 0xBF	; 191
     b2a:	59 0f       	add	r21, r25
     b2c:	56 30       	cpi	r21, 0x06	; 6
     b2e:	90 f4       	brcc	.+36     	; 0xb54 <HexStringToBuffer+0x88>
            uint8_t Byte = 0;

            Byte |= HEXCHAR_TO_NIBBLE(HexIn[0]) << 4;
     b30:	81 34       	cpi	r24, 0x41	; 65
     b32:	d8 f2       	brcs	.-74     	; 0xaea <HexStringToBuffer+0x1e>
     b34:	82 95       	swap	r24
     b36:	80 7f       	andi	r24, 0xF0	; 240
     b38:	80 57       	subi	r24, 0x70	; 112
            Byte |= HEXCHAR_TO_NIBBLE(HexIn[1]) << 0;
     b3a:	91 34       	cpi	r25, 0x41	; 65
     b3c:	d0 f2       	brcs	.-76     	; 0xaf2 <HexStringToBuffer+0x26>
     b3e:	97 53       	subi	r25, 0x37	; 55
     b40:	89 2b       	or	r24, r25

            *ByteBuffer = Byte;
     b42:	8d 93       	st	X+, r24

            ByteBuffer++;
            MaxBytes--;
            ByteCount++;
     b44:	2f 5f       	subi	r18, 0xFF	; 255
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
            HexIn += 2;
     b48:	32 96       	adiw	r30, 0x02	; 2
uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;

    while( (HexIn[0] != '\0') && (HexIn[1] != '\0') && (MaxBytes > 0) ) {
     b4a:	80 81       	ld	r24, Z
     b4c:	81 11       	cpse	r24, r1
     b4e:	da cf       	rjmp	.-76     	; 0xb04 <HexStringToBuffer+0x38>
    if ( (HexIn[0] != '\0') && (HexIn[1] == '\0') ) {
        /* Odd number of characters */
        return 0;
    }

    return ByteCount;
     b50:	c9 01       	movw	r24, r18
     b52:	08 95       	ret
        }
    }

    if ( (HexIn[0] != '\0') && (HexIn[1] == '\0') ) {
        /* Odd number of characters */
        return 0;
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
    }

    return ByteCount;
}
     b58:	08 95       	ret
}

uint16_t HexStringToBuffer(void* Buffer, uint16_t MaxBytes, const char* HexIn)
{
    uint8_t* ByteBuffer = (uint8_t*) Buffer;
    uint16_t ByteCount = 0;
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	f8 cf       	rjmp	.-16     	; 0xb50 <HexStringToBuffer+0x84>

00000b60 <MemoryInit>:
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

void MemoryInit(void)
{
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	00 d0       	rcall	.+0      	; 0xb66 <MemoryInit+0x6>
     b66:	00 d0       	rcall	.+0      	; 0xb68 <MemoryInit+0x8>
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
	/* Configure MEMORY_FLASH_USART for SPI master mode 0 with maximum clock frequency */
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     b6c:	80 e1       	ldi	r24, 0x10	; 16
     b6e:	80 93 65 06 	sts	0x0665, r24
	MEMORY_FLASH_PORT.DIRSET = MEMORY_FLASH_SCK | MEMORY_FLASH_MOSI | MEMORY_FLASH_CS;
     b72:	9a e1       	ldi	r25, 0x1A	; 26
     b74:	90 93 61 06 	sts	0x0661, r25

    MEMORY_FLASH_USART.BAUDCTRLA = 0;
     b78:	10 92 a6 09 	sts	0x09A6, r1
    MEMORY_FLASH_USART.BAUDCTRLB = 0;
     b7c:	10 92 a7 09 	sts	0x09A7, r1
	MEMORY_FLASH_USART.CTRLC = USART_CMODE_MSPI_gc | USART_CHSIZE_8BIT_gc;
     b80:	93 ec       	ldi	r25, 0xC3	; 195
     b82:	90 93 a5 09 	sts	0x09A5, r25
	MEMORY_FLASH_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     b86:	98 e1       	ldi	r25, 0x18	; 24
     b88:	90 93 a4 09 	sts	0x09A4, r25

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     b8c:	80 93 66 06 	sts	0x0666, r24
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     b90:	87 ed       	ldi	r24, 0xD7	; 215
     b92:	80 93 a0 09 	sts	0x09A0, r24

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     b96:	80 91 a1 09 	lds	r24, 0x09A1
     b9a:	86 ff       	sbrs	r24, 6
     b9c:	fc cf       	rjmp	.-8      	; 0xb96 <MemoryInit+0x36>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     b9e:	80 e4       	ldi	r24, 0x40	; 64
     ba0:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     ba4:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ba8:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     bac:	80 91 a1 09 	lds	r24, 0x09A1
     bb0:	86 ff       	sbrs	r24, 6
     bb2:	fc cf       	rjmp	.-8      	; 0xbac <MemoryInit+0x4c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     bb4:	80 e4       	ldi	r24, 0x40	; 64
     bb6:	80 93 a1 09 	sts	0x09A1, r24

	return MEMORY_FLASH_USART.DATA;
     bba:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     bbe:	90 e1       	ldi	r25, 0x10	; 16
     bc0:	90 93 65 06 	sts	0x0665, r25
    MEMORY_FLASH_USART.BAUDCTRLB = 0;
	MEMORY_FLASH_USART.CTRLC = USART_CMODE_MSPI_gc | USART_CHSIZE_8BIT_gc;
	MEMORY_FLASH_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;


	if ( !(FlashReadStatusRegister() & FLASH_STATUS_REG_PAGESIZE_BIT) ) {
     bc4:	80 fd       	sbrc	r24, 0
     bc6:	3e c0       	rjmp	.+124    	; 0xc44 <MemoryInit+0xe4>
	return !(FlashReadStatusRegister() & FLASH_STATUS_REG_READY_BIT);
}

INLINE void FlashConfigurePageSize(void)
{
	uint8_t Sequence[] = {0x3D, 0x2A, 0x80, 0xA6};
     bc8:	8d e3       	ldi	r24, 0x3D	; 61
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	8a e2       	ldi	r24, 0x2A	; 42
     bce:	8a 83       	std	Y+2, r24	; 0x02
     bd0:	80 e8       	ldi	r24, 0x80	; 128
     bd2:	8b 83       	std	Y+3, r24	; 0x03
     bd4:	86 ea       	ldi	r24, 0xA6	; 166
     bd6:	8c 83       	std	Y+4, r24	; 0x04

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     bd8:	20 e1       	ldi	r18, 0x10	; 16
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     bda:	37 ed       	ldi	r19, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     bdc:	90 e4       	ldi	r25, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     bde:	20 93 66 06 	sts	0x0666, r18
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     be2:	30 93 a0 09 	sts	0x09A0, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     be6:	80 91 a1 09 	lds	r24, 0x09A1
     bea:	86 ff       	sbrs	r24, 6
     bec:	fc cf       	rjmp	.-8      	; 0xbe6 <MemoryInit+0x86>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     bee:	90 93 a1 09 	sts	0x09A1, r25

	return MEMORY_FLASH_USART.DATA;
     bf2:	80 91 a0 09 	lds	r24, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     bf6:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     bfa:	80 91 a1 09 	lds	r24, 0x09A1
     bfe:	86 ff       	sbrs	r24, 6
     c00:	fc cf       	rjmp	.-8      	; 0xbfa <MemoryInit+0x9a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c02:	90 93 a1 09 	sts	0x09A1, r25

	return MEMORY_FLASH_USART.DATA;
     c06:	80 91 a0 09 	lds	r24, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     c0a:	20 93 65 06 	sts	0x0665, r18

INLINE void FlashConfigurePageSize(void)
{
	uint8_t Sequence[] = {0x3D, 0x2A, 0x80, 0xA6};

	while(FlashIsBusy());
     c0e:	87 ff       	sbrs	r24, 7
     c10:	e6 cf       	rjmp	.-52     	; 0xbde <MemoryInit+0x7e>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     c12:	80 e1       	ldi	r24, 0x10	; 16
     c14:	80 93 66 06 	sts	0x0666, r24
     c18:	fe 01       	movw	r30, r28
     c1a:	31 96       	adiw	r30, 0x01	; 1
     c1c:	ce 01       	movw	r24, r28
     c1e:	05 96       	adiw	r24, 0x05	; 5
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c20:	30 e4       	ldi	r19, 0x40	; 64
INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
     c22:	21 91       	ld	r18, Z+
     c24:	20 93 a0 09 	sts	0x09A0, r18
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c28:	20 91 a1 09 	lds	r18, 0x09A1
     c2c:	26 ff       	sbrs	r18, 6
     c2e:	fc cf       	rjmp	.-8      	; 0xc28 <MemoryInit+0xc8>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c30:	30 93 a1 09 	sts	0x09A1, r19
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
     c34:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     c38:	e8 17       	cp	r30, r24
     c3a:	f9 07       	cpc	r31, r25
     c3c:	91 f7       	brne	.-28     	; 0xc22 <MemoryInit+0xc2>

	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPIWriteBlock(Sequence, sizeof(Sequence));
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     c3e:	80 e1       	ldi	r24, 0x10	; 16
     c40:	80 93 65 06 	sts	0x0665, r24

	if ( !(FlashReadStatusRegister() & FLASH_STATUS_REG_PAGESIZE_BIT) ) {
		/* Configure for 256 byte Dataflash if not already done. */
		FlashConfigurePageSize();
	}
}
     c44:	24 96       	adiw	r28, 0x04	; 4
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <MemoryReadBlock>:

void MemoryReadBlock(void* Buffer, uint16_t Address, uint16_t ByteCount)
{
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
	uint32_t FlashAddress = (uint32_t) Address + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
     c5c:	00 91 fd 20 	lds	r16, 0x20FD
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	98 01       	movw	r18, r16
     c68:	11 27       	eor	r17, r17
     c6a:	00 27       	eor	r16, r16
     c6c:	06 0f       	add	r16, r22
     c6e:	17 1f       	adc	r17, r23
     c70:	21 1d       	adc	r18, r1
     c72:	31 1d       	adc	r19, r1

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     c74:	e0 e1       	ldi	r30, 0x10	; 16
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c76:	f7 ed       	ldi	r31, 0xD7	; 215

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c78:	70 e4       	ldi	r23, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     c7a:	e0 93 66 06 	sts	0x0666, r30
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c7e:	f0 93 a0 09 	sts	0x09A0, r31

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c82:	60 91 a1 09 	lds	r22, 0x09A1
     c86:	66 ff       	sbrs	r22, 6
     c88:	fc cf       	rjmp	.-8      	; 0xc82 <MemoryReadBlock+0x32>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c8a:	70 93 a1 09 	sts	0x09A1, r23

	return MEMORY_FLASH_USART.DATA;
     c8e:	60 91 a0 09 	lds	r22, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     c92:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     c96:	60 91 a1 09 	lds	r22, 0x09A1
     c9a:	66 ff       	sbrs	r22, 6
     c9c:	fc cf       	rjmp	.-8      	; 0xc96 <MemoryReadBlock+0x46>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     c9e:	70 93 a1 09 	sts	0x09A1, r23

	return MEMORY_FLASH_USART.DATA;
     ca2:	60 91 a0 09 	lds	r22, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     ca6:	e0 93 65 06 	sts	0x0665, r30
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashRead(void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
     caa:	67 ff       	sbrs	r22, 7
     cac:	e6 cf       	rjmp	.-52     	; 0xc7a <MemoryReadBlock+0x2a>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     cae:	60 e1       	ldi	r22, 0x10	; 16
     cb0:	60 93 66 06 	sts	0x0666, r22
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     cb4:	63 e0       	ldi	r22, 0x03	; 3
     cb6:	60 93 a0 09 	sts	0x09A0, r22

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     cba:	60 91 a1 09 	lds	r22, 0x09A1
     cbe:	66 ff       	sbrs	r22, 6
     cc0:	fc cf       	rjmp	.-8      	; 0xcba <MemoryReadBlock+0x6a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     cc2:	60 e4       	ldi	r22, 0x40	; 64
     cc4:	60 93 a1 09 	sts	0x09A1, r22

	return MEMORY_FLASH_USART.DATA;
     cc8:	60 91 a0 09 	lds	r22, 0x09A0
{
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
     ccc:	69 01       	movw	r12, r18
     cce:	ee 24       	eor	r14, r14
     cd0:	ff 24       	eor	r15, r15
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     cd2:	c0 92 a0 09 	sts	0x09A0, r12

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     cd6:	60 91 a1 09 	lds	r22, 0x09A1
     cda:	66 ff       	sbrs	r22, 6
     cdc:	fc cf       	rjmp	.-8      	; 0xcd6 <MemoryReadBlock+0x86>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     cde:	60 e4       	ldi	r22, 0x40	; 64
     ce0:	60 93 a1 09 	sts	0x09A1, r22

	return MEMORY_FLASH_USART.DATA;
     ce4:	60 91 a0 09 	lds	r22, 0x09A0
	while(FlashIsBusy());

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
	SPITransferByte( (Address >> 8) & 0xFF );
     ce8:	c1 2e       	mov	r12, r17
     cea:	d2 2e       	mov	r13, r18
     cec:	e3 2e       	mov	r14, r19
     cee:	ff 24       	eor	r15, r15
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     cf0:	c0 92 a0 09 	sts	0x09A0, r12

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     cf4:	60 91 a1 09 	lds	r22, 0x09A1
     cf8:	66 ff       	sbrs	r22, 6
     cfa:	fc cf       	rjmp	.-8      	; 0xcf4 <MemoryReadBlock+0xa4>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     cfc:	60 e4       	ldi	r22, 0x40	; 64
     cfe:	60 93 a1 09 	sts	0x09A1, r22

	return MEMORY_FLASH_USART.DATA;
     d02:	60 91 a0 09 	lds	r22, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     d06:	00 93 a0 09 	sts	0x09A0, r16

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d0a:	20 91 a1 09 	lds	r18, 0x09A1
     d0e:	26 ff       	sbrs	r18, 6
     d10:	fc cf       	rjmp	.-8      	; 0xd0a <MemoryReadBlock+0xba>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d12:	20 e4       	ldi	r18, 0x40	; 64
     d14:	20 93 a1 09 	sts	0x09A1, r18

	return MEMORY_FLASH_USART.DATA;
     d18:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     d1c:	41 15       	cp	r20, r1
     d1e:	51 05       	cpc	r21, r1
     d20:	91 f0       	breq	.+36     	; 0xd46 <MemoryReadBlock+0xf6>
     d22:	fc 01       	movw	r30, r24
     d24:	48 0f       	add	r20, r24
     d26:	59 1f       	adc	r21, r25
		MEMORY_FLASH_USART.DATA = 0;
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d28:	90 e4       	ldi	r25, 0x40	; 64
INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
		MEMORY_FLASH_USART.DATA = 0;
     d2a:	10 92 a0 09 	sts	0x09A0, r1
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     d2e:	80 91 a1 09 	lds	r24, 0x09A1
     d32:	86 ff       	sbrs	r24, 6
     d34:	fc cf       	rjmp	.-8      	; 0xd2e <MemoryReadBlock+0xde>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     d36:	90 93 a1 09 	sts	0x09A1, r25
		*ByteBuffer++ = MEMORY_FLASH_USART.DATA;
     d3a:	80 91 a0 09 	lds	r24, 0x09A0
     d3e:	81 93       	st	Z+, r24

INLINE void SPIReadBlock(void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     d40:	e4 17       	cp	r30, r20
     d42:	f5 07       	cpc	r31, r21
     d44:	91 f7       	brne	.-28     	; 0xd2a <MemoryReadBlock+0xda>
	SPITransferByte(0x03);
	SPITransferByte( (Address >> 16) & 0xFF );
	SPITransferByte( (Address >> 8) & 0xFF );
	SPITransferByte( (Address >> 0) & 0xFF );
	SPIReadBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     d46:	80 e1       	ldi	r24, 0x10	; 16
     d48:	80 93 65 06 	sts	0x0665, r24

void MemoryReadBlock(void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint32_t FlashAddress = (uint32_t) Address + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
	FlashRead(Buffer, FlashAddress, ByteCount);
}
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	08 95       	ret

00000d5a <MemoryWriteBlock>:

void MemoryWriteBlock(const void* Buffer, uint16_t Address, uint16_t ByteCount)
{
     d5a:	3f 92       	push	r3
     d5c:	4f 92       	push	r4
     d5e:	5f 92       	push	r5
     d60:	6f 92       	push	r6
     d62:	7f 92       	push	r7
     d64:	8f 92       	push	r8
     d66:	9f 92       	push	r9
     d68:	af 92       	push	r10
     d6a:	bf 92       	push	r11
     d6c:	cf 92       	push	r12
     d6e:	df 92       	push	r13
     d70:	ef 92       	push	r14
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	ec 01       	movw	r28, r24
	uint32_t FlashAddress = (uint32_t) Address + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
     d7e:	80 91 fd 20 	lds	r24, 0x20FD
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	a0 e0       	ldi	r26, 0x00	; 0
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	dc 01       	movw	r26, r24
     d8a:	99 27       	eor	r25, r25
     d8c:	88 27       	eor	r24, r24
     d8e:	86 0f       	add	r24, r22
     d90:	97 1f       	adc	r25, r23
     d92:	a1 1d       	adc	r26, r1
     d94:	b1 1d       	adc	r27, r1
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
     d96:	41 15       	cp	r20, r1
     d98:	51 05       	cpc	r21, r1
     d9a:	09 f4       	brne	.+2      	; 0xd9e <MemoryWriteBlock+0x44>
     d9c:	0f c1       	rjmp	.+542    	; 0xfbc <MemoryWriteBlock+0x262>
		uint16_t PageAddress = Address / MEMORY_PAGE_SIZE;
		uint8_t ByteAddress = Address % MEMORY_PAGE_SIZE;
		uint16_t PageBytes = MIN(MEMORY_PAGE_SIZE - ByteAddress, ByteCount);
     d9e:	00 e0       	ldi	r16, 0x00	; 0
     da0:	11 e0       	ldi	r17, 0x01	; 1

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     da2:	20 e1       	ldi	r18, 0x10	; 16
     da4:	a2 2e       	mov	r10, r18
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     da6:	37 ed       	ldi	r19, 0xD7	; 215
     da8:	93 2e       	mov	r9, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     daa:	60 e4       	ldi	r22, 0x40	; 64
     dac:	b6 2e       	mov	r11, r22

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     dae:	70 e1       	ldi	r23, 0x10	; 16
     db0:	87 2e       	mov	r8, r23
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     db2:	e7 ed       	ldi	r30, 0xD7	; 215
     db4:	7e 2e       	mov	r7, r30
     db6:	f3 e5       	ldi	r31, 0x53	; 83
     db8:	4f 2e       	mov	r4, r31
     dba:	24 e8       	ldi	r18, 0x84	; 132
     dbc:	52 2e       	mov	r5, r18
     dbe:	33 e8       	ldi	r19, 0x83	; 131
     dc0:	63 2e       	mov	r6, r19
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
		uint16_t PageAddress = Address / MEMORY_PAGE_SIZE;
     dc2:	c9 2e       	mov	r12, r25
     dc4:	da 2e       	mov	r13, r26
     dc6:	eb 2e       	mov	r14, r27
     dc8:	ff 24       	eor	r15, r15
		uint8_t ByteAddress = Address % MEMORY_PAGE_SIZE;
     dca:	38 2f       	mov	r19, r24
		uint16_t PageBytes = MIN(MEMORY_PAGE_SIZE - ByteAddress, ByteCount);
     dcc:	b8 01       	movw	r22, r16
     dce:	68 1b       	sub	r22, r24
     dd0:	71 09       	sbc	r23, r1
     dd2:	46 17       	cp	r20, r22
     dd4:	57 07       	cpc	r21, r23
     dd6:	08 f4       	brcc	.+2      	; 0xdda <MemoryWriteBlock+0x80>
     dd8:	ba 01       	movw	r22, r20

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     dda:	80 92 66 06 	sts	0x0666, r8
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     dde:	70 92 a0 09 	sts	0x09A0, r7

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     de2:	20 91 a1 09 	lds	r18, 0x09A1
     de6:	26 ff       	sbrs	r18, 6
     de8:	fc cf       	rjmp	.-8      	; 0xde2 <MemoryWriteBlock+0x88>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     dea:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     dee:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     df2:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     df6:	20 91 a1 09 	lds	r18, 0x09A1
     dfa:	26 ff       	sbrs	r18, 6
     dfc:	fc cf       	rjmp	.-8      	; 0xdf6 <MemoryWriteBlock+0x9c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     dfe:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     e02:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     e06:	a0 92 65 06 	sts	0x0665, r10
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashMemoryToBuffer(uint16_t PageAddress)
{
	while(FlashIsBusy());
     e0a:	27 ff       	sbrs	r18, 7
     e0c:	e6 cf       	rjmp	.-52     	; 0xdda <MemoryWriteBlock+0x80>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e0e:	80 92 66 06 	sts	0x0666, r8
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e12:	40 92 a0 09 	sts	0x09A0, r4

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e16:	20 91 a1 09 	lds	r18, 0x09A1
     e1a:	26 ff       	sbrs	r18, 6
     e1c:	fc cf       	rjmp	.-8      	; 0xe16 <MemoryWriteBlock+0xbc>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e1e:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     e22:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e26:	d0 92 a0 09 	sts	0x09A0, r13

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e2a:	20 91 a1 09 	lds	r18, 0x09A1
     e2e:	26 ff       	sbrs	r18, 6
     e30:	fc cf       	rjmp	.-8      	; 0xe2a <MemoryWriteBlock+0xd0>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e32:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     e36:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e3a:	c0 92 a0 09 	sts	0x09A0, r12

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e3e:	20 91 a1 09 	lds	r18, 0x09A1
     e42:	26 ff       	sbrs	r18, 6
     e44:	fc cf       	rjmp	.-8      	; 0xe3e <MemoryWriteBlock+0xe4>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e46:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     e4a:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e4e:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e52:	20 91 a1 09 	lds	r18, 0x09A1
     e56:	26 ff       	sbrs	r18, 6
     e58:	fc cf       	rjmp	.-8      	; 0xe52 <MemoryWriteBlock+0xf8>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e5a:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     e5e:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_MEM_TO_BUF1);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     e62:	a0 92 65 06 	sts	0x0665, r10

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e66:	a0 92 66 06 	sts	0x0666, r10
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e6a:	90 92 a0 09 	sts	0x09A0, r9

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e6e:	20 91 a1 09 	lds	r18, 0x09A1
     e72:	26 ff       	sbrs	r18, 6
     e74:	fc cf       	rjmp	.-8      	; 0xe6e <MemoryWriteBlock+0x114>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e76:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     e7a:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e7e:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     e82:	20 91 a1 09 	lds	r18, 0x09A1
     e86:	26 ff       	sbrs	r18, 6
     e88:	fc cf       	rjmp	.-8      	; 0xe82 <MemoryWriteBlock+0x128>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     e8a:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     e8e:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     e92:	a0 92 65 06 	sts	0x0665, r10
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWriteBuffer(const void* Buffer, uint8_t Address, uint16_t ByteCount)
{
	while(FlashIsBusy());
     e96:	27 ff       	sbrs	r18, 7
     e98:	e6 cf       	rjmp	.-52     	; 0xe66 <MemoryWriteBlock+0x10c>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     e9a:	80 92 66 06 	sts	0x0666, r8
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     e9e:	50 92 a0 09 	sts	0x09A0, r5

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ea2:	20 91 a1 09 	lds	r18, 0x09A1
     ea6:	26 ff       	sbrs	r18, 6
     ea8:	fc cf       	rjmp	.-8      	; 0xea2 <MemoryWriteBlock+0x148>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     eaa:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     eae:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     eb2:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     eb6:	20 91 a1 09 	lds	r18, 0x09A1
     eba:	26 ff       	sbrs	r18, 6
     ebc:	fc cf       	rjmp	.-8      	; 0xeb6 <MemoryWriteBlock+0x15c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ebe:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     ec2:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ec6:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     eca:	20 91 a1 09 	lds	r18, 0x09A1
     ece:	26 ff       	sbrs	r18, 6
     ed0:	fc cf       	rjmp	.-8      	; 0xeca <MemoryWriteBlock+0x170>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ed2:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     ed6:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     eda:	30 93 a0 09 	sts	0x09A0, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     ede:	20 91 a1 09 	lds	r18, 0x09A1
     ee2:	26 ff       	sbrs	r18, 6
     ee4:	fc cf       	rjmp	.-8      	; 0xede <MemoryWriteBlock+0x184>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ee6:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     eea:	20 91 a0 09 	lds	r18, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     eee:	61 15       	cp	r22, r1
     ef0:	71 05       	cpc	r23, r1
     ef2:	91 f0       	breq	.+36     	; 0xf18 <MemoryWriteBlock+0x1be>
     ef4:	fe 01       	movw	r30, r28
     ef6:	9b 01       	movw	r18, r22
     ef8:	2c 0f       	add	r18, r28
     efa:	3d 1f       	adc	r19, r29
		MEMORY_FLASH_USART.DATA = *ByteBuffer++;
     efc:	31 90       	ld	r3, Z+
     efe:	30 92 a0 09 	sts	0x09A0, r3
		while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f02:	30 90 a1 09 	lds	r3, 0x09A1
     f06:	36 fe       	sbrs	r3, 6
     f08:	fc cf       	rjmp	.-8      	; 0xf02 <MemoryWriteBlock+0x1a8>
		MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f0a:	b0 92 a1 09 	sts	0x09A1, r11
		MEMORY_FLASH_USART.DATA; /* Flush Buffer */
     f0e:	30 90 a0 09 	lds	r3, 0x09A0

INLINE void SPIWriteBlock(const void* Buffer, uint16_t ByteCount)
{
	uint8_t* ByteBuffer = (uint8_t*) Buffer;

	while(ByteCount-- > 0) {
     f12:	e2 17       	cp	r30, r18
     f14:	f3 07       	cpc	r31, r19
     f16:	91 f7       	brne	.-28     	; 0xefc <MemoryWriteBlock+0x1a2>
	SPITransferByte(FLASH_CMD_BUF1_WRITE);
	SPITransferByte( 0 );
	SPITransferByte( 0 );
	SPITransferByte( Address );
	SPIWriteBlock(Buffer, ByteCount);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f18:	a0 92 65 06 	sts	0x0665, r10

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     f1c:	a0 92 66 06 	sts	0x0666, r10
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f20:	90 92 a0 09 	sts	0x09A0, r9

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f24:	20 91 a1 09 	lds	r18, 0x09A1
     f28:	26 ff       	sbrs	r18, 6
     f2a:	fc cf       	rjmp	.-8      	; 0xf24 <MemoryWriteBlock+0x1ca>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f2c:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     f30:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f34:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f38:	20 91 a1 09 	lds	r18, 0x09A1
     f3c:	26 ff       	sbrs	r18, 6
     f3e:	fc cf       	rjmp	.-8      	; 0xf38 <MemoryWriteBlock+0x1de>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f40:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     f44:	20 91 a0 09 	lds	r18, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     f48:	a0 92 65 06 	sts	0x0665, r10
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashBufferToMemory(uint16_t PageAddress)
{
	while(FlashIsBusy());
     f4c:	27 ff       	sbrs	r18, 7
     f4e:	e6 cf       	rjmp	.-52     	; 0xf1c <MemoryWriteBlock+0x1c2>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     f50:	80 92 66 06 	sts	0x0666, r8
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f54:	60 92 a0 09 	sts	0x09A0, r6

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f58:	20 91 a1 09 	lds	r18, 0x09A1
     f5c:	26 ff       	sbrs	r18, 6
     f5e:	fc cf       	rjmp	.-8      	; 0xf58 <MemoryWriteBlock+0x1fe>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f60:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     f64:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f68:	d0 92 a0 09 	sts	0x09A0, r13

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f6c:	20 91 a1 09 	lds	r18, 0x09A1
     f70:	26 ff       	sbrs	r18, 6
     f72:	fc cf       	rjmp	.-8      	; 0xf6c <MemoryWriteBlock+0x212>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f74:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     f78:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f7c:	c0 92 a0 09 	sts	0x09A0, r12

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f80:	20 91 a1 09 	lds	r18, 0x09A1
     f84:	26 ff       	sbrs	r18, 6
     f86:	fc cf       	rjmp	.-8      	; 0xf80 <MemoryWriteBlock+0x226>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f88:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     f8c:	20 91 a0 09 	lds	r18, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     f90:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
     f94:	20 91 a1 09 	lds	r18, 0x09A1
     f98:	26 ff       	sbrs	r18, 6
     f9a:	fc cf       	rjmp	.-8      	; 0xf94 <MemoryWriteBlock+0x23a>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     f9c:	b0 92 a1 09 	sts	0x09A1, r11

	return MEMORY_FLASH_USART.DATA;
     fa0:	20 91 a0 09 	lds	r18, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_BUF1_TO_MEM_ERASE);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
     fa4:	a0 92 65 06 	sts	0x0665, r10

		FlashMemoryToBuffer(PageAddress);
		FlashWriteBuffer(Buffer, ByteAddress, PageBytes);
		FlashBufferToMemory(PageAddress);

		ByteCount -= PageBytes;
     fa8:	46 1b       	sub	r20, r22
     faa:	57 0b       	sbc	r21, r23
		Address += PageBytes;
     fac:	86 0f       	add	r24, r22
     fae:	97 1f       	adc	r25, r23
     fb0:	a1 1d       	adc	r26, r1
     fb2:	b1 1d       	adc	r27, r1
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
}

INLINE void FlashWrite(const void* Buffer, uint32_t Address, uint16_t ByteCount)
{
	while(ByteCount > 0) {
     fb4:	41 15       	cp	r20, r1
     fb6:	51 05       	cpc	r21, r1
     fb8:	09 f0       	breq	.+2      	; 0xfbc <MemoryWriteBlock+0x262>
     fba:	03 cf       	rjmp	.-506    	; 0xdc2 <MemoryWriteBlock+0x68>

void MemoryWriteBlock(const void* Buffer, uint16_t Address, uint16_t ByteCount)
{
	uint32_t FlashAddress = (uint32_t) Address + (uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING;
	FlashWrite(Buffer, FlashAddress, ByteCount);
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	bf 90       	pop	r11
     fce:	af 90       	pop	r10
     fd0:	9f 90       	pop	r9
     fd2:	8f 90       	pop	r8
     fd4:	7f 90       	pop	r7
     fd6:	6f 90       	pop	r6
     fd8:	5f 90       	pop	r5
     fda:	4f 90       	pop	r4
     fdc:	3f 90       	pop	r3
     fde:	08 95       	ret

00000fe0 <MemoryClear>:

void MemoryClear(void)
{
	uint32_t PageAddress = ((uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING) / MEMORY_PAGE_SIZE;
     fe0:	80 91 fd 20 	lds	r24, 0x20FD
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a0 e0       	ldi	r26, 0x00	; 0
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	ba 2f       	mov	r27, r26
     fec:	a9 2f       	mov	r26, r25
     fee:	98 2f       	mov	r25, r24
     ff0:	88 27       	eor	r24, r24
     ff2:	9c 01       	movw	r18, r24
     ff4:	93 95       	inc	r25

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     ff6:	70 e1       	ldi	r23, 0x10	; 16
{
	MEMORY_FLASH_USART.DATA = Data;

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
     ff8:	50 e4       	ldi	r21, 0x40	; 64

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
     ffa:	60 e1       	ldi	r22, 0x10	; 16
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
     ffc:	e7 ed       	ldi	r30, 0xD7	; 215
     ffe:	f1 e8       	ldi	r31, 0x81	; 129

INLINE uint8_t FlashReadStatusRegister(void)
{
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1000:	60 93 66 06 	sts	0x0666, r22
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1004:	e0 93 a0 09 	sts	0x09A0, r30

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1008:	40 91 a1 09 	lds	r20, 0x09A1
    100c:	46 ff       	sbrs	r20, 6
    100e:	fc cf       	rjmp	.-8      	; 0x1008 <MemoryClear+0x28>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1010:	50 93 a1 09 	sts	0x09A1, r21

	return MEMORY_FLASH_USART.DATA;
    1014:	40 91 a0 09 	lds	r20, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1018:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    101c:	40 91 a1 09 	lds	r20, 0x09A1
    1020:	46 ff       	sbrs	r20, 6
    1022:	fc cf       	rjmp	.-8      	; 0x101c <MemoryClear+0x3c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1024:	50 93 a1 09 	sts	0x09A1, r21

	return MEMORY_FLASH_USART.DATA;
    1028:	40 91 a0 09 	lds	r20, 0x09A0
	uint8_t Register;

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_STATUS_REG_READ);
	Register = SPITransferByte(0);
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    102c:	70 93 65 06 	sts	0x0665, r23
	}
}

INLINE void FlashClearPage(uint16_t PageAddress)
{
	while(FlashIsBusy());
    1030:	47 ff       	sbrs	r20, 7
    1032:	e6 cf       	rjmp	.-52     	; 0x1000 <MemoryClear+0x20>

	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
    1034:	60 93 66 06 	sts	0x0666, r22
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1038:	f0 93 a0 09 	sts	0x09A0, r31

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    103c:	40 91 a1 09 	lds	r20, 0x09A1
    1040:	46 ff       	sbrs	r20, 6
    1042:	fc cf       	rjmp	.-8      	; 0x103c <MemoryClear+0x5c>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1044:	50 93 a1 09 	sts	0x09A1, r21

	return MEMORY_FLASH_USART.DATA;
    1048:	40 91 a0 09 	lds	r20, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    104c:	30 93 a0 09 	sts	0x09A0, r19

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1050:	40 91 a1 09 	lds	r20, 0x09A1
    1054:	46 ff       	sbrs	r20, 6
    1056:	fc cf       	rjmp	.-8      	; 0x1050 <MemoryClear+0x70>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1058:	50 93 a1 09 	sts	0x09A1, r21

	return MEMORY_FLASH_USART.DATA;
    105c:	40 91 a0 09 	lds	r20, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1060:	20 93 a0 09 	sts	0x09A0, r18

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1064:	40 91 a1 09 	lds	r20, 0x09A1
    1068:	46 ff       	sbrs	r20, 6
    106a:	fc cf       	rjmp	.-8      	; 0x1064 <MemoryClear+0x84>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    106c:	50 93 a1 09 	sts	0x09A1, r21

	return MEMORY_FLASH_USART.DATA;
    1070:	40 91 a0 09 	lds	r20, 0x09A0
#define FLASH_STATUS_REG_PROTECT_BIT	(1<<1)
#define FLASH_STATUS_REG_PAGESIZE_BIT	(1<<0)

INLINE uint8_t SPITransferByte(uint8_t Data)
{
	MEMORY_FLASH_USART.DATA = Data;
    1074:	10 92 a0 09 	sts	0x09A0, r1

	while (!(MEMORY_FLASH_USART.STATUS & USART_TXCIF_bm));
    1078:	40 91 a1 09 	lds	r20, 0x09A1
    107c:	46 ff       	sbrs	r20, 6
    107e:	fc cf       	rjmp	.-8      	; 0x1078 <MemoryClear+0x98>

	MEMORY_FLASH_USART.STATUS = USART_TXCIF_bm;
    1080:	50 93 a1 09 	sts	0x09A1, r21

	return MEMORY_FLASH_USART.DATA;
    1084:	40 91 a0 09 	lds	r20, 0x09A0
	MEMORY_FLASH_PORT.OUTCLR = MEMORY_FLASH_CS;
	SPITransferByte(FLASH_CMD_PAGE_ERASE);
	SPITransferByte( (PageAddress >> 8) & 0xFF );
	SPITransferByte( (PageAddress >> 0) & 0xFF );
	SPITransferByte( 0 );
	MEMORY_FLASH_PORT.OUTSET = MEMORY_FLASH_CS;
    1088:	70 93 65 06 	sts	0x0665, r23
    108c:	2f 5f       	subi	r18, 0xFF	; 255
    108e:	3f 4f       	sbci	r19, 0xFF	; 255
void MemoryClear(void)
{
	uint32_t PageAddress = ((uint32_t) GlobalSettings.ActiveSetting * MEMORY_SIZE_PER_SETTING) / MEMORY_PAGE_SIZE;
	uint16_t PageCount = MEMORY_SIZE_PER_SETTING / MEMORY_PAGE_SIZE;

	while(PageCount > 0) {
    1090:	28 17       	cp	r18, r24
    1092:	39 07       	cpc	r19, r25
    1094:	09 f0       	breq	.+2      	; 0x1098 <MemoryClear+0xb8>
    1096:	b4 cf       	rjmp	.-152    	; 0x1000 <MemoryClear+0x20>
		FlashClearPage(PageAddress);
		PageCount--;
		PageAddress++;
	}
}
    1098:	08 95       	ret

0000109a <MemoryUploadBlock>:

bool MemoryUploadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	fc 01       	movw	r30, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	ba 01       	movw	r22, r20
    10ac:	69 01       	movw	r12, r18
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
    10ae:	61 15       	cp	r22, r1
    10b0:	71 05       	cpc	r23, r1
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	82 07       	cpc	r24, r18
    10b6:	91 05       	cpc	r25, r1
    10b8:	40 f0       	brcs	.+16     	; 0x10ca <MemoryUploadBlock+0x30>
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		ByteCount = MIN(ByteCount, BytesLeft);
		MemoryWriteBlock(Buffer, BlockAddress, ByteCount);
		return true;
    }
}
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	08 95       	ret
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
        /* Prevent writing out of bounds by silently ignoring it */
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    10ca:	00 e0       	ldi	r16, 0x00	; 0
    10cc:	10 e0       	ldi	r17, 0x00	; 0
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	30 e0       	ldi	r19, 0x00	; 0
		ByteCount = MIN(ByteCount, BytesLeft);
    10d2:	e1 2c       	mov	r14, r1
    10d4:	f1 2c       	mov	r15, r1
    10d6:	06 1b       	sub	r16, r22
    10d8:	17 0b       	sbc	r17, r23
    10da:	28 0b       	sbc	r18, r24
    10dc:	39 0b       	sbc	r19, r25
    10de:	c0 16       	cp	r12, r16
    10e0:	d1 06       	cpc	r13, r17
    10e2:	e2 06       	cpc	r14, r18
    10e4:	f3 06       	cpc	r15, r19
    10e6:	58 f0       	brcs	.+22     	; 0x10fe <MemoryUploadBlock+0x64>
		MemoryWriteBlock(Buffer, BlockAddress, ByteCount);
    10e8:	a8 01       	movw	r20, r16
    10ea:	cf 01       	movw	r24, r30
    10ec:	36 de       	rcall	.-916    	; 0xd5a <MemoryWriteBlock>
		return true;
    }
}
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	cf 90       	pop	r12
    10fc:	08 95       	ret
        /* Prevent writing out of bounds by silently ignoring it */
        return true;
    } else {
    	/* Calculate bytes left in memory and start writing */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		ByteCount = MIN(ByteCount, BytesLeft);
    10fe:	97 01       	movw	r18, r14
    1100:	86 01       	movw	r16, r12
		MemoryWriteBlock(Buffer, BlockAddress, ByteCount);
    1102:	a8 01       	movw	r20, r16
    1104:	cf 01       	movw	r24, r30
    1106:	29 de       	rcall	.-942    	; 0xd5a <MemoryWriteBlock>
    1108:	f2 cf       	rjmp	.-28     	; 0x10ee <MemoryUploadBlock+0x54>

0000110a <MemoryDownloadBlock>:
		return true;
    }
}

bool MemoryDownloadBlock(void* Buffer, uint32_t BlockAddress, uint16_t ByteCount)
{
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	fc 01       	movw	r30, r24
    1118:	cb 01       	movw	r24, r22
    111a:	ba 01       	movw	r22, r20
    111c:	69 01       	movw	r12, r18
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
    111e:	61 15       	cp	r22, r1
    1120:	71 05       	cpc	r23, r1
    1122:	21 e0       	ldi	r18, 0x01	; 1
    1124:	82 07       	cpc	r24, r18
    1126:	91 05       	cpc	r25, r1
    1128:	40 f0       	brcs	.+16     	; 0x113a <MemoryDownloadBlock+0x30>
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    112a:	80 e0       	ldi	r24, 0x00	; 0
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		ByteCount = MIN(ByteCount, BytesLeft);
    	MemoryReadBlock(Buffer, BlockAddress, ByteCount);
        return true;
    }
}
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	08 95       	ret
    if (BlockAddress >= MEMORY_SIZE_PER_SETTING) {
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    } else {
    	/* Calculate bytes left in memory and issue reading */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
    113a:	00 e0       	ldi	r16, 0x00	; 0
    113c:	10 e0       	ldi	r17, 0x00	; 0
    113e:	21 e0       	ldi	r18, 0x01	; 1
    1140:	30 e0       	ldi	r19, 0x00	; 0
		ByteCount = MIN(ByteCount, BytesLeft);
    1142:	e1 2c       	mov	r14, r1
    1144:	f1 2c       	mov	r15, r1
    1146:	06 1b       	sub	r16, r22
    1148:	17 0b       	sbc	r17, r23
    114a:	28 0b       	sbc	r18, r24
    114c:	39 0b       	sbc	r19, r25
    114e:	c0 16       	cp	r12, r16
    1150:	d1 06       	cpc	r13, r17
    1152:	e2 06       	cpc	r14, r18
    1154:	f3 06       	cpc	r15, r19
    1156:	58 f0       	brcs	.+22     	; 0x116e <MemoryDownloadBlock+0x64>
    	MemoryReadBlock(Buffer, BlockAddress, ByteCount);
    1158:	a8 01       	movw	r20, r16
    115a:	cf 01       	movw	r24, r30
    115c:	79 dd       	rcall	.-1294   	; 0xc50 <MemoryReadBlock>
        return true;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret
        /* There are bytes out of bounds to be read. Notify that we are done. */
        return false;
    } else {
    	/* Calculate bytes left in memory and issue reading */
    	uint32_t BytesLeft = MEMORY_SIZE_PER_SETTING - BlockAddress;
		ByteCount = MIN(ByteCount, BytesLeft);
    116e:	97 01       	movw	r18, r14
    1170:	86 01       	movw	r16, r12
    	MemoryReadBlock(Buffer, BlockAddress, ByteCount);
    1172:	a8 01       	movw	r20, r16
    1174:	cf 01       	movw	r24, r30
    1176:	6c dd       	rcall	.-1320   	; 0xc50 <MemoryReadBlock>
        return true;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	f2 cf       	rjmp	.-28     	; 0x1160 <MemoryDownloadBlock+0x56>

0000117c <ButtonInit>:
    [BUTTON_ACTION_CYCLE_SETTINGS] = "CYCLE_SETTINGS"
};

void ButtonInit(void)
{
	BUTTON_PORT.DIRCLR = BUTTON_MASK;
    117c:	e0 e0       	ldi	r30, 0x00	; 0
    117e:	f6 e0       	ldi	r31, 0x06	; 6
    1180:	80 e4       	ldi	r24, 0x40	; 64
    1182:	82 83       	std	Z+2, r24	; 0x02
	BUTTON_PORT.BUTTON_PINCTRL = PORT_OPC_PULLUP_gc;
    1184:	88 e1       	ldi	r24, 0x18	; 24
    1186:	86 8b       	std	Z+22, r24	; 0x16
    1188:	08 95       	ret

0000118a <ButtonTick>:
}

void ButtonTick(void)
{
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	a0 97       	sbiw	r28, 0x20	; 32
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	de bf       	out	0x3e, r29	; 62
    static uint8_t LastButtonState = 0;
    uint8_t ThisButtonState = ~BUTTON_PORT.IN;
    119e:	80 91 08 06 	lds	r24, 0x0608
    11a2:	80 95       	com	r24
    uint8_t ThisButtonChange = ThisButtonState ^ LastButtonState;
    11a4:	90 91 92 20 	lds	r25, 0x2092
    11a8:	98 27       	eor	r25, r24
    uint8_t ThisButtonPress = ThisButtonChange & ThisButtonState;
    LastButtonState = ThisButtonState;
    11aa:	80 93 92 20 	sts	0x2092, r24
void ButtonTick(void)
{
    static uint8_t LastButtonState = 0;
    uint8_t ThisButtonState = ~BUTTON_PORT.IN;
    uint8_t ThisButtonChange = ThisButtonState ^ LastButtonState;
    uint8_t ThisButtonPress = ThisButtonChange & ThisButtonState;
    11ae:	80 74       	andi	r24, 0x40	; 64
    LastButtonState = ThisButtonState;

    if ( ThisButtonPress & BUTTON_MASK ) {
    11b0:	89 23       	and	r24, r25
    11b2:	a9 f0       	breq	.+42     	; 0x11de <ButtonTick+0x54>
        uint8_t UidBuffer[32];
        ButtonActionEnum ButtonAction = GlobalSettings.ActiveSettingPtr->ButtonAction;
    11b4:	e0 91 fe 20 	lds	r30, 0x20FE
    11b8:	f0 91 ff 20 	lds	r31, 0x20FF
    11bc:	80 81       	ld	r24, Z

        if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	b9 f0       	breq	.+46     	; 0x11f0 <ButtonTick+0x66>
            for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
                UidBuffer[i] = RandomGetByte();
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	79 f1       	breq	.+94     	; 0x1224 <ButtonTick+0x9a>
                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	09 f4       	brne	.+2      	; 0x11cc <ButtonTick+0x42>
    11ca:	4a c0       	rjmp	.+148    	; 0x1260 <ButtonTick+0xd6>
                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
    11cc:	84 30       	cpi	r24, 0x04	; 4
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <ButtonTick+0x48>
    11d0:	6b c0       	rjmp	.+214    	; 0x12a8 <ButtonTick+0x11e>
                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
    11d2:	85 30       	cpi	r24, 0x05	; 5
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <ButtonTick+0x4e>
    11d6:	86 c0       	rjmp	.+268    	; 0x12e4 <ButtonTick+0x15a>
                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_CYCLE_SETTINGS) {
    11d8:	86 30       	cpi	r24, 0x06	; 6
    11da:	09 f4       	brne	.+2      	; 0x11de <ButtonTick+0x54>
    11dc:	63 c0       	rjmp	.+198    	; 0x12a4 <ButtonTick+0x11a>
        	SettingsCycle();
        }
    }
}
    11de:	a0 96       	adiw	r28, 0x20	; 32
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	08 95       	ret
    if ( ThisButtonPress & BUTTON_MASK ) {
        uint8_t UidBuffer[32];
        ButtonActionEnum ButtonAction = GlobalSettings.ActiveSettingPtr->ButtonAction;

        if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
            for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
    11f0:	80 91 fb 20 	lds	r24, 0x20FB
    11f4:	88 23       	and	r24, r24
    11f6:	09 f4       	brne	.+2      	; 0x11fa <ButtonTick+0x70>
    11f8:	97 c0       	rjmp	.+302    	; 0x1328 <ButtonTick+0x19e>
    11fa:	f1 2c       	mov	r15, r1
    11fc:	8e 01       	movw	r16, r28
    11fe:	0f 5f       	subi	r16, 0xFF	; 255
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
                UidBuffer[i] = RandomGetByte();
    1202:	06 dc       	rcall	.-2036   	; 0xa10 <RandomGetByte>
    1204:	f8 01       	movw	r30, r16
    1206:	ef 0d       	add	r30, r15
    1208:	f1 1d       	adc	r31, r1
    120a:	80 83       	st	Z, r24
    if ( ThisButtonPress & BUTTON_MASK ) {
        uint8_t UidBuffer[32];
        ButtonActionEnum ButtonAction = GlobalSettings.ActiveSettingPtr->ButtonAction;

        if (ButtonAction == BUTTON_ACTION_UID_RANDOM) {
            for (uint8_t i=0; i<ActiveConfiguration.UidSize; i++) {
    120c:	f3 94       	inc	r15
    120e:	80 91 fb 20 	lds	r24, 0x20FB
    1212:	f8 16       	cp	r15, r24
    1214:	b0 f3       	brcs	.-20     	; 0x1202 <ButtonTick+0x78>
INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
}

INLINE void ApplicationSetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationSetUidFunc(Uid);
    1216:	e0 91 f7 20 	lds	r30, 0x20F7
    121a:	f0 91 f8 20 	lds	r31, 0x20F8
    121e:	c8 01       	movw	r24, r16
    1220:	09 95       	icall
    1222:	dd cf       	rjmp	.-70     	; 0x11de <ButtonTick+0x54>
INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
}

INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
    1224:	e0 91 f5 20 	lds	r30, 0x20F5
    1228:	f0 91 f6 20 	lds	r31, 0x20F6
    122c:	8e 01       	movw	r16, r28
    122e:	0f 5f       	subi	r16, 0xFF	; 255
    1230:	1f 4f       	sbci	r17, 0xFF	; 255
    1232:	c8 01       	movw	r24, r16
    1234:	09 95       	icall
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    1236:	20 91 fb 20 	lds	r18, 0x20FB
    123a:	22 23       	and	r18, r18
    123c:	61 f3       	breq	.-40     	; 0x1216 <ButtonTick+0x8c>
    123e:	f8 01       	movw	r30, r16
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    1240:	91 e0       	ldi	r25, 0x01	; 1
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
                if (Carry) {
    1242:	99 23       	and	r25, r25
    1244:	39 f0       	breq	.+14     	; 0x1254 <ButtonTick+0xca>
                    if (UidBuffer[i] == 0xFF) {
    1246:	80 81       	ld	r24, Z
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	8f 3f       	cpi	r24, 0xFF	; 255
    124c:	09 f0       	breq	.+2      	; 0x1250 <ButtonTick+0xc6>
    124e:	90 e0       	ldi	r25, 0x00	; 0
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	80 83       	st	Z, r24
    1254:	31 96       	adiw	r30, 0x01	; 1
    1256:	8e 2f       	mov	r24, r30
    1258:	80 1b       	sub	r24, r16
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    125a:	82 17       	cp	r24, r18
    125c:	90 f3       	brcs	.-28     	; 0x1242 <ButtonTick+0xb8>
    125e:	db cf       	rjmp	.-74     	; 0x1216 <ButtonTick+0x8c>
    1260:	e0 91 f5 20 	lds	r30, 0x20F5
    1264:	f0 91 f6 20 	lds	r31, 0x20F6
    1268:	8e 01       	movw	r16, r28
    126a:	0f 5f       	subi	r16, 0xFF	; 255
    126c:	1f 4f       	sbci	r17, 0xFF	; 255
    126e:	c8 01       	movw	r24, r16
    1270:	09 95       	icall

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;
    1272:	20 91 fb 20 	lds	r18, 0x20FB
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    1276:	31 e0       	ldi	r19, 0x01	; 1
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    1278:	21 50       	subi	r18, 0x01	; 1
    127a:	68 f2       	brcs	.-102    	; 0x1216 <ButtonTick+0x8c>
                if (Carry) {
    127c:	33 23       	and	r19, r19
    127e:	e1 f3       	breq	.-8      	; 0x1278 <ButtonTick+0xee>
                    if (UidBuffer[i] == 0xFF) {
    1280:	82 2f       	mov	r24, r18
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	f8 01       	movw	r30, r16
    1286:	e8 0f       	add	r30, r24
    1288:	f9 1f       	adc	r31, r25
    128a:	40 81       	ld	r20, Z
    128c:	31 e0       	ldi	r19, 0x01	; 1
    128e:	4f 3f       	cpi	r20, 0xFF	; 255
    1290:	09 f0       	breq	.+2      	; 0x1294 <ButtonTick+0x10a>
    1292:	30 e0       	ldi	r19, 0x00	; 0
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] + 1) & 0xFF;
    1294:	f8 01       	movw	r30, r16
    1296:	e8 0f       	add	r30, r24
    1298:	f9 1f       	adc	r31, r25
    129a:	4f 5f       	subi	r20, 0xFF	; 255
    129c:	40 83       	st	Z, r20
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_INCREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    129e:	21 50       	subi	r18, 0x01	; 1
    12a0:	68 f7       	brcc	.-38     	; 0x127c <ButtonTick+0xf2>
    12a2:	b9 cf       	rjmp	.-142    	; 0x1216 <ButtonTick+0x8c>
                }
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_CYCLE_SETTINGS) {
        	SettingsCycle();
    12a4:	f8 d0       	rcall	.+496    	; 0x1496 <SettingsCycle>
    12a6:	9b cf       	rjmp	.-202    	; 0x11de <ButtonTick+0x54>
    12a8:	e0 91 f5 20 	lds	r30, 0x20F5
    12ac:	f0 91 f6 20 	lds	r31, 0x20F6
    12b0:	8e 01       	movw	r16, r28
    12b2:	0f 5f       	subi	r16, 0xFF	; 255
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	c8 01       	movw	r24, r16
    12b8:	09 95       	icall
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    12ba:	20 91 fb 20 	lds	r18, 0x20FB
    12be:	22 23       	and	r18, r18
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <ButtonTick+0x13a>
    12c2:	a9 cf       	rjmp	.-174    	; 0x1216 <ButtonTick+0x8c>
    12c4:	f8 01       	movw	r30, r16
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    12c6:	91 e0       	ldi	r25, 0x01	; 1
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
                if (Carry) {
    12c8:	99 23       	and	r25, r25
    12ca:	31 f0       	breq	.+12     	; 0x12d8 <ButtonTick+0x14e>
                    if (UidBuffer[i] == 0x00) {
    12cc:	80 81       	ld	r24, Z
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	81 11       	cpse	r24, r1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
    12d4:	81 50       	subi	r24, 0x01	; 1
    12d6:	80 83       	st	Z, r24
    12d8:	31 96       	adiw	r30, 0x01	; 1
    12da:	8e 2f       	mov	r24, r30
    12dc:	80 1b       	sub	r24, r16
        } else if (ButtonAction == BUTTON_ACTION_UID_LEFT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i;

            for (i=0; i<ActiveConfiguration.UidSize; i++) {
    12de:	82 17       	cp	r24, r18
    12e0:	98 f3       	brcs	.-26     	; 0x12c8 <ButtonTick+0x13e>
    12e2:	99 cf       	rjmp	.-206    	; 0x1216 <ButtonTick+0x8c>
    12e4:	e0 91 f5 20 	lds	r30, 0x20F5
    12e8:	f0 91 f6 20 	lds	r31, 0x20F6
    12ec:	8e 01       	movw	r16, r28
    12ee:	0f 5f       	subi	r16, 0xFF	; 255
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	c8 01       	movw	r24, r16
    12f4:	09 95       	icall

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;
    12f6:	20 91 fb 20 	lds	r18, 0x20FB
            }

            ApplicationSetUid(UidBuffer);
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
    12fa:	31 e0       	ldi	r19, 0x01	; 1
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    12fc:	21 50       	subi	r18, 0x01	; 1
    12fe:	08 f4       	brcc	.+2      	; 0x1302 <ButtonTick+0x178>
    1300:	8a cf       	rjmp	.-236    	; 0x1216 <ButtonTick+0x8c>
                if (Carry) {
    1302:	33 23       	and	r19, r19
    1304:	d9 f3       	breq	.-10     	; 0x12fc <ButtonTick+0x172>
                    if (UidBuffer[i] == 0x00) {
    1306:	82 2f       	mov	r24, r18
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	f8 01       	movw	r30, r16
    130c:	e8 0f       	add	r30, r24
    130e:	f9 1f       	adc	r31, r25
    1310:	40 81       	ld	r20, Z
    1312:	31 e0       	ldi	r19, 0x01	; 1
    1314:	41 11       	cpse	r20, r1
    1316:	30 e0       	ldi	r19, 0x00	; 0
                        Carry = 1;
                    } else {
                        Carry = 0;
                    }

                    UidBuffer[i] = (UidBuffer[i] - 1) & 0xFF;
    1318:	f8 01       	movw	r30, r16
    131a:	e8 0f       	add	r30, r24
    131c:	f9 1f       	adc	r31, r25
    131e:	41 50       	subi	r20, 0x01	; 1
    1320:	40 83       	st	Z, r20
        } else if (ButtonAction == BUTTON_ACTION_UID_RIGHT_DECREMENT) {
            ApplicationGetUid(UidBuffer);
            bool Carry = 1;
            uint8_t i = ActiveConfiguration.UidSize;

            while(i-- > 0) {
    1322:	21 50       	subi	r18, 0x01	; 1
    1324:	70 f7       	brcc	.-36     	; 0x1302 <ButtonTick+0x178>
    1326:	77 cf       	rjmp	.-274    	; 0x1216 <ButtonTick+0x8c>
    1328:	8e 01       	movw	r16, r28
    132a:	0f 5f       	subi	r16, 0xFF	; 255
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	73 cf       	rjmp	.-282    	; 0x1216 <ButtonTick+0x8c>

00001330 <ButtonGetActionList>:
        }
    }
}

void ButtonGetActionList(char* ListOut, uint16_t BufferSize)
{
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    uint8_t i;

    /* Account for '\0' */
    BufferSize--;
    1338:	61 50       	subi	r22, 0x01	; 1
    133a:	71 09       	sbc	r23, r1
    133c:	47 e4       	ldi	r20, 0x47	; 71
    133e:	53 e0       	ldi	r21, 0x03	; 3
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
            /* No comma on last configuration */
            *ListOut++ = ',';
    1340:	1c e2       	ldi	r17, 0x2C	; 44

    /* Account for '\0' */
    BufferSize--;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        const char* ActionName = ButtonActionTable[i];
    1342:	9a 01       	movw	r18, r20
        char c;

        while( (c = pgm_read_byte(ActionName)) != '\0' && BufferSize > sizeof(ButtonActionTable[i]) ) {
    1344:	fa 01       	movw	r30, r20
    1346:	04 91       	lpm	r16, Z+
    1348:	00 23       	and	r16, r16
    134a:	49 f1       	breq	.+82     	; 0x139e <ButtonGetActionList+0x6e>
    134c:	61 32       	cpi	r22, 0x21	; 33
    134e:	71 05       	cpc	r23, r1
    1350:	20 f4       	brcc	.+8      	; 0x135a <ButtonGetActionList+0x2a>
    1352:	25 c0       	rjmp	.+74     	; 0x139e <ButtonGetActionList+0x6e>
    1354:	60 32       	cpi	r22, 0x20	; 32
    1356:	71 05       	cpc	r23, r1
    1358:	61 f0       	breq	.+24     	; 0x1372 <ButtonGetActionList+0x42>
    135a:	dc 01       	movw	r26, r24
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	ec 01       	movw	r28, r24
            /* While not end-of-string and enough buffer to
            * put a complete configuration name */
            *ListOut++ = c;
    1360:	0c 93       	st	X, r16
            ActionName++;
    1362:	2f 5f       	subi	r18, 0xFF	; 255
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
            BufferSize--;
    1366:	61 50       	subi	r22, 0x01	; 1
    1368:	71 09       	sbc	r23, r1

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        const char* ActionName = ButtonActionTable[i];
        char c;

        while( (c = pgm_read_byte(ActionName)) != '\0' && BufferSize > sizeof(ButtonActionTable[i]) ) {
    136a:	f9 01       	movw	r30, r18
    136c:	04 91       	lpm	r16, Z+
    136e:	01 11       	cpse	r16, r1
    1370:	f1 cf       	rjmp	.-30     	; 0x1354 <ButtonGetActionList+0x24>
            *ListOut++ = c;
            ActionName++;
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
    1372:	f4 e0       	ldi	r31, 0x04	; 4
    1374:	47 30       	cpi	r20, 0x07	; 7
    1376:	5f 07       	cpc	r21, r31
    1378:	61 f0       	breq	.+24     	; 0x1392 <ButtonGetActionList+0x62>
            /* No comma on last configuration */
            *ListOut++ = ',';
    137a:	ce 01       	movw	r24, r28
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	18 83       	st	Y, r17
            BufferSize--;
    1380:	61 50       	subi	r22, 0x01	; 1
    1382:	71 09       	sbc	r23, r1
    1384:	40 5e       	subi	r20, 0xE0	; 224
    1386:	5f 4f       	sbci	r21, 0xFF	; 255
    uint8_t i;

    /* Account for '\0' */
    BufferSize--;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    1388:	24 e0       	ldi	r18, 0x04	; 4
    138a:	47 32       	cpi	r20, 0x27	; 39
    138c:	52 07       	cpc	r21, r18
    138e:	c9 f6       	brne	.-78     	; 0x1342 <ButtonGetActionList+0x12>
            BufferSize--;
        }

        if ( i < (BUTTON_ACTION_COUNT - 1) ) {
            /* No comma on last configuration */
            *ListOut++ = ',';
    1390:	ec 01       	movw	r28, r24
            BufferSize--;
        }
    }

    *ListOut = '\0';
    1392:	18 82       	st	Y, r1
}
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	1f 91       	pop	r17
    139a:	0f 91       	pop	r16
    139c:	08 95       	ret

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        const char* ActionName = ButtonActionTable[i];
        char c;

        while( (c = pgm_read_byte(ActionName)) != '\0' && BufferSize > sizeof(ButtonActionTable[i]) ) {
    139e:	ec 01       	movw	r28, r24
    13a0:	e8 cf       	rjmp	.-48     	; 0x1372 <ButtonGetActionList+0x42>

000013a2 <ButtonGetActionByName>:
{
	GlobalSettings.ActiveSettingPtr->ButtonAction = Action;
}

void ButtonGetActionByName(char* ActionOut, uint16_t BufferSize)
{
    13a2:	ab 01       	movw	r20, r22
    strncpy_P(ActionOut, ButtonActionTable[GlobalSettings.ActiveSettingPtr->ButtonAction], BufferSize);
    13a4:	e0 91 fe 20 	lds	r30, 0x20FE
    13a8:	f0 91 ff 20 	lds	r31, 0x20FF
    13ac:	60 81       	ld	r22, Z
    13ae:	20 e2       	ldi	r18, 0x20	; 32
    13b0:	62 9f       	mul	r22, r18
    13b2:	b0 01       	movw	r22, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	69 5b       	subi	r22, 0xB9	; 185
    13b8:	7c 4f       	sbci	r23, 0xFC	; 252
    13ba:	0c 94 3c 22 	jmp	0x4478	; 0x4478 <strncpy_P>

000013be <ButtonSetActionByName>:
}

bool ButtonSetActionByName(const char* Action)
{
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	ec 01       	movw	r28, r24
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
    13c4:	67 e4       	ldi	r22, 0x47	; 71
    13c6:	73 e0       	ldi	r23, 0x03	; 3
    13c8:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    13cc:	89 2b       	or	r24, r25
    13ce:	71 f1       	breq	.+92     	; 0x142c <ButtonSetActionByName+0x6e>
    13d0:	67 e6       	ldi	r22, 0x67	; 103
    13d2:	73 e0       	ldi	r23, 0x03	; 3
    13d4:	ce 01       	movw	r24, r28
    13d6:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    13da:	89 2b       	or	r24, r25
    13dc:	89 f1       	breq	.+98     	; 0x1440 <ButtonSetActionByName+0x82>
    13de:	67 e8       	ldi	r22, 0x87	; 135
    13e0:	73 e0       	ldi	r23, 0x03	; 3
    13e2:	ce 01       	movw	r24, r28
    13e4:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    13e8:	89 2b       	or	r24, r25
    13ea:	61 f1       	breq	.+88     	; 0x1444 <ButtonSetActionByName+0x86>
    13ec:	67 ea       	ldi	r22, 0xA7	; 167
    13ee:	73 e0       	ldi	r23, 0x03	; 3
    13f0:	ce 01       	movw	r24, r28
    13f2:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    13f6:	89 2b       	or	r24, r25
    13f8:	39 f1       	breq	.+78     	; 0x1448 <ButtonSetActionByName+0x8a>
    13fa:	67 ec       	ldi	r22, 0xC7	; 199
    13fc:	73 e0       	ldi	r23, 0x03	; 3
    13fe:	ce 01       	movw	r24, r28
    1400:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1404:	89 2b       	or	r24, r25
    1406:	11 f1       	breq	.+68     	; 0x144c <ButtonSetActionByName+0x8e>
    1408:	67 ee       	ldi	r22, 0xE7	; 231
    140a:	73 e0       	ldi	r23, 0x03	; 3
    140c:	ce 01       	movw	r24, r28
    140e:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1412:	89 2b       	or	r24, r25
    1414:	e9 f0       	breq	.+58     	; 0x1450 <ButtonSetActionByName+0x92>
    1416:	67 e0       	ldi	r22, 0x07	; 7
    1418:	74 e0       	ldi	r23, 0x04	; 4
    141a:	ce 01       	movw	r24, r28
    141c:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1420:	89 2b       	or	r24, r25
    1422:	c1 f0       	breq	.+48     	; 0x1454 <ButtonSetActionByName+0x96>
            return true;
        }
    }

    /* Button action not found */
    return false;
    1424:	80 e0       	ldi	r24, 0x00	; 0
}
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

bool ButtonSetActionByName(const char* Action)
{
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    142c:	80 e0       	ldi	r24, 0x00	; 0
    *ListOut = '\0';
}

void ButtonSetActionById(ButtonActionEnum Action)
{
	GlobalSettings.ActiveSettingPtr->ButtonAction = Action;
    142e:	e0 91 fe 20 	lds	r30, 0x20FE
    1432:	f0 91 ff 20 	lds	r31, 0x20FF
    1436:	80 83       	st	Z, r24
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
        if (strcmp_P(Action, ButtonActionTable[i]) == 0) {
            ButtonSetActionById(i);
            return true;
    1438:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    /* Button action not found */
    return false;
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

bool ButtonSetActionByName(const char* Action)
{
    uint8_t i;

    for (i=0; i<BUTTON_ACTION_COUNT; i++) {
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	f5 cf       	rjmp	.-22     	; 0x142e <ButtonSetActionByName+0x70>
    1444:	82 e0       	ldi	r24, 0x02	; 2
    1446:	f3 cf       	rjmp	.-26     	; 0x142e <ButtonSetActionByName+0x70>
    1448:	83 e0       	ldi	r24, 0x03	; 3
    144a:	f1 cf       	rjmp	.-30     	; 0x142e <ButtonSetActionByName+0x70>
    144c:	84 e0       	ldi	r24, 0x04	; 4
    144e:	ef cf       	rjmp	.-34     	; 0x142e <ButtonSetActionByName+0x70>
    1450:	85 e0       	ldi	r24, 0x05	; 5
    1452:	ed cf       	rjmp	.-38     	; 0x142e <ButtonSetActionByName+0x70>
    1454:	86 e0       	ldi	r24, 0x06	; 6
    1456:	eb cf       	rjmp	.-42     	; 0x142e <ButtonSetActionByName+0x70>

00001458 <SettingsLoad>:
		.ButtonAction =	DEFAULT_BUTTON_ACTION,
	} }
};

void SettingsLoad(void) {
	eeprom_read_block(&GlobalSettings, &StoredSettings, sizeof(SettingsType));
    1458:	43 e1       	ldi	r20, 0x13	; 19
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	60 e0       	ldi	r22, 0x00	; 0
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	8d ef       	ldi	r24, 0xFD	; 253
    1462:	90 e2       	ldi	r25, 0x20	; 32
    1464:	0c 94 44 24 	jmp	0x4888	; 0x4888 <__eerd_block_x32a4u>

00001468 <SettingsSave>:
}

void SettingsSave(void) {
#if ENABLE_EEPROM_SETTINGS
	eeprom_write_block(&GlobalSettings, &StoredSettings, sizeof(SettingsType));
    1468:	43 e1       	ldi	r20, 0x13	; 19
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	8d ef       	ldi	r24, 0xFD	; 253
    1472:	90 e2       	ldi	r25, 0x20	; 32
    1474:	0c 94 4f 24 	jmp	0x489e	; 0x489e <__eewr_block_x32a4u>

00001478 <SettingsSetActiveById>:
		}
	}
}

void SettingsSetActiveById(uint8_t Setting) {
	if (Setting < SETTINGS_COUNT) {
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	08 f0       	brcs	.+2      	; 0x147e <SettingsSetActiveById+0x6>
    147c:	08 95       	ret
		GlobalSettings.ActiveSetting = Setting;
    147e:	80 93 fd 20 	sts	0x20FD, r24
		GlobalSettings.ActiveSettingPtr =
				&GlobalSettings.Settings[GlobalSettings.ActiveSetting];
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	80 50       	subi	r24, 0x00	; 0
    148a:	9f 4d       	sbci	r25, 0xDF	; 223
}

void SettingsSetActiveById(uint8_t Setting) {
	if (Setting < SETTINGS_COUNT) {
		GlobalSettings.ActiveSetting = Setting;
		GlobalSettings.ActiveSettingPtr =
    148c:	80 93 fe 20 	sts	0x20FE, r24
    1490:	90 93 ff 20 	sts	0x20FF, r25
				&GlobalSettings.Settings[GlobalSettings.ActiveSetting];

		/* Settings have changed. Progress changes through system */
		ConfigurationInit();
    1494:	3f ca       	rjmp	.-2946   	; 0x914 <ConfigurationInit>

00001496 <SettingsCycle>:
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1496:	20 91 fd 20 	lds	r18, 0x20FD
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	2f 5f       	subi	r18, 0xFF	; 255
    149e:	3f 4f       	sbci	r19, 0xFF	; 255
    14a0:	27 70       	andi	r18, 0x07	; 7
    14a2:	33 27       	eor	r19, r19
    14a4:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    14a6:	f9 01       	movw	r30, r18
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	ef 5f       	subi	r30, 0xFF	; 255
    14ae:	fe 4d       	sbci	r31, 0xDE	; 222
    14b0:	90 81       	ld	r25, Z
    14b2:	91 11       	cpse	r25, r1
    14b4:	5c c0       	rjmp	.+184    	; 0x156e <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    14b6:	2f 5f       	subi	r18, 0xFF	; 255
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	27 70       	andi	r18, 0x07	; 7
    14bc:	33 27       	eor	r19, r19
    14be:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    14c0:	f9 01       	movw	r30, r18
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	ef 5f       	subi	r30, 0xFF	; 255
    14c8:	fe 4d       	sbci	r31, 0xDE	; 222
    14ca:	90 81       	ld	r25, Z
    14cc:	91 11       	cpse	r25, r1
    14ce:	4f c0       	rjmp	.+158    	; 0x156e <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    14d0:	2f 5f       	subi	r18, 0xFF	; 255
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	27 70       	andi	r18, 0x07	; 7
    14d6:	33 27       	eor	r19, r19
    14d8:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    14da:	f9 01       	movw	r30, r18
    14dc:	ee 0f       	add	r30, r30
    14de:	ff 1f       	adc	r31, r31
    14e0:	ef 5f       	subi	r30, 0xFF	; 255
    14e2:	fe 4d       	sbci	r31, 0xDE	; 222
    14e4:	90 81       	ld	r25, Z
    14e6:	91 11       	cpse	r25, r1
    14e8:	42 c0       	rjmp	.+132    	; 0x156e <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    14ea:	2f 5f       	subi	r18, 0xFF	; 255
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	27 70       	andi	r18, 0x07	; 7
    14f0:	33 27       	eor	r19, r19
    14f2:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    14f4:	f9 01       	movw	r30, r18
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	ef 5f       	subi	r30, 0xFF	; 255
    14fc:	fe 4d       	sbci	r31, 0xDE	; 222
    14fe:	90 81       	ld	r25, Z
    1500:	91 11       	cpse	r25, r1
    1502:	35 c0       	rjmp	.+106    	; 0x156e <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1504:	2f 5f       	subi	r18, 0xFF	; 255
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
    1508:	27 70       	andi	r18, 0x07	; 7
    150a:	33 27       	eor	r19, r19
    150c:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    150e:	f9 01       	movw	r30, r18
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	ef 5f       	subi	r30, 0xFF	; 255
    1516:	fe 4d       	sbci	r31, 0xDE	; 222
    1518:	90 81       	ld	r25, Z
    151a:	91 11       	cpse	r25, r1
    151c:	28 c0       	rjmp	.+80     	; 0x156e <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    151e:	2f 5f       	subi	r18, 0xFF	; 255
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	27 70       	andi	r18, 0x07	; 7
    1524:	33 27       	eor	r19, r19
    1526:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    1528:	f9 01       	movw	r30, r18
    152a:	ee 0f       	add	r30, r30
    152c:	ff 1f       	adc	r31, r31
    152e:	ef 5f       	subi	r30, 0xFF	; 255
    1530:	fe 4d       	sbci	r31, 0xDE	; 222
    1532:	90 81       	ld	r25, Z
    1534:	91 11       	cpse	r25, r1
    1536:	1b c0       	rjmp	.+54     	; 0x156e <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1538:	2f 5f       	subi	r18, 0xFF	; 255
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	27 70       	andi	r18, 0x07	; 7
    153e:	33 27       	eor	r19, r19
    1540:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    1542:	f9 01       	movw	r30, r18
    1544:	ee 0f       	add	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	ef 5f       	subi	r30, 0xFF	; 255
    154a:	fe 4d       	sbci	r31, 0xDE	; 222
    154c:	90 81       	ld	r25, Z
    154e:	91 11       	cpse	r25, r1
    1550:	0e c0       	rjmp	.+28     	; 0x156e <SettingsCycle+0xd8>
void SettingsCycle(void) {
	uint8_t i = SETTINGS_COUNT;
	uint8_t Setting = GlobalSettings.ActiveSetting;

	while (i-- > 0) {
		Setting = (Setting + 1) % SETTINGS_COUNT;
    1552:	2f 5f       	subi	r18, 0xFF	; 255
    1554:	3f 4f       	sbci	r19, 0xFF	; 255
    1556:	27 70       	andi	r18, 0x07	; 7
    1558:	33 27       	eor	r19, r19
    155a:	82 2f       	mov	r24, r18

		if (GlobalSettings.Settings[Setting].Configuration != CONFIG_NONE) {
    155c:	f9 01       	movw	r30, r18
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	ef 5f       	subi	r30, 0xFF	; 255
    1564:	fe 4d       	sbci	r31, 0xDE	; 222
    1566:	90 81       	ld	r25, Z
    1568:	91 11       	cpse	r25, r1
    156a:	01 c0       	rjmp	.+2      	; 0x156e <SettingsCycle+0xd8>
    156c:	08 95       	ret
			SettingsSetActiveById(Setting);
    156e:	84 cf       	rjmp	.-248    	; 0x1478 <SettingsSetActiveById>

00001570 <SettingsGetActiveByName>:
uint8_t SettingsGetActiveById(void) {
	return GlobalSettings.ActiveSetting;
}

void SettingsGetActiveByName(char* SettingOut, uint16_t BufferSize) {
	SettingOut[0] = SettingsGetActiveById() + '0';
    1570:	20 91 fd 20 	lds	r18, 0x20FD
    1574:	20 5d       	subi	r18, 0xD0	; 208
    1576:	fc 01       	movw	r30, r24
    1578:	20 83       	st	Z, r18
	SettingOut[1] = '\0';
    157a:	11 82       	std	Z+1, r1	; 0x01
    157c:	08 95       	ret

0000157e <SettingsSetActiveByName>:
}

bool SettingsSetActiveByName(const char* Setting) {
    157e:	fc 01       	movw	r30, r24
	uint8_t SettingNr = Setting[0] - '0';
    1580:	80 81       	ld	r24, Z

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
    1582:	91 81       	ldd	r25, Z+1	; 0x01
    1584:	91 11       	cpse	r25, r1
    1586:	03 c0       	rjmp	.+6      	; 0x158e <SettingsSetActiveByName+0x10>
	SettingOut[0] = SettingsGetActiveById() + '0';
	SettingOut[1] = '\0';
}

bool SettingsSetActiveByName(const char* Setting) {
	uint8_t SettingNr = Setting[0] - '0';
    1588:	80 53       	subi	r24, 0x30	; 48

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
    158a:	88 30       	cpi	r24, 0x08	; 8
    158c:	10 f0       	brcs	.+4      	; 0x1592 <SettingsSetActiveByName+0x14>
		SettingsSetActiveById(SettingNr);
		return true;
	} else {
		return false;
    158e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1590:	08 95       	ret

bool SettingsSetActiveByName(const char* Setting) {
	uint8_t SettingNr = Setting[0] - '0';

	if ((Setting[1] == '\0') && (SettingNr < SETTINGS_COUNT)) {
		SettingsSetActiveById(SettingNr);
    1592:	72 df       	rcall	.-284    	; 0x1478 <SettingsSetActiveById>
		return true;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	08 95       	ret

00001598 <TerminalSendString>:
uint8_t TerminalBuffer[TERMINAL_BUFFER_SIZE];
TerminalStateEnum TerminalState = TERMINAL_UNINITIALIZED;
static uint8_t TerminalInitDelay = INIT_DELAY;

void TerminalSendString(const char* s) {
    CDC_Device_SendString(&TerminalHandle, s);
    1598:	bc 01       	movw	r22, r24
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	90 e2       	ldi	r25, 0x20	; 32
    159e:	0c 94 da 1f 	jmp	0x3fb4	; 0x3fb4 <CDC_Device_SendString>

000015a2 <TerminalSendStringP>:
}

void TerminalSendStringP(const char* s) {
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    char c;

    while( (c = pgm_read_byte(s++)) != '\0' ) {
    15a6:	ec 01       	movw	r28, r24
    15a8:	21 96       	adiw	r28, 0x01	; 1
    15aa:	fc 01       	movw	r30, r24
    15ac:	64 91       	lpm	r22, Z+
    15ae:	66 23       	and	r22, r22
    15b0:	49 f0       	breq	.+18     	; 0x15c4 <TerminalSendStringP+0x22>
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e2       	ldi	r25, 0x20	; 32
    15b6:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
    15ba:	fe 01       	movw	r30, r28
    15bc:	64 91       	lpm	r22, Z+
    15be:	21 96       	adiw	r28, 0x01	; 1
    15c0:	61 11       	cpse	r22, r1
    15c2:	f7 cf       	rjmp	.-18     	; 0x15b2 <TerminalSendStringP+0x10>
        TerminalSendChar(c);
    }
}
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <TerminalSendBlock>:
#endif



void TerminalSendBlock(void* Buffer, uint16_t ByteCount)
{
    15ca:	ab 01       	movw	r20, r22
    CDC_Device_SendData(&TerminalHandle, Buffer, ByteCount);
    15cc:	bc 01       	movw	r22, r24
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e2       	ldi	r25, 0x20	; 32
    15d2:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <CDC_Device_SendData>

000015d6 <TerminalInit>:
    }
}

void TerminalInit(void)
{
    TERMINAL_VBUS_PORT.DIRCLR = TERMINAL_VBUS_MASK;
    15d6:	80 e2       	ldi	r24, 0x20	; 32
    15d8:	e0 e6       	ldi	r30, 0x60	; 96
    15da:	f6 e0       	ldi	r31, 0x06	; 6
    15dc:	82 83       	std	Z+2, r24	; 0x02
    15de:	08 95       	ret

000015e0 <TerminalTask>:
}

void TerminalTask(void)
{
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
	CDC_Device_USBTask(&TerminalHandle);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e2       	ldi	r25, 0x20	; 32
    15e8:	0e 94 9c 20 	call	0x4138	; 0x4138 <CDC_Device_USBTask>
	USB_USBTask();
    15ec:	0e 94 bf 1a 	call	0x357e	; 0x357e <USB_USBTask>
    CDC_Device_SendData(&TerminalHandle, Buffer, ByteCount);
}


static void ProcessByte(void) {
    int16_t Byte = CDC_Device_ReceiveByte(&TerminalHandle);
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e2       	ldi	r25, 0x20	; 32
    15f4:	0e 94 b7 20 	call	0x416e	; 0x416e <CDC_Device_ReceiveByte>
    15f8:	ec 01       	movw	r28, r24

    if (Byte >= 0) {
    15fa:	97 fd       	sbrc	r25, 7
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <TerminalTask+0x30>
    LED_PORT.OUTTGL = Mask;
}

static inline
void LEDPulse(uint8_t Mask) {
	LEDPulseMask = Mask;
    15fe:	80 e1       	ldi	r24, 0x10	; 16
    1600:	80 93 93 20 	sts	0x2093, r24
	LED_PORT.OUTSET = Mask;
    1604:	80 93 05 06 	sts	0x0605, r24
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
    1608:	8c 2f       	mov	r24, r28
    160a:	52 d2       	rcall	.+1188   	; 0x1ab0 <XModemProcessByte>
    160c:	88 23       	and	r24, r24
    160e:	19 f0       	breq	.+6      	; 0x1616 <TerminalTask+0x36>
{
	CDC_Device_USBTask(&TerminalHandle);
	USB_USBTask();

    ProcessByte();
}
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
            /* XModem handled the byte */
        } else if (CommandLineProcessByte(Byte)) {
    1616:	8c 2f       	mov	r24, r28
{
	CDC_Device_USBTask(&TerminalHandle);
	USB_USBTask();

    ProcessByte();
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
        /* Byte received */
    	LEDPulse(LED_RED);

        if (XModemProcessByte(Byte)) {
            /* XModem handled the byte */
        } else if (CommandLineProcessByte(Byte)) {
    161c:	d8 c3       	rjmp	.+1968   	; 0x1dce <CommandLineProcessByte>

0000161e <TerminalTick>:
    }
}

static void SenseVBus(void)
{
    switch(TerminalState) {
    161e:	80 91 94 20 	lds	r24, 0x2094
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	31 f1       	breq	.+76     	; 0x1672 <TerminalTick+0x54>
    1626:	c8 f0       	brcs	.+50     	; 0x165a <TerminalTick+0x3c>
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	59 f0       	breq	.+22     	; 0x1642 <TerminalTick+0x24>
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	39 f4       	brne	.+14     	; 0x163e <TerminalTick+0x20>
    		TerminalState = TERMINAL_UNITIALIZING;
    	}
    	break;

    case TERMINAL_UNITIALIZING:
    	if (--TerminalInitDelay == 0) {
    1630:	80 91 00 20 	lds	r24, 0x2000
    1634:	81 50       	subi	r24, 0x01	; 1
    1636:	80 93 00 20 	sts	0x2000, r24
    163a:	88 23       	and	r24, r24
    163c:	41 f1       	breq	.+80     	; 0x168e <TerminalTick+0x70>

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    163e:	99 d3       	rcall	.+1842   	; 0x1d72 <XModemTick>
    CommandLineTick();
    1640:	6c c5       	rjmp	.+2776   	; 0x211a <CommandLineTick>
            TerminalState = TERMINAL_INITIALIZED;
    	}
    	break;

    case TERMINAL_INITIALIZED:
    	if (!(TERMINAL_VBUS_PORT.IN & TERMINAL_VBUS_MASK)) {
    1642:	80 91 68 06 	lds	r24, 0x0668
    1646:	85 fd       	sbrc	r24, 5
    1648:	fa cf       	rjmp	.-12     	; 0x163e <TerminalTick+0x20>
    		/* Initialized and VBUS sense low */
    		TerminalInitDelay = INIT_DELAY;
    164a:	84 e1       	ldi	r24, 0x14	; 20
    164c:	80 93 00 20 	sts	0x2000, r24
    		TerminalState = TERMINAL_UNITIALIZING;
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	80 93 94 20 	sts	0x2094, r24

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    1656:	8d d3       	rcall	.+1818   	; 0x1d72 <XModemTick>
    CommandLineTick();
    1658:	60 c5       	rjmp	.+2752   	; 0x211a <CommandLineTick>

static void SenseVBus(void)
{
    switch(TerminalState) {
    case TERMINAL_UNINITIALIZED:
    	if (TERMINAL_VBUS_PORT.IN & TERMINAL_VBUS_MASK) {
    165a:	80 91 68 06 	lds	r24, 0x0668
    165e:	85 ff       	sbrs	r24, 5
    1660:	ee cf       	rjmp	.-36     	; 0x163e <TerminalTick+0x20>
    		/* Not initialized and VBUS sense high */
    		TerminalInitDelay = INIT_DELAY;
    1662:	84 e1       	ldi	r24, 0x14	; 20
    1664:	80 93 00 20 	sts	0x2000, r24
    		TerminalState = TERMINAL_INITIALIZING;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 93 94 20 	sts	0x2094, r24

void TerminalTick(void)
{
	SenseVBus();

    XModemTick();
    166e:	81 d3       	rcall	.+1794   	; 0x1d72 <XModemTick>
    CommandLineTick();
    1670:	54 c5       	rjmp	.+2728   	; 0x211a <CommandLineTick>
    		TerminalState = TERMINAL_INITIALIZING;
    	}
    break;

    case TERMINAL_INITIALIZING:
    	if (--TerminalInitDelay == 0) {
    1672:	80 91 00 20 	lds	r24, 0x2000
    1676:	81 50       	subi	r24, 0x01	; 1
    1678:	80 93 00 20 	sts	0x2000, r24
    167c:	81 11       	cpse	r24, r1
    167e:	df cf       	rjmp	.-66     	; 0x163e <TerminalTick+0x20>
            SystemStartUSBClock();
    1680:	f7 d8       	rcall	.-3602   	; 0x870 <SystemStartUSBClock>
            USB_Init();
    1682:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <USB_Init>
            TerminalState = TERMINAL_INITIALIZED;
    1686:	82 e0       	ldi	r24, 0x02	; 2
    1688:	80 93 94 20 	sts	0x2094, r24
    168c:	d8 cf       	rjmp	.-80     	; 0x163e <TerminalTick+0x20>
    	}
    	break;

    case TERMINAL_UNITIALIZING:
    	if (--TerminalInitDelay == 0) {
        	USB_Disable();
    168e:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <USB_Disable>
        	SystemStopUSBClock();
    1692:	07 d9       	rcall	.-3570   	; 0x8a2 <SystemStopUSBClock>
        	TerminalState = TERMINAL_UNINITIALIZED;
    1694:	10 92 94 20 	sts	0x2094, r1
    1698:	d2 cf       	rjmp	.-92     	; 0x163e <TerminalTick+0x20>

0000169a <EVENT_USB_Device_Connect>:
    LED_PORT.DIRSET = LED_MASK;
}

static inline
void LEDSetOn(uint8_t Mask) {
    LED_PORT.OUTSET = Mask;
    169a:	80 e2       	ldi	r24, 0x20	; 32
    169c:	e0 e0       	ldi	r30, 0x00	; 0
    169e:	f6 e0       	ldi	r31, 0x06	; 6
    16a0:	85 83       	std	Z+5, r24	; 0x05
    16a2:	08 95       	ret

000016a4 <EVENT_USB_Device_Disconnect>:
}

static inline
void LEDSetOff(uint8_t Mask) {
    LED_PORT.OUTCLR = Mask;
    16a4:	80 e2       	ldi	r24, 0x20	; 32
    16a6:	e0 e0       	ldi	r30, 0x00	; 0
    16a8:	f6 e0       	ldi	r31, 0x06	; 6
    16aa:	86 83       	std	Z+6, r24	; 0x06
    16ac:	08 95       	ret

000016ae <EVENT_USB_Device_ConfigurationChanged>:


/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    CDC_Device_ConfigureEndpoints(&TerminalHandle);
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e2       	ldi	r25, 0x20	; 32
    16b2:	0c 94 b5 1f 	jmp	0x3f6a	; 0x3f6a <CDC_Device_ConfigureEndpoints>

000016b6 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    CDC_Device_ProcessControlRequest(&TerminalHandle);
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e2       	ldi	r25, 0x20	; 32
    16ba:	0c 94 14 21 	jmp	0x4228	; 0x4228 <CDC_Device_ProcessControlRequest>

000016be <CommandGetVersion>:

extern const PROGMEM CommandEntryType CommandTable[];

CommandStatusIdType CommandGetVersion(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR(
    16be:	25 e8       	ldi	r18, 0x85	; 133
    16c0:	34 e0       	ldi	r19, 0x04	; 4
    16c2:	3f 93       	push	r19
    16c4:	2f 93       	push	r18
    16c6:	2e e7       	ldi	r18, 0x7E	; 126
    16c8:	34 e0       	ldi	r19, 0x04	; 4
    16ca:	3f 93       	push	r19
    16cc:	2f 93       	push	r18
    16ce:	27 e7       	ldi	r18, 0x77	; 119
    16d0:	34 e0       	ldi	r19, 0x04	; 4
    16d2:	3f 93       	push	r19
    16d4:	2f 93       	push	r18
    16d6:	2e e3       	ldi	r18, 0x3E	; 62
    16d8:	34 e0       	ldi	r19, 0x04	; 4
    16da:	3f 93       	push	r19
    16dc:	2f 93       	push	r18
    16de:	21 e0       	ldi	r18, 0x01	; 1
    16e0:	2f 93       	push	r18
    16e2:	1f 92       	push	r1
    16e4:	9f 93       	push	r25
    16e6:	8f 93       	push	r24
    16e8:	0e 94 54 22 	call	0x44a8	; 0x44a8 <snprintf_P>
    "Chameleon-Mini %S using LUFA %S compiled with AVR-GCC %S"
    ), PSTR(CHAMELEON_MINI_VERSION_STRING), PSTR(LUFA_VERSION_STRING), PSTR(__VERSION__)
  );

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    16ec:	8d b7       	in	r24, 0x3d	; 61
    16ee:	9e b7       	in	r25, 0x3e	; 62
    16f0:	0c 96       	adiw	r24, 0x0c	; 12
    16f2:	8d bf       	out	0x3d, r24	; 61
    16f4:	9e bf       	out	0x3e, r25	; 62
}
    16f6:	85 e6       	ldi	r24, 0x65	; 101
    16f8:	08 95       	ret

000016fa <CommandGetConfig>:

CommandStatusIdType CommandGetConfig(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    16fa:	29 ed       	ldi	r18, 0xD9	; 217
    16fc:	30 e2       	ldi	r19, 0x20	; 32
    16fe:	3f 93       	push	r19
    1700:	2f 93       	push	r18
    1702:	2b e3       	ldi	r18, 0x3B	; 59
    1704:	34 e0       	ldi	r19, 0x04	; 4
    1706:	3f 93       	push	r19
    1708:	2f 93       	push	r18
    170a:	21 e0       	ldi	r18, 0x01	; 1
    170c:	2f 93       	push	r18
    170e:	1f 92       	push	r1
    1710:	9f 93       	push	r25
    1712:	8f 93       	push	r24
    1714:	0e 94 54 22 	call	0x44a8	; 0x44a8 <snprintf_P>
    PSTR("%s"), ActiveConfiguration.ConfigurationName);

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    1718:	8d b7       	in	r24, 0x3d	; 61
    171a:	9e b7       	in	r25, 0x3e	; 62
    171c:	08 96       	adiw	r24, 0x08	; 8
    171e:	8d bf       	out	0x3d, r24	; 61
    1720:	9e bf       	out	0x3e, r25	; 62

}
    1722:	85 e6       	ldi	r24, 0x65	; 101
    1724:	08 95       	ret

00001726 <CommandSetConfig>:

CommandStatusIdType CommandSetConfig(const char* InParam)
{
  if (ConfigurationSetByName(InParam)) {
    1726:	fc d8       	rcall	.-3592   	; 0x920 <ConfigurationSetByName>
    1728:	81 11       	cpse	r24, r1
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <CommandSetConfig+0xa>
	    SettingsSave();
    return COMMAND_INFO_OK_ID;
  } else {
    return COMMAND_ERR_INVALID_PARAM_ID;
    172c:	8a ec       	ldi	r24, 0xCA	; 202
  }
}
    172e:	08 95       	ret
}

CommandStatusIdType CommandSetConfig(const char* InParam)
{
  if (ConfigurationSetByName(InParam)) {
	    SettingsSave();
    1730:	9b de       	rcall	.-714    	; 0x1468 <SettingsSave>
    return COMMAND_INFO_OK_ID;
    1732:	84 e6       	ldi	r24, 0x64	; 100
    1734:	08 95       	ret

00001736 <CommandExecConfig>:
  }
}

CommandStatusIdType CommandExecConfig(char* OutMessage)
{
  ConfigurationGetList(OutMessage, TERMINAL_BUFFER_SIZE);
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	71 e0       	ldi	r23, 0x01	; 1
    173a:	2f d9       	rcall	.-3490   	; 0x99a <ConfigurationGetList>

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    173c:	85 e6       	ldi	r24, 0x65	; 101
    173e:	08 95       	ret

00001740 <CommandGetUid>:

CommandStatusIdType CommandGetUid(char* OutParam)
{
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	a0 97       	sbiw	r28, 0x20	; 32
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	8c 01       	movw	r16, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;
    1758:	e0 90 fb 20 	lds	r14, 0x20FB
    175c:	f1 2c       	mov	r15, r1
INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
}

INLINE void ApplicationGetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationGetUidFunc(Uid);
    175e:	e0 91 f5 20 	lds	r30, 0x20F5
    1762:	f0 91 f6 20 	lds	r31, 0x20F6
    1766:	ce 01       	movw	r24, r28
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	09 95       	icall

  ApplicationGetUid(UidBuffer);

  BufferToHexString(OutParam, TERMINAL_BUFFER_SIZE,
    176c:	97 01       	movw	r18, r14
    176e:	ae 01       	movw	r20, r28
    1770:	4f 5f       	subi	r20, 0xFF	; 255
    1772:	5f 4f       	sbci	r21, 0xFF	; 255
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	71 e0       	ldi	r23, 0x01	; 1
    1778:	c8 01       	movw	r24, r16
    177a:	65 d9       	rcall	.-3382   	; 0xa46 <BufferToHexString>
    UidBuffer, UidSize);

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    177c:	85 e6       	ldi	r24, 0x65	; 101
    177e:	a0 96       	adiw	r28, 0x20	; 32
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	08 95       	ret

00001792 <CommandSetUid>:

CommandStatusIdType CommandSetUid(const char* InParam)
{
    1792:	bf 92       	push	r11
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	a0 97       	sbiw	r28, 0x20	; 32
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	8c 01       	movw	r16, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;
    17b0:	c0 90 fb 20 	lds	r12, 0x20FB
    17b4:	d1 2c       	mov	r13, r1

  if (strcmp_P(InParam, PSTR(COMMAND_UID_RANDOM)) == 0) {
    17b6:	64 e3       	ldi	r22, 0x34	; 52
    17b8:	74 e0       	ldi	r23, 0x04	; 4
    17ba:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    17be:	89 2b       	or	r24, r25
    17c0:	41 f5       	brne	.+80     	; 0x1812 <CommandSetUid+0x80>
    /* Load with random bytes */
    for (uint8_t i=0; i<UidSize; i++) {
    17c2:	c1 14       	cp	r12, r1
    17c4:	d1 04       	cpc	r13, r1
    17c6:	89 f1       	breq	.+98     	; 0x182a <CommandSetUid+0x98>
    17c8:	b1 2c       	mov	r11, r1
    17ca:	ce 01       	movw	r24, r28
    17cc:	01 96       	adiw	r24, 0x01	; 1
    17ce:	7c 01       	movw	r14, r24
    17d0:	00 e0       	ldi	r16, 0x00	; 0
    17d2:	10 e0       	ldi	r17, 0x00	; 0
      UidBuffer[i] = RandomGetByte();
    17d4:	1d d9       	rcall	.-3526   	; 0xa10 <RandomGetByte>
    17d6:	f7 01       	movw	r30, r14
    17d8:	e0 0f       	add	r30, r16
    17da:	f1 1f       	adc	r31, r17
    17dc:	80 83       	st	Z, r24
  uint8_t UidBuffer[COMMAND_UID_BUFSIZE];
  uint16_t UidSize = ActiveConfiguration.UidSize;

  if (strcmp_P(InParam, PSTR(COMMAND_UID_RANDOM)) == 0) {
    /* Load with random bytes */
    for (uint8_t i=0; i<UidSize; i++) {
    17de:	b3 94       	inc	r11
    17e0:	0b 2d       	mov	r16, r11
    17e2:	10 e0       	ldi	r17, 0x00	; 0
    17e4:	0c 15       	cp	r16, r12
    17e6:	1d 05       	cpc	r17, r13
    17e8:	a8 f3       	brcs	.-22     	; 0x17d4 <CommandSetUid+0x42>
}

INLINE void ApplicationSetUid(ConfigurationUidType Uid) {
    ActiveConfiguration.ApplicationSetUidFunc(Uid);
    17ea:	e0 91 f7 20 	lds	r30, 0x20F7
    17ee:	f0 91 f8 20 	lds	r31, 0x20F8
    17f2:	c7 01       	movw	r24, r14
    17f4:	09 95       	icall
    }
  }

  ApplicationSetUid(UidBuffer);

  return COMMAND_INFO_OK_ID;
    17f6:	84 e6       	ldi	r24, 0x64	; 100
}
    17f8:	a0 96       	adiw	r28, 0x20	; 32
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	ff 90       	pop	r15
    1808:	ef 90       	pop	r14
    180a:	df 90       	pop	r13
    180c:	cf 90       	pop	r12
    180e:	bf 90       	pop	r11
    1810:	08 95       	ret
    for (uint8_t i=0; i<UidSize; i++) {
      UidBuffer[i] = RandomGetByte();
    }
  } else {
    /* Convert to Bytes */
    if (HexStringToBuffer(UidBuffer, sizeof(UidBuffer), InParam) != UidSize) {
    1812:	a8 01       	movw	r20, r16
    1814:	60 e2       	ldi	r22, 0x20	; 32
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	ce 01       	movw	r24, r28
    181a:	01 96       	adiw	r24, 0x01	; 1
    181c:	7c 01       	movw	r14, r24
    181e:	56 d9       	rcall	.-3412   	; 0xacc <HexStringToBuffer>
    1820:	8c 15       	cp	r24, r12
    1822:	9d 05       	cpc	r25, r13
    1824:	11 f3       	breq	.-60     	; 0x17ea <CommandSetUid+0x58>
      /* Malformed input. Abort */
      return COMMAND_ERR_INVALID_PARAM_ID;
    1826:	8a ec       	ldi	r24, 0xCA	; 202
    1828:	e7 cf       	rjmp	.-50     	; 0x17f8 <CommandSetUid+0x66>
    182a:	ce 01       	movw	r24, r28
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	7c 01       	movw	r14, r24
    1830:	dc cf       	rjmp	.-72     	; 0x17ea <CommandSetUid+0x58>

00001832 <CommandGetReadOnly>:
  return COMMAND_INFO_OK_ID;
}

CommandStatusIdType CommandGetReadOnly(char* OutParam)
{
  if (ActiveConfiguration.ReadOnly) {
    1832:	20 91 fc 20 	lds	r18, 0x20FC
    1836:	21 11       	cpse	r18, r1
    1838:	07 c0       	rjmp	.+14     	; 0x1848 <CommandGetReadOnly+0x16>
    OutParam[0] = COMMAND_CHAR_TRUE;
  } else {
    OutParam[0] = COMMAND_CHAR_FALSE;
    183a:	20 e3       	ldi	r18, 0x30	; 48
    183c:	fc 01       	movw	r30, r24
    183e:	20 83       	st	Z, r18
  }

  OutParam[1] = '\0';
    1840:	fc 01       	movw	r30, r24
    1842:	11 82       	std	Z+1, r1	; 0x01

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1844:	85 e6       	ldi	r24, 0x65	; 101
    1846:	08 95       	ret
}

CommandStatusIdType CommandGetReadOnly(char* OutParam)
{
  if (ActiveConfiguration.ReadOnly) {
    OutParam[0] = COMMAND_CHAR_TRUE;
    1848:	21 e3       	ldi	r18, 0x31	; 49
    184a:	fc 01       	movw	r30, r24
    184c:	20 83       	st	Z, r18
  } else {
    OutParam[0] = COMMAND_CHAR_FALSE;
  }

  OutParam[1] = '\0';
    184e:	fc 01       	movw	r30, r24
    1850:	11 82       	std	Z+1, r1	; 0x01

  return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1852:	85 e6       	ldi	r24, 0x65	; 101
    1854:	08 95       	ret

00001856 <CommandSetReadOnly>:

CommandStatusIdType CommandSetReadOnly(const char* InParam)
{
  if (InParam[1] == '\0') {
    1856:	fc 01       	movw	r30, r24
    1858:	21 81       	ldd	r18, Z+1	; 0x01
    185a:	21 11       	cpse	r18, r1
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <CommandSetReadOnly+0x12>
    if (InParam[0] == COMMAND_CHAR_TRUE) {
    185e:	80 81       	ld	r24, Z
    1860:	81 33       	cpi	r24, 0x31	; 49
    1862:	41 f0       	breq	.+16     	; 0x1874 <CommandSetReadOnly+0x1e>
      ActiveConfiguration.ReadOnly = true;
      return COMMAND_INFO_OK_ID;
    } else if (InParam[0] == COMMAND_CHAR_FALSE) {
    1864:	80 33       	cpi	r24, 0x30	; 48
    1866:	11 f0       	breq	.+4      	; 0x186c <CommandSetReadOnly+0x16>
      ActiveConfiguration.ReadOnly = false;
      return COMMAND_INFO_OK_ID;
    }
  }

  return COMMAND_ERR_INVALID_PARAM_ID;
    1868:	8a ec       	ldi	r24, 0xCA	; 202
}
    186a:	08 95       	ret
  if (InParam[1] == '\0') {
    if (InParam[0] == COMMAND_CHAR_TRUE) {
      ActiveConfiguration.ReadOnly = true;
      return COMMAND_INFO_OK_ID;
    } else if (InParam[0] == COMMAND_CHAR_FALSE) {
      ActiveConfiguration.ReadOnly = false;
    186c:	10 92 fc 20 	sts	0x20FC, r1
      return COMMAND_INFO_OK_ID;
    1870:	84 e6       	ldi	r24, 0x64	; 100
    1872:	08 95       	ret

CommandStatusIdType CommandSetReadOnly(const char* InParam)
{
  if (InParam[1] == '\0') {
    if (InParam[0] == COMMAND_CHAR_TRUE) {
      ActiveConfiguration.ReadOnly = true;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 93 fc 20 	sts	0x20FC, r24
      return COMMAND_INFO_OK_ID;
    187a:	84 e6       	ldi	r24, 0x64	; 100
    187c:	08 95       	ret

0000187e <CommandExecUpload>:
  return COMMAND_ERR_INVALID_PARAM_ID;
}

CommandStatusIdType CommandExecUpload(char* OutMessage)
{
    XModemReceive(MemoryUploadBlock);
    187e:	8d e4       	ldi	r24, 0x4D	; 77
    1880:	98 e0       	ldi	r25, 0x08	; 8
    1882:	eb d0       	rcall	.+470    	; 0x1a5a <XModemReceive>
    return COMMAND_INFO_XMODEM_WAIT_ID;
}
    1884:	8e e6       	ldi	r24, 0x6E	; 110
    1886:	08 95       	ret

00001888 <CommandExecDownload>:

CommandStatusIdType CommandExecDownload(char* OutMessage)
{
    XModemSend(MemoryDownloadBlock);
    1888:	85 e8       	ldi	r24, 0x85	; 133
    188a:	98 e0       	ldi	r25, 0x08	; 8
    188c:	fe d0       	rcall	.+508    	; 0x1a8a <XModemSend>
    return COMMAND_INFO_XMODEM_WAIT_ID;
}
    188e:	8e e6       	ldi	r24, 0x6E	; 110
    1890:	08 95       	ret

00001892 <CommandExecReset>:
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				USB.CTRLB &= ~USB_ATTACH_bm;
    1892:	e0 ec       	ldi	r30, 0xC0	; 192
    1894:	f4 e0       	ldi	r31, 0x04	; 4
    1896:	81 81       	ldd	r24, Z+1	; 0x01
    1898:	8e 7f       	andi	r24, 0xFE	; 254
    189a:	81 83       	std	Z+1, r24	; 0x01

CommandStatusIdType CommandExecReset(char* OutMessage)
{
  USB_Detach();
  USB_Disable();
    189c:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <USB_Disable>

  SystemReset();
    18a0:	0e 94 2b 04 	call	0x856	; 0x856 <SystemReset>

  return COMMAND_INFO_OK_ID;
}
    18a4:	84 e6       	ldi	r24, 0x64	; 100
    18a6:	08 95       	ret

000018a8 <CommandExecUpgrade>:
    18a8:	e0 ec       	ldi	r30, 0xC0	; 192
    18aa:	f4 e0       	ldi	r31, 0x04	; 4
    18ac:	81 81       	ldd	r24, Z+1	; 0x01
    18ae:	8e 7f       	andi	r24, 0xFE	; 254
    18b0:	81 83       	std	Z+1, r24	; 0x01

#ifdef SUPPORT_FIRMWARE_UPGRADE
CommandStatusIdType CommandExecUpgrade(char* OutMessage)
{
  USB_Detach();
  USB_Disable();
    18b2:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <USB_Disable>

  SystemEnterBootloader();
    18b6:	0e 94 32 04 	call	0x864	; 0x864 <SystemEnterBootloader>

  return COMMAND_INFO_OK_ID;
}
    18ba:	84 e6       	ldi	r24, 0x64	; 100
    18bc:	08 95       	ret

000018be <CommandGetMemSize>:
#endif

CommandStatusIdType CommandGetMemSize(char* OutParam)
{
  snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR("%u"), ActiveConfiguration.MemorySize);
    18be:	e9 ef       	ldi	r30, 0xF9	; 249
    18c0:	f0 e2       	ldi	r31, 0x20	; 32
    18c2:	21 81       	ldd	r18, Z+1	; 0x01
    18c4:	2f 93       	push	r18
    18c6:	20 81       	ld	r18, Z
    18c8:	2f 93       	push	r18
    18ca:	21 e3       	ldi	r18, 0x31	; 49
    18cc:	34 e0       	ldi	r19, 0x04	; 4
    18ce:	3f 93       	push	r19
    18d0:	2f 93       	push	r18
    18d2:	21 e0       	ldi	r18, 0x01	; 1
    18d4:	2f 93       	push	r18
    18d6:	1f 92       	push	r1
    18d8:	9f 93       	push	r25
    18da:	8f 93       	push	r24
    18dc:	0e 94 54 22 	call	0x44a8	; 0x44a8 <snprintf_P>

  return COMMAND_INFO_OK_WITH_TEXT_ID;
    18e0:	8d b7       	in	r24, 0x3d	; 61
    18e2:	9e b7       	in	r25, 0x3e	; 62
    18e4:	08 96       	adiw	r24, 0x08	; 8
    18e6:	8d bf       	out	0x3d, r24	; 61
    18e8:	9e bf       	out	0x3e, r25	; 62
}
    18ea:	85 e6       	ldi	r24, 0x65	; 101
    18ec:	08 95       	ret

000018ee <CommandGetUidSize>:

CommandStatusIdType CommandGetUidSize(char* OutParam)
{
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE, PSTR("%u"), ActiveConfiguration.UidSize);
    18ee:	20 91 fb 20 	lds	r18, 0x20FB
    18f2:	1f 92       	push	r1
    18f4:	2f 93       	push	r18
    18f6:	2e e2       	ldi	r18, 0x2E	; 46
    18f8:	34 e0       	ldi	r19, 0x04	; 4
    18fa:	3f 93       	push	r19
    18fc:	2f 93       	push	r18
    18fe:	21 e0       	ldi	r18, 0x01	; 1
    1900:	2f 93       	push	r18
    1902:	1f 92       	push	r1
    1904:	9f 93       	push	r25
    1906:	8f 93       	push	r24
    1908:	0e 94 54 22 	call	0x44a8	; 0x44a8 <snprintf_P>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
    190c:	8d b7       	in	r24, 0x3d	; 61
    190e:	9e b7       	in	r25, 0x3e	; 62
    1910:	08 96       	adiw	r24, 0x08	; 8
    1912:	8d bf       	out	0x3d, r24	; 61
    1914:	9e bf       	out	0x3e, r25	; 62
}
    1916:	85 e6       	ldi	r24, 0x65	; 101
    1918:	08 95       	ret

0000191a <CommandExecButton>:

CommandStatusIdType CommandExecButton(char* OutMessage)
{
    ButtonGetActionList(OutMessage, TERMINAL_BUFFER_SIZE);
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	71 e0       	ldi	r23, 0x01	; 1
    191e:	08 dd       	rcall	.-1520   	; 0x1330 <ButtonGetActionList>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1920:	85 e6       	ldi	r24, 0x65	; 101
    1922:	08 95       	ret

00001924 <CommandGetButton>:

CommandStatusIdType CommandGetButton(char* OutParam)
{
    ButtonGetActionByName(OutParam, TERMINAL_BUFFER_SIZE);
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	71 e0       	ldi	r23, 0x01	; 1
    1928:	3c dd       	rcall	.-1416   	; 0x13a2 <ButtonGetActionByName>

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    192a:	85 e6       	ldi	r24, 0x65	; 101
    192c:	08 95       	ret

0000192e <CommandSetButton>:

CommandStatusIdType CommandSetButton(const char* InParam)
{
    if (ButtonSetActionByName(InParam)) {
    192e:	47 dd       	rcall	.-1394   	; 0x13be <ButtonSetActionByName>
    1930:	81 11       	cpse	r24, r1
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <CommandSetButton+0xa>
        SettingsSave();
        return COMMAND_INFO_OK_ID;
    } else {
        return COMMAND_ERR_INVALID_PARAM_ID;
    1934:	8a ec       	ldi	r24, 0xCA	; 202
    }
}
    1936:	08 95       	ret
}

CommandStatusIdType CommandSetButton(const char* InParam)
{
    if (ButtonSetActionByName(InParam)) {
        SettingsSave();
    1938:	97 dd       	rcall	.-1234   	; 0x1468 <SettingsSave>
        return COMMAND_INFO_OK_ID;
    193a:	84 e6       	ldi	r24, 0x64	; 100
    193c:	08 95       	ret

0000193e <CommandGetSetting>:
    }
}

CommandStatusIdType CommandGetSetting(char* OutParam)
{
	SettingsGetActiveByName(OutParam, TERMINAL_BUFFER_SIZE);
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	71 e0       	ldi	r23, 0x01	; 1
    1942:	16 de       	rcall	.-980    	; 0x1570 <SettingsGetActiveByName>
	return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    1944:	85 e6       	ldi	r24, 0x65	; 101
    1946:	08 95       	ret

00001948 <CommandSetSetting>:

CommandStatusIdType CommandSetSetting(const char* InParam)
{
	if (SettingsSetActiveByName(InParam)) {
    1948:	1a de       	rcall	.-972    	; 0x157e <SettingsSetActiveByName>
    194a:	81 11       	cpse	r24, r1
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <CommandSetSetting+0xa>
		SettingsSave();
		return COMMAND_INFO_OK_ID;
	} else {
		return COMMAND_ERR_INVALID_PARAM_ID;
    194e:	8a ec       	ldi	r24, 0xCA	; 202
	}
}
    1950:	08 95       	ret
}

CommandStatusIdType CommandSetSetting(const char* InParam)
{
	if (SettingsSetActiveByName(InParam)) {
		SettingsSave();
    1952:	8a dd       	rcall	.-1260   	; 0x1468 <SettingsSave>
		return COMMAND_INFO_OK_ID;
    1954:	84 e6       	ldi	r24, 0x64	; 100
    1956:	08 95       	ret

00001958 <CommandExecClear>:
	}
}

CommandStatusIdType CommandExecClear(char* OutParam)
{
	MemoryClear();
    1958:	43 db       	rcall	.-2426   	; 0xfe0 <MemoryClear>
	return COMMAND_INFO_OK_ID;
}
    195a:	84 e6       	ldi	r24, 0x64	; 100
    195c:	08 95       	ret

0000195e <CommandExecHelp>:

CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    195e:	df 92       	push	r13
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	7c 01       	movw	r14, r24
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */
    196e:	cf ef       	ldi	r28, 0xFF	; 255
    1970:	d0 e0       	ldi	r29, 0x00	; 0
	return COMMAND_INFO_OK_ID;
}

CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    1972:	07 e5       	ldi	r16, 0x57	; 87
    1974:	15 e0       	ldi	r17, 0x05	; 5
            *OutMessage++ = c;
            CommandName++;
            ByteCount--;
        }

        *OutMessage++ = ',';
    1976:	8c e2       	ldi	r24, 0x2C	; 44
    1978:	d8 2e       	mov	r13, r24
CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
    197a:	b8 01       	movw	r22, r16
    197c:	80 e9       	ldi	r24, 0x90	; 144
    197e:	90 e2       	ldi	r25, 0x20	; 32
    1980:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1984:	89 2b       	or	r24, r25
    1986:	39 f1       	breq	.+78     	; 0x19d6 <CommandExecHelp+0x78>
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    1988:	f8 01       	movw	r30, r16
    198a:	44 91       	lpm	r20, Z+
    198c:	44 23       	and	r20, r20
    198e:	79 f1       	breq	.+94     	; 0x19ee <CommandExecHelp+0x90>
    1990:	c1 32       	cpi	r28, 0x21	; 33
    1992:	d1 05       	cpc	r29, r1
    1994:	60 f1       	brcs	.+88     	; 0x19ee <CommandExecHelp+0x90>
    1996:	d7 01       	movw	r26, r14
    1998:	f8 01       	movw	r30, r16
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <CommandExecHelp+0x46>
    199c:	c0 32       	cpi	r28, 0x20	; 32
    199e:	d1 05       	cpc	r29, r1
    19a0:	51 f0       	breq	.+20     	; 0x19b6 <CommandExecHelp+0x58>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cd 01       	movw	r24, r26
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	9c 01       	movw	r18, r24
            *OutMessage++ = c;
    19aa:	4c 93       	st	X, r20
            CommandName++;
    19ac:	31 96       	adiw	r30, 0x01	; 1
            ByteCount--;
    19ae:	21 97       	sbiw	r28, 0x01	; 1

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    19b0:	44 91       	lpm	r20, Z+
    19b2:	41 11       	cpse	r20, r1
    19b4:	f3 cf       	rjmp	.-26     	; 0x199c <CommandExecHelp+0x3e>
            *OutMessage++ = c;
            CommandName++;
            ByteCount--;
        }

        *OutMessage++ = ',';
    19b6:	79 01       	movw	r14, r18
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	e8 1a       	sub	r14, r24
    19bc:	f8 0a       	sbc	r15, r24
    19be:	f9 01       	movw	r30, r18
    19c0:	d0 82       	st	Z, r13
        ByteCount--;
    19c2:	21 97       	sbiw	r28, 0x01	; 1

        EntryPtr++;
    19c4:	0a 5e       	subi	r16, 0xEA	; 234
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
CommandStatusIdType CommandExecHelp(char* OutMessage)
{
    const CommandEntryType* EntryPtr = CommandTable;
    uint16_t ByteCount = TERMINAL_BUFFER_SIZE - 1; /* Account for '\0' */

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
    19c8:	b8 01       	movw	r22, r16
    19ca:	80 e9       	ldi	r24, 0x90	; 144
    19cc:	90 e2       	ldi	r25, 0x20	; 32
    19ce:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    19d2:	89 2b       	or	r24, r25
    19d4:	c9 f6       	brne	.-78     	; 0x1988 <CommandExecHelp+0x2a>
        ByteCount--;

        EntryPtr++;
    }

    *--OutMessage = '\0';
    19d6:	d7 01       	movw	r26, r14
    19d8:	11 97       	sbiw	r26, 0x01	; 1
    19da:	1c 92       	st	X, r1

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}
    19dc:	85 e6       	ldi	r24, 0x65	; 101
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	ff 90       	pop	r15
    19e8:	ef 90       	pop	r14
    19ea:	df 90       	pop	r13
    19ec:	08 95       	ret

    while(strcmp_P(COMMAND_LIST_END, EntryPtr->Command) != 0) {
        const char* CommandName = EntryPtr->Command;
        char c;

        while( (c = pgm_read_byte(CommandName)) != '\0' && ByteCount > 32) {
    19ee:	97 01       	movw	r18, r14
    19f0:	e2 cf       	rjmp	.-60     	; 0x19b6 <CommandExecHelp+0x58>

000019f2 <CommandGetRssi>:

    return COMMAND_INFO_OK_WITH_TEXT_ID;
}

CommandStatusIdType CommandGetRssi(char* OutParam)
{
    19f2:	fc 01       	movw	r30, r24
}

static inline
uint16_t AntennaLevelGet(void)
{
	ADCA.CH0.CTRL |= ADC_CH_START_bm;
    19f4:	20 91 20 02 	lds	r18, 0x0220
    19f8:	20 68       	ori	r18, 0x80	; 128
    19fa:	20 93 20 02 	sts	0x0220, r18
	while( !(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm) );
    19fe:	20 91 23 02 	lds	r18, 0x0223
    1a02:	20 ff       	sbrs	r18, 0
    1a04:	fc cf       	rjmp	.-8      	; 0x19fe <CommandGetRssi+0xc>

	ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	80 93 23 02 	sts	0x0223, r24

	int16_t Result = ADCA.CH0RES - ANTENNA_LEVEL_OFFSET;
    1a0c:	a0 91 10 02 	lds	r26, 0x0210
    1a10:	b0 91 11 02 	lds	r27, 0x0211
    1a14:	ae 5b       	subi	r26, 0xBE	; 190
    1a16:	b1 09       	sbc	r27, r1
    1a18:	b7 fd       	sbrc	r27, 7
    1a1a:	1c c0       	rjmp	.+56     	; 0x1a54 <CommandGetRssi+0x62>
	if (Result < 0) Result = 0;

	return (uint16_t) (((uint32_t) Result * ANTENNA_LEVEL_NUMERATOR) / ANTENNA_LEVEL_DENOMINATOR);
    1a1c:	29 e6       	ldi	r18, 0x69	; 105
    1a1e:	37 e5       	ldi	r19, 0x57	; 87
    1a20:	4b e0       	ldi	r20, 0x0B	; 11
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	0e 94 b4 21 	call	0x4368	; 0x4368 <__mulshisi3>
    1a28:	aa 27       	eor	r26, r26
    1a2a:	bb 27       	eor	r27, r27
    snprintf_P(OutParam, TERMINAL_BUFFER_SIZE,
    1a2c:	9f 93       	push	r25
    1a2e:	8f 93       	push	r24
    1a30:	27 e2       	ldi	r18, 0x27	; 39
    1a32:	34 e0       	ldi	r19, 0x04	; 4
    1a34:	3f 93       	push	r19
    1a36:	2f 93       	push	r18
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	8f 93       	push	r24
    1a3c:	1f 92       	push	r1
    1a3e:	ff 93       	push	r31
    1a40:	ef 93       	push	r30
    1a42:	0e 94 54 22 	call	0x44a8	; 0x44a8 <snprintf_P>
        PSTR("%5u mV"), AntennaLevelGet());


    return COMMAND_INFO_OK_WITH_TEXT_ID;
    1a46:	8d b7       	in	r24, 0x3d	; 61
    1a48:	9e b7       	in	r25, 0x3e	; 62
    1a4a:	08 96       	adiw	r24, 0x08	; 8
    1a4c:	8d bf       	out	0x3d, r24	; 61
    1a4e:	9e bf       	out	0x3e, r25	; 62
}
    1a50:	85 e6       	ldi	r24, 0x65	; 101
    1a52:	08 95       	ret
    1a54:	a0 e0       	ldi	r26, 0x00	; 0
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e1 cf       	rjmp	.-62     	; 0x1a1c <CommandGetRssi+0x2a>

00001a5a <XModemReceive>:
    return Checksum;
}

void XModemReceive(XModemCallbackType TheCallbackFunc)
{
    State = STATE_RECEIVE_INIT;
    1a5a:	21 e0       	ldi	r18, 0x01	; 1
    1a5c:	20 93 a2 20 	sts	0x20A2, r18
    CurrentFrameNumber = FIRST_FRAME_NUMBER;
    1a60:	20 93 a1 20 	sts	0x20A1, r18
    RetryCount = RECV_INIT_COUNT;
    1a64:	24 e1       	ldi	r18, 0x14	; 20
    1a66:	20 93 9e 20 	sts	0x209E, r18
    RetryTimeout = RECV_INIT_TIMEOUT;
    1a6a:	25 e0       	ldi	r18, 0x05	; 5
    1a6c:	20 93 9d 20 	sts	0x209D, r18
    BlockAddress = 0;
    1a70:	10 92 97 20 	sts	0x2097, r1
    1a74:	10 92 98 20 	sts	0x2098, r1
    1a78:	10 92 99 20 	sts	0x2099, r1
    1a7c:	10 92 9a 20 	sts	0x209A, r1

    CallbackFunc = TheCallbackFunc;
    1a80:	80 93 95 20 	sts	0x2095, r24
    1a84:	90 93 96 20 	sts	0x2096, r25
    1a88:	08 95       	ret

00001a8a <XModemSend>:
}

void XModemSend(XModemCallbackType TheCallbackFunc)
{
    State = STATE_SEND_INIT;
    1a8a:	27 e0       	ldi	r18, 0x07	; 7
    1a8c:	20 93 a2 20 	sts	0x20A2, r18
    RetryTimeout = SEND_INIT_TIMEOUT;
    1a90:	24 e6       	ldi	r18, 0x64	; 100
    1a92:	20 93 9d 20 	sts	0x209D, r18
    BlockAddress = 0;
    1a96:	10 92 97 20 	sts	0x2097, r1
    1a9a:	10 92 98 20 	sts	0x2098, r1
    1a9e:	10 92 99 20 	sts	0x2099, r1
    1aa2:	10 92 9a 20 	sts	0x209A, r1

    CallbackFunc = TheCallbackFunc;
    1aa6:	80 93 95 20 	sts	0x2095, r24
    1aaa:	90 93 96 20 	sts	0x2096, r25
    1aae:	08 95       	ret

00001ab0 <XModemProcessByte>:
}

bool XModemProcessByte(uint8_t Byte)
{
    1ab0:	cf 93       	push	r28
    switch(State) {
    1ab2:	40 91 a2 20 	lds	r20, 0x20A2
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	fa 01       	movw	r30, r20
    1aba:	31 97       	sbiw	r30, 0x01	; 1
    1abc:	e9 30       	cpi	r30, 0x09	; 9
    1abe:	f1 05       	cpc	r31, r1
    1ac0:	20 f0       	brcs	.+8      	; 0x1aca <XModemProcessByte+0x1a>
        /* Receive Ack */
        State = STATE_OFF;
        break;

    default:
        return false;
    1ac2:	c0 e0       	ldi	r28, 0x00	; 0
        break;
    }

    return true;
}
    1ac4:	8c 2f       	mov	r24, r28
    1ac6:	cf 91       	pop	r28
    1ac8:	08 95       	ret
    CallbackFunc = TheCallbackFunc;
}

bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    1aca:	e2 50       	subi	r30, 0x02	; 2
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	0c 94 ae 21 	jmp	0x435c	; 0x435c <__tablejump2__>
        }

        break;

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
    1ad2:	20 91 a0 20 	lds	r18, 0x20A0
    1ad6:	90 91 a1 20 	lds	r25, 0x20A1
    1ada:	29 17       	cp	r18, r25
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <XModemProcessByte+0x30>
    1ade:	dd c0       	rjmp	.+442    	; 0x1c9a <XModemProcessByte+0x1ea>
            } else {
                /* Data seems to be damaged */
                TerminalSendByte(BYTE_NAK);
                State = STATE_RECEIVE_WAIT;
            }
        } else if (ReceivedFrameNumber == (CurrentFrameNumber - 1)) {
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	89 2f       	mov	r24, r25
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	28 17       	cp	r18, r24
    1aea:	39 07       	cpc	r19, r25
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <XModemProcessByte+0x40>
    1aee:	20 c1       	rjmp	.+576    	; 0x1d30 <XModemProcessByte+0x280>
INLINE void TerminalSendByte(uint8_t Byte) { CDC_Device_SendByte(&TerminalHandle, Byte); }
    1af0:	68 e1       	ldi	r22, 0x18	; 24
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e2       	ldi	r25, 0x20	; 32
    1af6:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
            TerminalSendByte(BYTE_ACK);
            State = STATE_RECEIVE_WAIT;
        } else {
            /* This frame is completely out of order. Just cancel */
            TerminalSendByte(BYTE_CAN);
            State = STATE_OFF;
    1afa:	10 92 a2 20 	sts	0x20A2, r1
    default:
        return false;
        break;
    }

    return true;
    1afe:	c1 e0       	ldi	r28, 0x01	; 1
}
    1b00:	8c 2f       	mov	r24, r28
    1b02:	cf 91       	pop	r28
    1b04:	08 95       	ret

        break;

    case STATE_SEND_INIT:
        /* Start sending on NAK */
        if (Byte == BYTE_NAK) {
    1b06:	85 31       	cpi	r24, 0x15	; 21
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <XModemProcessByte+0x5c>
    1b0a:	50 c0       	rjmp	.+160    	; 0x1bac <XModemProcessByte+0xfc>
        }

        /* Fallthrough */

    case STATE_SEND_WAIT:
        if (Byte == BYTE_CAN) {
    1b0c:	88 31       	cpi	r24, 0x18	; 24
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <XModemProcessByte+0x62>
    1b10:	06 c1       	rjmp	.+524    	; 0x1d1e <XModemProcessByte+0x26e>
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
    1b12:	86 30       	cpi	r24, 0x06	; 6
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <XModemProcessByte+0x68>
    1b16:	29 c1       	rjmp	.+594    	; 0x1d6a <XModemProcessByte+0x2ba>
                BlockAddress += XMODEM_BLOCK_SIZE;
            } else {
                TerminalSendByte(BYTE_EOT);
                State = STATE_SEND_EOT;
            }
        } else if (Byte == BYTE_NAK){
    1b18:	85 31       	cpi	r24, 0x15	; 21
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <XModemProcessByte+0x6e>
    1b1c:	98 c0       	rjmp	.+304    	; 0x1c4e <XModemProcessByte+0x19e>
    default:
        return false;
        break;
    }

    return true;
    1b1e:	c1 e0       	ldi	r28, 0x01	; 1
}
    1b20:	8c 2f       	mov	r24, r28
    1b22:	cf 91       	pop	r28
    1b24:	08 95       	ret

        break;

    case STATE_RECEIVE_FRAMENUM1:
        /* Store frame number */
        ReceivedFrameNumber = Byte;
    1b26:	80 93 a0 20 	sts	0x20A0, r24
        State = STATE_RECEIVE_FRAMENUM2;
    1b2a:	84 e0       	ldi	r24, 0x04	; 4
    1b2c:	80 93 a2 20 	sts	0x20A2, r24
    default:
        return false;
        break;
    }

    return true;
    1b30:	c1 e0       	ldi	r28, 0x01	; 1
}
    1b32:	8c 2f       	mov	r24, r28
    1b34:	cf 91       	pop	r28
    1b36:	08 95       	ret
        ReceivedFrameNumber = Byte;
        State = STATE_RECEIVE_FRAMENUM2;
        break;

    case STATE_RECEIVE_FRAMENUM2:
        if (Byte == (255 - ReceivedFrameNumber)) {
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	40 91 a0 20 	lds	r20, 0x20A0
    1b3e:	2f ef       	ldi	r18, 0xFF	; 255
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	24 1b       	sub	r18, r20
    1b44:	31 09       	sbc	r19, r1
    1b46:	82 17       	cp	r24, r18
    1b48:	93 07       	cpc	r25, r19
    1b4a:	31 f5       	brne	.+76     	; 0x1b98 <XModemProcessByte+0xe8>
            /* frame-number check passed. */
            State = STATE_RECEIVE_DATA;
    1b4c:	85 e0       	ldi	r24, 0x05	; 5
    1b4e:	80 93 a2 20 	sts	0x20A2, r24
    default:
        return false;
        break;
    }

    return true;
    1b52:	c1 e0       	ldi	r28, 0x01	; 1
    1b54:	b7 cf       	rjmp	.-146    	; 0x1ac4 <XModemProcessByte+0x14>
bool XModemProcessByte(uint8_t Byte)
{
    switch(State) {
    case STATE_RECEIVE_INIT:
    case STATE_RECEIVE_WAIT:
        if (Byte == BYTE_SOH) {
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <XModemProcessByte+0xac>
    1b5a:	ec c0       	rjmp	.+472    	; 0x1d34 <XModemProcessByte+0x284>
            /* Next frame incoming */
            BufferIdx = 0;
            Checksum = CHECKSUM_INIT_VALUE;
            State = STATE_RECEIVE_FRAMENUM1;
        } else if (Byte == BYTE_EOT) {
    1b5c:	84 30       	cpi	r24, 0x04	; 4
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <XModemProcessByte+0xb2>
    1b60:	de c0       	rjmp	.+444    	; 0x1d1e <XModemProcessByte+0x26e>
            /* Transmission finished */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_CAN) {
    1b62:	88 31       	cpi	r24, 0x18	; 24
    1b64:	51 f2       	breq	.-108    	; 0x1afa <XModemProcessByte+0x4a>
    default:
        return false;
        break;
    }

    return true;
    1b66:	c1 e0       	ldi	r28, 0x01	; 1
    1b68:	db cf       	rjmp	.-74     	; 0x1b20 <XModemProcessByte+0x70>

        break;

    case STATE_RECEIVE_DATA:
        /* Process byte and update checksum */
        TerminalBuffer[BufferIdx++] = Byte;
    1b6a:	40 91 9b 20 	lds	r20, 0x209B
    1b6e:	50 91 9c 20 	lds	r21, 0x209C
    1b72:	9a 01       	movw	r18, r20
    1b74:	2f 5f       	subi	r18, 0xFF	; 255
    1b76:	3f 4f       	sbci	r19, 0xFF	; 255
    1b78:	20 93 9b 20 	sts	0x209B, r18
    1b7c:	30 93 9c 20 	sts	0x209C, r19
    1b80:	fa 01       	movw	r30, r20
    1b82:	e0 5f       	subi	r30, 0xF0	; 240
    1b84:	fe 4d       	sbci	r31, 0xDE	; 222
    1b86:	80 83       	st	Z, r24

        if (BufferIdx == XMODEM_BLOCK_SIZE) {
    1b88:	20 38       	cpi	r18, 0x80	; 128
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	41 f6       	brne	.-112    	; 0x1b1e <XModemProcessByte+0x6e>
            /* Block full */
            State = STATE_RECEIVE_PROCESS;
    1b8e:	86 e0       	ldi	r24, 0x06	; 6
    1b90:	80 93 a2 20 	sts	0x20A2, r24
    default:
        return false;
        break;
    }

    return true;
    1b94:	c1 e0       	ldi	r28, 0x01	; 1
    1b96:	96 cf       	rjmp	.-212    	; 0x1ac4 <XModemProcessByte+0x14>
    1b98:	65 e1       	ldi	r22, 0x15	; 21
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e2       	ldi	r25, 0x20	; 32
    1b9e:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
                State = STATE_RECEIVE_WAIT;
            }
        } else if (ReceivedFrameNumber == (CurrentFrameNumber - 1)) {
            /* This is a retransmission */
            TerminalSendByte(BYTE_ACK);
            State = STATE_RECEIVE_WAIT;
    1ba2:	82 e0       	ldi	r24, 0x02	; 2
    1ba4:	80 93 a2 20 	sts	0x20A2, r24
    default:
        return false;
        break;
    }

    return true;
    1ba8:	c1 e0       	ldi	r28, 0x01	; 1
    1baa:	8c cf       	rjmp	.-232    	; 0x1ac4 <XModemProcessByte+0x14>
    1bac:	81 e0       	ldi	r24, 0x01	; 1
            /* Cancel */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
        } else if (Byte == BYTE_ACK) {
            /* Acknowledge. Proceed to next frame, get data and calc checksum */
            CurrentFrameNumber++;
    1bae:	80 93 a1 20 	sts	0x20A1, r24

            if (CallbackFunc(TerminalBuffer, BlockAddress, XMODEM_BLOCK_SIZE)) {
    1bb2:	40 91 97 20 	lds	r20, 0x2097
    1bb6:	50 91 98 20 	lds	r21, 0x2098
    1bba:	60 91 99 20 	lds	r22, 0x2099
    1bbe:	70 91 9a 20 	lds	r23, 0x209A
    1bc2:	e0 91 95 20 	lds	r30, 0x2095
    1bc6:	f0 91 96 20 	lds	r31, 0x2096
    1bca:	20 e8       	ldi	r18, 0x80	; 128
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	80 e1       	ldi	r24, 0x10	; 16
    1bd0:	91 e2       	ldi	r25, 0x21	; 33
    1bd2:	09 95       	icall
    1bd4:	c8 2f       	mov	r28, r24
    1bd6:	88 23       	and	r24, r24
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <XModemProcessByte+0x12c>
    1bda:	b7 c0       	rjmp	.+366    	; 0x1d4a <XModemProcessByte+0x29a>
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e2       	ldi	r25, 0x20	; 32
    1be2:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
    1be6:	60 91 a1 20 	lds	r22, 0x20A1
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e2       	ldi	r25, 0x20	; 32
    1bee:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
                TerminalSendByte(BYTE_SOH);
                TerminalSendByte(CurrentFrameNumber);
                TerminalSendByte(255 - CurrentFrameNumber);
    1bf2:	60 91 a1 20 	lds	r22, 0x20A1
    1bf6:	60 95       	com	r22
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e2       	ldi	r25, 0x20	; 32
    1bfc:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
                TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
    1c00:	60 e8       	ldi	r22, 0x80	; 128
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	80 e1       	ldi	r24, 0x10	; 16
    1c06:	91 e2       	ldi	r25, 0x21	; 33
    1c08:	e0 dc       	rcall	.-1600   	; 0x15ca <TerminalSendBlock>
    1c0a:	e0 e1       	ldi	r30, 0x10	; 16
    1c0c:	f1 e2       	ldi	r31, 0x21	; 33
static uint32_t BlockAddress;

static XModemCallbackType CallbackFunc;

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        Checksum += *DataPtr++;
    1c10:	81 91       	ld	r24, Z+
    1c12:	68 0f       	add	r22, r24

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    1c14:	81 e2       	ldi	r24, 0x21	; 33
    1c16:	e0 39       	cpi	r30, 0x90	; 144
    1c18:	f8 07       	cpc	r31, r24
    1c1a:	d1 f7       	brne	.-12     	; 0x1c10 <XModemProcessByte+0x160>
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e2       	ldi	r25, 0x20	; 32
    1c20:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
                TerminalSendByte(CurrentFrameNumber);
                TerminalSendByte(255 - CurrentFrameNumber);
                TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
                TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));

                BlockAddress += XMODEM_BLOCK_SIZE;
    1c24:	40 91 97 20 	lds	r20, 0x2097
    1c28:	50 91 98 20 	lds	r21, 0x2098
    1c2c:	60 91 99 20 	lds	r22, 0x2099
    1c30:	70 91 9a 20 	lds	r23, 0x209A
    1c34:	40 58       	subi	r20, 0x80	; 128
    1c36:	5f 4f       	sbci	r21, 0xFF	; 255
    1c38:	6f 4f       	sbci	r22, 0xFF	; 255
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	40 93 97 20 	sts	0x2097, r20
    1c40:	50 93 98 20 	sts	0x2098, r21
    1c44:	60 93 99 20 	sts	0x2099, r22
    1c48:	70 93 9a 20 	sts	0x209A, r23
    1c4c:	3b cf       	rjmp	.-394    	; 0x1ac4 <XModemProcessByte+0x14>
    1c4e:	61 e0       	ldi	r22, 0x01	; 1
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e2       	ldi	r25, 0x20	; 32
    1c54:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
    1c58:	60 91 a1 20 	lds	r22, 0x20A1
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e2       	ldi	r25, 0x20	; 32
    1c60:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
            }
        } else if (Byte == BYTE_NAK){
            /* Resend frame */
            TerminalSendByte(BYTE_SOH);
            TerminalSendByte(CurrentFrameNumber);
            TerminalSendByte(255 - CurrentFrameNumber);
    1c64:	60 91 a1 20 	lds	r22, 0x20A1
    1c68:	60 95       	com	r22
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e2       	ldi	r25, 0x20	; 32
    1c6e:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
            TerminalSendBlock(TerminalBuffer, XMODEM_BLOCK_SIZE);
    1c72:	60 e8       	ldi	r22, 0x80	; 128
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	80 e1       	ldi	r24, 0x10	; 16
    1c78:	91 e2       	ldi	r25, 0x21	; 33
    1c7a:	a7 dc       	rcall	.-1714   	; 0x15ca <TerminalSendBlock>
    1c7c:	e0 e1       	ldi	r30, 0x10	; 16
    1c7e:	f1 e2       	ldi	r31, 0x21	; 33
static uint32_t BlockAddress;

static XModemCallbackType CallbackFunc;

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        Checksum += *DataPtr++;
    1c82:	81 91       	ld	r24, Z+
    1c84:	68 0f       	add	r22, r24

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    1c86:	21 e2       	ldi	r18, 0x21	; 33
    1c88:	e0 39       	cpi	r30, 0x90	; 144
    1c8a:	f2 07       	cpc	r31, r18
    1c8c:	d1 f7       	brne	.-12     	; 0x1c82 <XModemProcessByte+0x1d2>
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e2       	ldi	r25, 0x20	; 32
    1c92:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
    default:
        return false;
        break;
    }

    return true;
    1c96:	c1 e0       	ldi	r28, 0x01	; 1
    1c98:	43 cf       	rjmp	.-378    	; 0x1b20 <XModemProcessByte+0x70>
    1c9a:	e0 e1       	ldi	r30, 0x10	; 16
    1c9c:	f1 e2       	ldi	r31, 0x21	; 33
        }

        break;

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        Checksum += *DataPtr++;
    1ca0:	21 91       	ld	r18, Z+
    1ca2:	92 0f       	add	r25, r18

static uint8_t CalcChecksum(const void* Buffer, uint16_t ByteCount) {
    uint8_t Checksum = CHECKSUM_INIT_VALUE;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    1ca4:	21 e2       	ldi	r18, 0x21	; 33
    1ca6:	e0 39       	cpi	r30, 0x90	; 144
    1ca8:	f2 07       	cpc	r31, r18
    1caa:	d1 f7       	brne	.-12     	; 0x1ca0 <XModemProcessByte+0x1f0>

    case STATE_RECEIVE_PROCESS:
        if (ReceivedFrameNumber == CurrentFrameNumber) {
            /* This is the expected frame. Calculate and verify checksum */

            if (CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE) == Byte) {
    1cac:	89 13       	cpse	r24, r25
    1cae:	74 cf       	rjmp	.-280    	; 0x1b98 <XModemProcessByte+0xe8>
                /* Checksum is valid. Pass received data to callback function */
                if (CallbackFunc(TerminalBuffer, BlockAddress, XMODEM_BLOCK_SIZE)) {
    1cb0:	40 91 97 20 	lds	r20, 0x2097
    1cb4:	50 91 98 20 	lds	r21, 0x2098
    1cb8:	60 91 99 20 	lds	r22, 0x2099
    1cbc:	70 91 9a 20 	lds	r23, 0x209A
    1cc0:	e0 91 95 20 	lds	r30, 0x2095
    1cc4:	f0 91 96 20 	lds	r31, 0x2096
    1cc8:	20 e8       	ldi	r18, 0x80	; 128
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	80 e1       	ldi	r24, 0x10	; 16
    1cce:	91 e2       	ldi	r25, 0x21	; 33
    1cd0:	09 95       	icall
    1cd2:	c8 2f       	mov	r28, r24
    1cd4:	88 23       	and	r24, r24
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <XModemProcessByte+0x22a>
    1cd8:	42 c0       	rjmp	.+132    	; 0x1d5e <XModemProcessByte+0x2ae>
                    /* Proceed to next frame and send ACK */
                    CurrentFrameNumber++;
    1cda:	80 91 a1 20 	lds	r24, 0x20A1
    1cde:	8f 5f       	subi	r24, 0xFF	; 255
    1ce0:	80 93 a1 20 	sts	0x20A1, r24
                    BlockAddress += XMODEM_BLOCK_SIZE;
    1ce4:	40 91 97 20 	lds	r20, 0x2097
    1ce8:	50 91 98 20 	lds	r21, 0x2098
    1cec:	60 91 99 20 	lds	r22, 0x2099
    1cf0:	70 91 9a 20 	lds	r23, 0x209A
    1cf4:	40 58       	subi	r20, 0x80	; 128
    1cf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf8:	6f 4f       	sbci	r22, 0xFF	; 255
    1cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfc:	40 93 97 20 	sts	0x2097, r20
    1d00:	50 93 98 20 	sts	0x2098, r21
    1d04:	60 93 99 20 	sts	0x2099, r22
    1d08:	70 93 9a 20 	sts	0x209A, r23
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    1d0c:	66 e0       	ldi	r22, 0x06	; 6
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e2       	ldi	r25, 0x20	; 32
    1d12:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
                    TerminalSendChar(BYTE_ACK);
                    State = STATE_RECEIVE_WAIT;
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	80 93 a2 20 	sts	0x20A2, r24
    1d1c:	d3 ce       	rjmp	.-602    	; 0x1ac4 <XModemProcessByte+0x14>
INLINE void TerminalSendByte(uint8_t Byte) { CDC_Device_SendByte(&TerminalHandle, Byte); }
    1d1e:	66 e0       	ldi	r22, 0x06	; 6
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e2       	ldi	r25, 0x20	; 32
    1d24:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
            Checksum = CHECKSUM_INIT_VALUE;
            State = STATE_RECEIVE_FRAMENUM1;
        } else if (Byte == BYTE_EOT) {
            /* Transmission finished */
            TerminalSendByte(BYTE_ACK);
            State = STATE_OFF;
    1d28:	10 92 a2 20 	sts	0x20A2, r1
    default:
        return false;
        break;
    }

    return true;
    1d2c:	c1 e0       	ldi	r28, 0x01	; 1
    1d2e:	ca ce       	rjmp	.-620    	; 0x1ac4 <XModemProcessByte+0x14>
    1d30:	66 e0       	ldi	r22, 0x06	; 6
    1d32:	33 cf       	rjmp	.-410    	; 0x1b9a <XModemProcessByte+0xea>
    switch(State) {
    case STATE_RECEIVE_INIT:
    case STATE_RECEIVE_WAIT:
        if (Byte == BYTE_SOH) {
            /* Next frame incoming */
            BufferIdx = 0;
    1d34:	10 92 9b 20 	sts	0x209B, r1
    1d38:	10 92 9c 20 	sts	0x209C, r1
            Checksum = CHECKSUM_INIT_VALUE;
    1d3c:	10 92 9f 20 	sts	0x209F, r1
            State = STATE_RECEIVE_FRAMENUM1;
    1d40:	83 e0       	ldi	r24, 0x03	; 3
    1d42:	80 93 a2 20 	sts	0x20A2, r24
    default:
        return false;
        break;
    }

    return true;
    1d46:	c1 e0       	ldi	r28, 0x01	; 1
    1d48:	bd ce       	rjmp	.-646    	; 0x1ac4 <XModemProcessByte+0x14>
    1d4a:	64 e0       	ldi	r22, 0x04	; 4
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e2       	ldi	r25, 0x20	; 32
    1d50:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
                TerminalSendByte(CalcChecksum(TerminalBuffer, XMODEM_BLOCK_SIZE));

                BlockAddress += XMODEM_BLOCK_SIZE;
            } else {
                TerminalSendByte(BYTE_EOT);
                State = STATE_SEND_EOT;
    1d54:	89 e0       	ldi	r24, 0x09	; 9
    1d56:	80 93 a2 20 	sts	0x20A2, r24
    default:
        return false;
        break;
    }

    return true;
    1d5a:	c1 e0       	ldi	r28, 0x01	; 1
    1d5c:	b3 ce       	rjmp	.-666    	; 0x1ac4 <XModemProcessByte+0x14>
    1d5e:	68 e1       	ldi	r22, 0x18	; 24
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e2       	ldi	r25, 0x20	; 32
    1d64:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
    1d68:	c3 ce       	rjmp	.-634    	; 0x1af0 <XModemProcessByte+0x40>
    1d6a:	80 91 a1 20 	lds	r24, 0x20A1
    1d6e:	8f 5f       	subi	r24, 0xFF	; 255
    1d70:	1e cf       	rjmp	.-452    	; 0x1bae <XModemProcessByte+0xfe>

00001d72 <XModemTick>:
}

void XModemTick(void)
{
    /* Timeouts go here */
    switch(State) {
    1d72:	80 91 a2 20 	lds	r24, 0x20A2
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	71 f0       	breq	.+28     	; 0x1d96 <XModemTick+0x24>
    1d7a:	87 30       	cpi	r24, 0x07	; 7
    1d7c:	59 f4       	brne	.+22     	; 0x1d94 <XModemTick+0x22>
            RetryTimeout = RECV_INIT_TIMEOUT;
        }
        break;

    case STATE_SEND_INIT:
        if (RetryTimeout-- == 0) {
    1d7e:	80 91 9d 20 	lds	r24, 0x209D
    1d82:	9f ef       	ldi	r25, 0xFF	; 255
    1d84:	98 0f       	add	r25, r24
    1d86:	90 93 9d 20 	sts	0x209D, r25
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <XModemTick+0x20>
            /* Abort */
            State = STATE_OFF;
    1d8e:	10 92 a2 20 	sts	0x20A2, r1
    1d92:	08 95       	ret
    1d94:	08 95       	ret
void XModemTick(void)
{
    /* Timeouts go here */
    switch(State) {
    case STATE_RECEIVE_INIT:
        if (RetryTimeout-- == 0) {
    1d96:	80 91 9d 20 	lds	r24, 0x209D
    1d9a:	9f ef       	ldi	r25, 0xFF	; 255
    1d9c:	98 0f       	add	r25, r24
    1d9e:	90 93 9d 20 	sts	0x209D, r25
    1da2:	81 11       	cpse	r24, r1
    1da4:	f6 cf       	rjmp	.-20     	; 0x1d92 <XModemTick+0x20>
            if (RetryCount-- > 0) {
    1da6:	80 91 9e 20 	lds	r24, 0x209E
    1daa:	9f ef       	ldi	r25, 0xFF	; 255
    1dac:	98 0f       	add	r25, r24
    1dae:	90 93 9e 20 	sts	0x209E, r25
    1db2:	81 11       	cpse	r24, r1
    1db4:	06 c0       	rjmp	.+12     	; 0x1dc2 <XModemTick+0x50>
                /* Put out communication request */
                TerminalSendChar(BYTE_NAK);
            } else {
                /* Just shut off after some time. */
                State = STATE_OFF;
    1db6:	10 92 a2 20 	sts	0x20A2, r1
            }

            RetryTimeout = RECV_INIT_TIMEOUT;
    1dba:	85 e0       	ldi	r24, 0x05	; 5
    1dbc:	80 93 9d 20 	sts	0x209D, r24
    1dc0:	08 95       	ret
void EVENT_USB_Device_Connect(void);
void EVENT_USB_Device_Disconnect(void);
void EVENT_USB_Device_ConfigurationChanged(void);
void EVENT_USB_Device_ControlRequest(void);

INLINE void TerminalSendChar(char c) { CDC_Device_SendByte(&TerminalHandle, c); }
    1dc2:	65 e1       	ldi	r22, 0x15	; 21
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e2       	ldi	r25, 0x20	; 32
    1dc8:	0e 94 29 20 	call	0x4052	; 0x4052 <CDC_Device_SendByte>
    1dcc:	f6 cf       	rjmp	.-20     	; 0x1dba <XModemTick+0x48>

00001dce <CommandLineProcessByte>:
void CommandLineInit(void)
{
  BufferIdx = 0;
}

bool CommandLineProcessByte(uint8_t Byte) {
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
  if (IS_CHARACTER(Byte)){
    1dd4:	9f eb       	ldi	r25, 0xBF	; 191
    1dd6:	98 0f       	add	r25, r24
    1dd8:	9a 31       	cpi	r25, 0x1A	; 26
    1dda:	28 f0       	brcs	.+10     	; 0x1de6 <CommandLineProcessByte+0x18>
    1ddc:	9f e9       	ldi	r25, 0x9F	; 159
    1dde:	98 0f       	add	r25, r24
    1de0:	9a 31       	cpi	r25, 0x1A	; 26
    1de2:	c0 f4       	brcc	.+48     	; 0x1e14 <CommandLineProcessByte+0x46>
    /* Store uppercase character */
    if (IS_LOWERCASE(Byte)) {
      Byte = TO_UPPERCASE(Byte);
    1de4:	80 52       	subi	r24, 0x20	; 32
    }

    /* Prevent buffer overflow and account for '\0' */
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
    1de6:	20 91 a3 20 	lds	r18, 0x20A3
    1dea:	30 91 a4 20 	lds	r19, 0x20A4
    1dee:	2f 3f       	cpi	r18, 0xFF	; 255
    1df0:	31 05       	cpc	r19, r1
    1df2:	58 f4       	brcc	.+22     	; 0x1e0a <CommandLineProcessByte+0x3c>
      TerminalBuffer[BufferIdx++] = Byte;
    1df4:	a9 01       	movw	r20, r18
    1df6:	4f 5f       	subi	r20, 0xFF	; 255
    1df8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfa:	40 93 a3 20 	sts	0x20A3, r20
    1dfe:	50 93 a4 20 	sts	0x20A4, r21
    1e02:	f9 01       	movw	r30, r18
    1e04:	e0 5f       	subi	r30, 0xF0	; 240
    1e06:	fe 4d       	sbci	r31, 0xDE	; 222
    1e08:	80 83       	st	Z, r24
  } else {
    /* Ignore other chars */
  }

  return true;
}
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	08 95       	ret
{
  BufferIdx = 0;
}

bool CommandLineProcessByte(uint8_t Byte) {
  if (IS_CHARACTER(Byte)){
    1e14:	90 ed       	ldi	r25, 0xD0	; 208
    1e16:	98 0f       	add	r25, r24
    1e18:	9a 30       	cpi	r25, 0x0A	; 10
    1e1a:	28 f3       	brcs	.-54     	; 0x1de6 <CommandLineProcessByte+0x18>
    1e1c:	8f 35       	cpi	r24, 0x5F	; 95
    1e1e:	19 f3       	breq	.-58     	; 0x1de6 <CommandLineProcessByte+0x18>
    1e20:	98 2f       	mov	r25, r24
    1e22:	9d 7f       	andi	r25, 0xFD	; 253
    1e24:	9d 33       	cpi	r25, 0x3D	; 61
    1e26:	f9 f2       	breq	.-66     	; 0x1de6 <CommandLineProcessByte+0x18>

    /* Prevent buffer overflow and account for '\0' */
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
      TerminalBuffer[BufferIdx++] = Byte;
    }
  }else if (Byte == '\r') {
    1e28:	8d 30       	cpi	r24, 0x0D	; 13
    1e2a:	a9 f0       	breq	.+42     	; 0x1e56 <CommandLineProcessByte+0x88>
    /* Process on \r. Terminate string and decode. */
    TerminalBuffer[BufferIdx] = '\0';
    BufferIdx = 0;

    DecodeCommand();
  }else if (Byte == '\b') {
    1e2c:	88 30       	cpi	r24, 0x08	; 8
    1e2e:	39 f0       	breq	.+14     	; 0x1e3e <CommandLineProcessByte+0x70>
    /* Backspace. Delete last character in buffer. */
    if (BufferIdx > 0) {
      BufferIdx--;
    }
  } else if (Byte == 0x1B){
    1e30:	8b 31       	cpi	r24, 0x1B	; 27
    1e32:	59 f7       	brne	.-42     	; 0x1e0a <CommandLineProcessByte+0x3c>
    /* Drop buffer on escape */
    BufferIdx = 0;
    1e34:	10 92 a3 20 	sts	0x20A3, r1
    1e38:	10 92 a4 20 	sts	0x20A4, r1
    1e3c:	e6 cf       	rjmp	.-52     	; 0x1e0a <CommandLineProcessByte+0x3c>
    BufferIdx = 0;

    DecodeCommand();
  }else if (Byte == '\b') {
    /* Backspace. Delete last character in buffer. */
    if (BufferIdx > 0) {
    1e3e:	80 91 a3 20 	lds	r24, 0x20A3
    1e42:	90 91 a4 20 	lds	r25, 0x20A4
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	01 f3       	breq	.-64     	; 0x1e0a <CommandLineProcessByte+0x3c>
      BufferIdx--;
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	80 93 a3 20 	sts	0x20A3, r24
    1e50:	90 93 a4 20 	sts	0x20A4, r25
    1e54:	da cf       	rjmp	.-76     	; 0x1e0a <CommandLineProcessByte+0x3c>
    if (BufferIdx < (sizeof(TerminalBuffer) / sizeof(*TerminalBuffer) - 1)) {
      TerminalBuffer[BufferIdx++] = Byte;
    }
  }else if (Byte == '\r') {
    /* Process on \r. Terminate string and decode. */
    TerminalBuffer[BufferIdx] = '\0';
    1e56:	e0 91 a3 20 	lds	r30, 0x20A3
    1e5a:	f0 91 a4 20 	lds	r31, 0x20A4
    1e5e:	e0 5f       	subi	r30, 0xF0	; 240
    1e60:	fe 4d       	sbci	r31, 0xDE	; 222
    1e62:	10 82       	st	Z, r1
    BufferIdx = 0;
    1e64:	10 92 a3 20 	sts	0x20A3, r1
    1e68:	10 92 a4 20 	sts	0x20A4, r1
  bool CommandFound = false;
  CommandStatusIdType StatusId = COMMAND_ERR_UNKNOWN_CMD_ID;
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Do some sanity check first */
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    1e6c:	80 91 10 21 	lds	r24, 0x2110
    1e70:	88 23       	and	r24, r24
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <CommandLineProcessByte+0xa8>
    1e74:	a0 c0       	rjmp	.+320    	; 0x1fb6 <CommandLineProcessByte+0x1e8>
    1e76:	8d 7f       	andi	r24, 0xFD	; 253
    1e78:	8d 33       	cpi	r24, 0x3D	; 61
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <CommandLineProcessByte+0xb0>
    1e7c:	9c c0       	rjmp	.+312    	; 0x1fb6 <CommandLineProcessByte+0x1e8>
    1e7e:	e1 e1       	ldi	r30, 0x11	; 17
    1e80:	f1 e2       	ldi	r31, 0x21	; 33
    1e82:	04 c0       	rjmp	.+8      	; 0x1e8c <CommandLineProcessByte+0xbe>
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    1e84:	1f 33       	cpi	r17, 0x3F	; 63
    1e86:	31 f0       	breq	.+12     	; 0x1e94 <CommandLineProcessByte+0xc6>
    1e88:	1d 33       	cpi	r17, 0x3D	; 61
    1e8a:	21 f0       	breq	.+8      	; 0x1e94 <CommandLineProcessByte+0xc6>
      pCommandDelimiter++;
    1e8c:	ef 01       	movw	r28, r30
  if (!IS_COMMAND_DELIMITER(pTerminalBuffer[0])) {
    char* pCommandDelimiter = pTerminalBuffer;
    char CommandDelimiter = '\0';

    /* Search for command delimiter, store it and replace with '\0' */
    while(!(IS_COMMAND_DELIMITER(*pCommandDelimiter)))
    1e8e:	11 91       	ld	r17, Z+
    1e90:	11 11       	cpse	r17, r1
    1e92:	f8 cf       	rjmp	.-16     	; 0x1e84 <CommandLineProcessByte+0xb6>
      pCommandDelimiter++;

    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';
    1e94:	18 82       	st	Y, r1

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    1e96:	67 e5       	ldi	r22, 0x57	; 87
    1e98:	75 e0       	ldi	r23, 0x05	; 5
    1e9a:	80 e1       	ldi	r24, 0x10	; 16
    1e9c:	91 e2       	ldi	r25, 0x21	; 33
    1e9e:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1ea2:	89 2b       	or	r24, r25
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <CommandLineProcessByte+0xda>
    1ea6:	36 c1       	rjmp	.+620    	; 0x2114 <CommandLineProcessByte+0x346>
    1ea8:	6d e6       	ldi	r22, 0x6D	; 109
    1eaa:	75 e0       	ldi	r23, 0x05	; 5
    1eac:	80 e1       	ldi	r24, 0x10	; 16
    1eae:	91 e2       	ldi	r25, 0x21	; 33
    1eb0:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1eb4:	89 2b       	or	r24, r25
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <CommandLineProcessByte+0xec>
    1eb8:	2a c1       	rjmp	.+596    	; 0x210e <CommandLineProcessByte+0x340>
    1eba:	63 e8       	ldi	r22, 0x83	; 131
    1ebc:	75 e0       	ldi	r23, 0x05	; 5
    1ebe:	80 e1       	ldi	r24, 0x10	; 16
    1ec0:	91 e2       	ldi	r25, 0x21	; 33
    1ec2:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1ec6:	89 2b       	or	r24, r25
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <CommandLineProcessByte+0xfe>
    1eca:	1e c1       	rjmp	.+572    	; 0x2108 <CommandLineProcessByte+0x33a>
    1ecc:	69 e9       	ldi	r22, 0x99	; 153
    1ece:	75 e0       	ldi	r23, 0x05	; 5
    1ed0:	80 e1       	ldi	r24, 0x10	; 16
    1ed2:	91 e2       	ldi	r25, 0x21	; 33
    1ed4:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1ed8:	89 2b       	or	r24, r25
    1eda:	09 f4       	brne	.+2      	; 0x1ede <CommandLineProcessByte+0x110>
    1edc:	12 c1       	rjmp	.+548    	; 0x2102 <CommandLineProcessByte+0x334>
    1ede:	6f ea       	ldi	r22, 0xAF	; 175
    1ee0:	75 e0       	ldi	r23, 0x05	; 5
    1ee2:	80 e1       	ldi	r24, 0x10	; 16
    1ee4:	91 e2       	ldi	r25, 0x21	; 33
    1ee6:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1eea:	89 2b       	or	r24, r25
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <CommandLineProcessByte+0x122>
    1eee:	06 c1       	rjmp	.+524    	; 0x20fc <CommandLineProcessByte+0x32e>
    1ef0:	65 ec       	ldi	r22, 0xC5	; 197
    1ef2:	75 e0       	ldi	r23, 0x05	; 5
    1ef4:	80 e1       	ldi	r24, 0x10	; 16
    1ef6:	91 e2       	ldi	r25, 0x21	; 33
    1ef8:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1efc:	89 2b       	or	r24, r25
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <CommandLineProcessByte+0x134>
    1f00:	fa c0       	rjmp	.+500    	; 0x20f6 <CommandLineProcessByte+0x328>
    1f02:	6b ed       	ldi	r22, 0xDB	; 219
    1f04:	75 e0       	ldi	r23, 0x05	; 5
    1f06:	80 e1       	ldi	r24, 0x10	; 16
    1f08:	91 e2       	ldi	r25, 0x21	; 33
    1f0a:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1f0e:	89 2b       	or	r24, r25
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <CommandLineProcessByte+0x146>
    1f12:	ee c0       	rjmp	.+476    	; 0x20f0 <CommandLineProcessByte+0x322>
    1f14:	61 ef       	ldi	r22, 0xF1	; 241
    1f16:	75 e0       	ldi	r23, 0x05	; 5
    1f18:	80 e1       	ldi	r24, 0x10	; 16
    1f1a:	91 e2       	ldi	r25, 0x21	; 33
    1f1c:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1f20:	89 2b       	or	r24, r25
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <CommandLineProcessByte+0x158>
    1f24:	e2 c0       	rjmp	.+452    	; 0x20ea <CommandLineProcessByte+0x31c>
    1f26:	67 e0       	ldi	r22, 0x07	; 7
    1f28:	76 e0       	ldi	r23, 0x06	; 6
    1f2a:	80 e1       	ldi	r24, 0x10	; 16
    1f2c:	91 e2       	ldi	r25, 0x21	; 33
    1f2e:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1f32:	89 2b       	or	r24, r25
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <CommandLineProcessByte+0x16a>
    1f36:	d6 c0       	rjmp	.+428    	; 0x20e4 <CommandLineProcessByte+0x316>
    1f38:	6d e1       	ldi	r22, 0x1D	; 29
    1f3a:	76 e0       	ldi	r23, 0x06	; 6
    1f3c:	80 e1       	ldi	r24, 0x10	; 16
    1f3e:	91 e2       	ldi	r25, 0x21	; 33
    1f40:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1f44:	89 2b       	or	r24, r25
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <CommandLineProcessByte+0x17c>
    1f48:	ca c0       	rjmp	.+404    	; 0x20de <CommandLineProcessByte+0x310>
    1f4a:	63 e3       	ldi	r22, 0x33	; 51
    1f4c:	76 e0       	ldi	r23, 0x06	; 6
    1f4e:	80 e1       	ldi	r24, 0x10	; 16
    1f50:	91 e2       	ldi	r25, 0x21	; 33
    1f52:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1f56:	89 2b       	or	r24, r25
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <CommandLineProcessByte+0x18e>
    1f5a:	be c0       	rjmp	.+380    	; 0x20d8 <CommandLineProcessByte+0x30a>
    1f5c:	69 e4       	ldi	r22, 0x49	; 73
    1f5e:	76 e0       	ldi	r23, 0x06	; 6
    1f60:	80 e1       	ldi	r24, 0x10	; 16
    1f62:	91 e2       	ldi	r25, 0x21	; 33
    1f64:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1f68:	89 2b       	or	r24, r25
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <CommandLineProcessByte+0x1a0>
    1f6c:	b2 c0       	rjmp	.+356    	; 0x20d2 <CommandLineProcessByte+0x304>
    1f6e:	6f e5       	ldi	r22, 0x5F	; 95
    1f70:	76 e0       	ldi	r23, 0x06	; 6
    1f72:	80 e1       	ldi	r24, 0x10	; 16
    1f74:	91 e2       	ldi	r25, 0x21	; 33
    1f76:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1f7a:	89 2b       	or	r24, r25
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <CommandLineProcessByte+0x1b2>
    1f7e:	a6 c0       	rjmp	.+332    	; 0x20cc <CommandLineProcessByte+0x2fe>
    1f80:	65 e7       	ldi	r22, 0x75	; 117
    1f82:	76 e0       	ldi	r23, 0x06	; 6
    1f84:	80 e1       	ldi	r24, 0x10	; 16
    1f86:	91 e2       	ldi	r25, 0x21	; 33
    1f88:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1f8c:	89 2b       	or	r24, r25
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <CommandLineProcessByte+0x1c4>
    1f90:	9a c0       	rjmp	.+308    	; 0x20c6 <CommandLineProcessByte+0x2f8>
    1f92:	6b e8       	ldi	r22, 0x8B	; 139
    1f94:	76 e0       	ldi	r23, 0x06	; 6
    1f96:	80 e1       	ldi	r24, 0x10	; 16
    1f98:	91 e2       	ldi	r25, 0x21	; 33
    1f9a:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1f9e:	89 2b       	or	r24, r25
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <CommandLineProcessByte+0x1d6>
    1fa2:	8e c0       	rjmp	.+284    	; 0x20c0 <CommandLineProcessByte+0x2f2>
    1fa4:	61 ea       	ldi	r22, 0xA1	; 161
    1fa6:	76 e0       	ldi	r23, 0x06	; 6
    1fa8:	80 e1       	ldi	r24, 0x10	; 16
    1faa:	91 e2       	ldi	r25, 0x21	; 33
    1fac:	0e 94 33 22 	call	0x4466	; 0x4466 <strcmp_P>
    1fb0:	89 2b       	or	r24, r25
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <CommandLineProcessByte+0x1e8>
    1fb4:	52 c0       	rjmp	.+164    	; 0x205a <CommandLineProcessByte+0x28c>

static void DecodeCommand(void)
{
  uint8_t i;
  bool CommandFound = false;
  CommandStatusIdType StatusId = COMMAND_ERR_UNKNOWN_CMD_ID;
    1fb6:	88 ec       	ldi	r24, 0xC8	; 200
}

static void DecodeCommand(void)
{
  uint8_t i;
  bool CommandFound = false;
    1fb8:	c0 e0       	ldi	r28, 0x00	; 0
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    1fba:	e1 e9       	ldi	r30, 0x91	; 145
    1fbc:	f4 e0       	ldi	r31, 0x04	; 4
    1fbe:	e4 91       	lpm	r30, Z+
    1fc0:	8e 17       	cp	r24, r30
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <CommandLineProcessByte+0x1f8>
    1fc4:	30 c0       	rjmp	.+96     	; 0x2026 <CommandLineProcessByte+0x258>
    1fc6:	e2 eb       	ldi	r30, 0xB2	; 178
    1fc8:	f4 e0       	ldi	r31, 0x04	; 4
    1fca:	e4 91       	lpm	r30, Z+
    1fcc:	8e 17       	cp	r24, r30
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <CommandLineProcessByte+0x204>
    1fd0:	41 c0       	rjmp	.+130    	; 0x2054 <CommandLineProcessByte+0x286>
    1fd2:	e3 ed       	ldi	r30, 0xD3	; 211
    1fd4:	f4 e0       	ldi	r31, 0x04	; 4
    1fd6:	e4 91       	lpm	r30, Z+
    1fd8:	8e 17       	cp	r24, r30
    1fda:	09 f4       	brne	.+2      	; 0x1fde <CommandLineProcessByte+0x210>
    1fdc:	38 c0       	rjmp	.+112    	; 0x204e <CommandLineProcessByte+0x280>
    1fde:	e4 ef       	ldi	r30, 0xF4	; 244
    1fe0:	f4 e0       	ldi	r31, 0x04	; 4
    1fe2:	e4 91       	lpm	r30, Z+
    1fe4:	8e 17       	cp	r24, r30
    1fe6:	81 f1       	breq	.+96     	; 0x2048 <CommandLineProcessByte+0x27a>
    1fe8:	e5 e1       	ldi	r30, 0x15	; 21
    1fea:	f5 e0       	ldi	r31, 0x05	; 5
    1fec:	e4 91       	lpm	r30, Z+
    1fee:	8e 17       	cp	r24, r30
    1ff0:	41 f1       	breq	.+80     	; 0x2042 <CommandLineProcessByte+0x274>
    1ff2:	e6 e3       	ldi	r30, 0x36	; 54
    1ff4:	f5 e0       	ldi	r31, 0x05	; 5
    1ff6:	e4 91       	lpm	r30, Z+
    1ff8:	8e 17       	cp	r24, r30
    1ffa:	01 f1       	breq	.+64     	; 0x203c <CommandLineProcessByte+0x26e>
            return StatusTable[i].Message;
    }

    return (void*) 0;
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }

  /* Send command status message */
  TerminalSendStringP(GetStatusMessageP(StatusId));
    2000:	d0 da       	rcall	.-2656   	; 0x15a2 <TerminalSendStringP>
  TerminalSendStringP(PSTR(STATUS_MESSAGE_TRAILER));
    2002:	8e e8       	ldi	r24, 0x8E	; 142
    2004:	94 e0       	ldi	r25, 0x04	; 4
    2006:	cd da       	rcall	.-2662   	; 0x15a2 <TerminalSendStringP>

  if (CommandFound && (pTerminalBuffer[0] != '\0') ) {
    2008:	cc 23       	and	r28, r28
    200a:	09 f4       	brne	.+2      	; 0x200e <CommandLineProcessByte+0x240>
    200c:	fe ce       	rjmp	.-516    	; 0x1e0a <CommandLineProcessByte+0x3c>
    200e:	80 91 10 21 	lds	r24, 0x2110
    2012:	88 23       	and	r24, r24
    2014:	09 f4       	brne	.+2      	; 0x2018 <CommandLineProcessByte+0x24a>
    2016:	f9 ce       	rjmp	.-526    	; 0x1e0a <CommandLineProcessByte+0x3c>
    /* Send optional answer */
    TerminalSendString(pTerminalBuffer);
    2018:	80 e1       	ldi	r24, 0x10	; 16
    201a:	91 e2       	ldi	r25, 0x21	; 33
    201c:	bd da       	rcall	.-2694   	; 0x1598 <TerminalSendString>
    TerminalSendStringP(PSTR(OPTIONAL_ANSWER_TRAILER));
    201e:	8b e8       	ldi	r24, 0x8B	; 139
    2020:	94 e0       	ldi	r25, 0x04	; 4
    2022:	bf da       	rcall	.-2690   	; 0x15a2 <TerminalSendStringP>
    2024:	f2 ce       	rjmp	.-540    	; 0x1e0a <CommandLineProcessByte+0x3c>
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
            return StatusTable[i].Message;
    202a:	41 e2       	ldi	r20, 0x21	; 33
    202c:	42 9f       	mul	r20, r18
    202e:	c0 01       	movw	r24, r0
    2030:	43 9f       	mul	r20, r19
    2032:	90 0d       	add	r25, r0
    2034:	11 24       	eor	r1, r1
    2036:	8e 56       	subi	r24, 0x6E	; 110
    2038:	9b 4f       	sbci	r25, 0xFB	; 251
    203a:	e2 cf       	rjmp	.-60     	; 0x2000 <CommandLineProcessByte+0x232>
static const char* GetStatusMessageP(CommandStatusIdType StatusId)
{
    uint8_t i;

    for (i=0; i<(sizeof(StatusTable)/sizeof(*StatusTable)); i++) {
        if (pgm_read_byte(&StatusTable[i].Id) == StatusId)
    203c:	25 e0       	ldi	r18, 0x05	; 5
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	f4 cf       	rjmp	.-24     	; 0x202a <CommandLineProcessByte+0x25c>
    2042:	24 e0       	ldi	r18, 0x04	; 4
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	f1 cf       	rjmp	.-30     	; 0x202a <CommandLineProcessByte+0x25c>
    2048:	23 e0       	ldi	r18, 0x03	; 3
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	ee cf       	rjmp	.-36     	; 0x202a <CommandLineProcessByte+0x25c>
    204e:	22 e0       	ldi	r18, 0x02	; 2
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	eb cf       	rjmp	.-42     	; 0x202a <CommandLineProcessByte+0x25c>
    2054:	21 e0       	ldi	r18, 0x01	; 1
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	e8 cf       	rjmp	.-48     	; 0x202a <CommandLineProcessByte+0x25c>
    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    205a:	21 ea       	ldi	r18, 0xA1	; 161
    205c:	36 e0       	ldi	r19, 0x06	; 6
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
    205e:	10 92 10 21 	sts	0x2110, r1
static CommandStatusIdType CallCommandFunc(
    const CommandEntryType* CommandEntry, char CommandDelimiter, char* pParam) {
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Call appropriate function depending on CommandDelimiter */
  if (CommandDelimiter == CHAR_GET_MODE) {
    2062:	1f 33       	cpi	r17, 0x3F	; 63
    2064:	19 f1       	breq	.+70     	; 0x20ac <CommandLineProcessByte+0x2de>
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    if (GetFunc != NO_FUNCTION) {
      return GetFunc(pTerminalBuffer);
    }
  } else if (CommandDelimiter == CHAR_SET_MODE) {
    2066:	1d 33       	cpi	r17, 0x3D	; 61
    2068:	99 f0       	breq	.+38     	; 0x2090 <CommandLineProcessByte+0x2c2>
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    if (SetFunc != NO_FUNCTION) {
      return SetFunc(pParam);
    }
  } else if (CommandDelimiter == CHAR_EXEC_MODE){
    206a:	11 23       	and	r17, r17
    206c:	19 f0       	breq	.+6      	; 0x2074 <CommandLineProcessByte+0x2a6>
  } else {
    /* This should not happen (TM) */
  }

  /* This delimiter has not been registered with this command */
  return COMMAND_ERR_INVALID_USAGE_ID;
    206e:	89 ec       	ldi	r24, 0xC9	; 201
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    2070:	c1 e0       	ldi	r28, 0x01	; 1
    2072:	a3 cf       	rjmp	.-186    	; 0x1fba <CommandLineProcessByte+0x1ec>
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    if (SetFunc != NO_FUNCTION) {
      return SetFunc(pParam);
    }
  } else if (CommandDelimiter == CHAR_EXEC_MODE){
    CommandExecFuncType ExecFunc = pgm_read_ptr(&CommandEntry->ExecFunc);
    2074:	20 5f       	subi	r18, 0xF0	; 240
    2076:	3f 4f       	sbci	r19, 0xFF	; 255
    2078:	f9 01       	movw	r30, r18
    207a:	45 91       	lpm	r20, Z+
    207c:	54 91       	lpm	r21, Z+
    if (ExecFunc != NO_FUNCTION) {
    207e:	41 15       	cp	r20, r1
    2080:	51 05       	cpc	r21, r1
    2082:	a9 f3       	breq	.-22     	; 0x206e <CommandLineProcessByte+0x2a0>
      return ExecFunc(pTerminalBuffer);
    2084:	80 e1       	ldi	r24, 0x10	; 16
    2086:	91 e2       	ldi	r25, 0x21	; 33
    2088:	fa 01       	movw	r30, r20
    208a:	09 95       	icall
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    208c:	c1 e0       	ldi	r28, 0x01	; 1
    208e:	95 cf       	rjmp	.-214    	; 0x1fba <CommandLineProcessByte+0x1ec>
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    if (GetFunc != NO_FUNCTION) {
      return GetFunc(pTerminalBuffer);
    }
  } else if (CommandDelimiter == CHAR_SET_MODE) {
    CommandSetFuncType SetFunc = pgm_read_ptr(&CommandEntry->SetFunc);
    2090:	2e 5e       	subi	r18, 0xEE	; 238
    2092:	3f 4f       	sbci	r19, 0xFF	; 255
    2094:	f9 01       	movw	r30, r18
    2096:	45 91       	lpm	r20, Z+
    2098:	54 91       	lpm	r21, Z+
    if (SetFunc != NO_FUNCTION) {
    209a:	41 15       	cp	r20, r1
    209c:	51 05       	cpc	r21, r1
    209e:	39 f3       	breq	.-50     	; 0x206e <CommandLineProcessByte+0x2a0>
      return SetFunc(pParam);
    20a0:	ce 01       	movw	r24, r28
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	fa 01       	movw	r30, r20
    20a6:	09 95       	icall
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
        /* Command found. Clear buffer, and call appropriate function */
        char* pParam = ++pCommandDelimiter;

        pTerminalBuffer[0] = '\0';
        CommandFound = true;
    20a8:	c1 e0       	ldi	r28, 0x01	; 1
    20aa:	87 cf       	rjmp	.-242    	; 0x1fba <CommandLineProcessByte+0x1ec>
    const CommandEntryType* CommandEntry, char CommandDelimiter, char* pParam) {
  char* pTerminalBuffer = (char*) TerminalBuffer;

  /* Call appropriate function depending on CommandDelimiter */
  if (CommandDelimiter == CHAR_GET_MODE) {
    CommandGetFuncType GetFunc = pgm_read_ptr(&CommandEntry->GetFunc);
    20ac:	2c 5e       	subi	r18, 0xEC	; 236
    20ae:	3f 4f       	sbci	r19, 0xFF	; 255
    20b0:	f9 01       	movw	r30, r18
    20b2:	45 91       	lpm	r20, Z+
    20b4:	54 91       	lpm	r21, Z+
    if (GetFunc != NO_FUNCTION) {
    20b6:	41 15       	cp	r20, r1
    20b8:	51 05       	cpc	r21, r1
    20ba:	21 f7       	brne	.-56     	; 0x2084 <CommandLineProcessByte+0x2b6>
  } else {
    /* This should not happen (TM) */
  }

  /* This delimiter has not been registered with this command */
  return COMMAND_ERR_INVALID_USAGE_ID;
    20bc:	89 ec       	ldi	r24, 0xC9	; 201
    20be:	d8 cf       	rjmp	.-80     	; 0x2070 <CommandLineProcessByte+0x2a2>
    CommandDelimiter = *pCommandDelimiter;
    *pCommandDelimiter = '\0';

    /* Search in command table */
    for (i=0; i<(sizeof(CommandTable) / sizeof(*CommandTable)); i++) {
      if (strcmp_P(pTerminalBuffer, CommandTable[i].Command) == 0) {
    20c0:	2b e8       	ldi	r18, 0x8B	; 139
    20c2:	36 e0       	ldi	r19, 0x06	; 6
    20c4:	cc cf       	rjmp	.-104    	; 0x205e <CommandLineProcessByte+0x290>
    20c6:	25 e7       	ldi	r18, 0x75	; 117
    20c8:	36 e0       	ldi	r19, 0x06	; 6
    20ca:	c9 cf       	rjmp	.-110    	; 0x205e <CommandLineProcessByte+0x290>
    20cc:	2f e5       	ldi	r18, 0x5F	; 95
    20ce:	36 e0       	ldi	r19, 0x06	; 6
    20d0:	c6 cf       	rjmp	.-116    	; 0x205e <CommandLineProcessByte+0x290>
    20d2:	29 e4       	ldi	r18, 0x49	; 73
    20d4:	36 e0       	ldi	r19, 0x06	; 6
    20d6:	c3 cf       	rjmp	.-122    	; 0x205e <CommandLineProcessByte+0x290>
    20d8:	23 e3       	ldi	r18, 0x33	; 51
    20da:	36 e0       	ldi	r19, 0x06	; 6
    20dc:	c0 cf       	rjmp	.-128    	; 0x205e <CommandLineProcessByte+0x290>
    20de:	2d e1       	ldi	r18, 0x1D	; 29
    20e0:	36 e0       	ldi	r19, 0x06	; 6
    20e2:	bd cf       	rjmp	.-134    	; 0x205e <CommandLineProcessByte+0x290>
    20e4:	27 e0       	ldi	r18, 0x07	; 7
    20e6:	36 e0       	ldi	r19, 0x06	; 6
    20e8:	ba cf       	rjmp	.-140    	; 0x205e <CommandLineProcessByte+0x290>
    20ea:	21 ef       	ldi	r18, 0xF1	; 241
    20ec:	35 e0       	ldi	r19, 0x05	; 5
    20ee:	b7 cf       	rjmp	.-146    	; 0x205e <CommandLineProcessByte+0x290>
    20f0:	2b ed       	ldi	r18, 0xDB	; 219
    20f2:	35 e0       	ldi	r19, 0x05	; 5
    20f4:	b4 cf       	rjmp	.-152    	; 0x205e <CommandLineProcessByte+0x290>
    20f6:	25 ec       	ldi	r18, 0xC5	; 197
    20f8:	35 e0       	ldi	r19, 0x05	; 5
    20fa:	b1 cf       	rjmp	.-158    	; 0x205e <CommandLineProcessByte+0x290>
    20fc:	2f ea       	ldi	r18, 0xAF	; 175
    20fe:	35 e0       	ldi	r19, 0x05	; 5
    2100:	ae cf       	rjmp	.-164    	; 0x205e <CommandLineProcessByte+0x290>
    2102:	29 e9       	ldi	r18, 0x99	; 153
    2104:	35 e0       	ldi	r19, 0x05	; 5
    2106:	ab cf       	rjmp	.-170    	; 0x205e <CommandLineProcessByte+0x290>
    2108:	23 e8       	ldi	r18, 0x83	; 131
    210a:	35 e0       	ldi	r19, 0x05	; 5
    210c:	a8 cf       	rjmp	.-176    	; 0x205e <CommandLineProcessByte+0x290>
    210e:	2d e6       	ldi	r18, 0x6D	; 109
    2110:	35 e0       	ldi	r19, 0x05	; 5
    2112:	a5 cf       	rjmp	.-182    	; 0x205e <CommandLineProcessByte+0x290>
    2114:	27 e5       	ldi	r18, 0x57	; 87
    2116:	35 e0       	ldi	r19, 0x05	; 5
    2118:	a2 cf       	rjmp	.-188    	; 0x205e <CommandLineProcessByte+0x290>

0000211a <CommandLineTick>:

  return true;
}

void CommandLineTick(void)
{
    211a:	08 95       	ret

0000211c <StartDemod>:
INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
}

INLINE void CodecSetDemodPower(bool bOnOff) {
    CODEC_DEMOD_POWER_PORT.DIRSET = CODEC_DEMOD_POWER_MASK;
    211c:	a0 e2       	ldi	r26, 0x20	; 32
    211e:	b6 e0       	ldi	r27, 0x06	; 6
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	11 96       	adiw	r26, 0x01	; 1
    2124:	8c 93       	st	X, r24
    2126:	11 97       	sbiw	r26, 0x01	; 1

    if (bOnOff) {
        CODEC_DEMOD_POWER_PORT.OUTSET = CODEC_DEMOD_POWER_MASK;
    2128:	15 96       	adiw	r26, 0x05	; 5
    212a:	8c 93       	st	X, r24
    212c:	15 97       	sbiw	r26, 0x05	; 5
static void StartDemod(void) {
    /* Activate Power for demodulator */
    CodecSetDemodPower(true);

    /* Configure sampling-timer free running and sync to first modulation-pause. */
    CODEC_TIMER_SAMPLING.CNT = 0;
    212e:	e0 e4       	ldi	r30, 0x40	; 64
    2130:	f8 e0       	ldi	r31, 0x08	; 8
    2132:	10 a2       	std	Z+32, r1	; 0x20
    2134:	11 a2       	std	Z+33, r1	; 0x21
    CODEC_TIMER_SAMPLING.PER = SAMPLE_RATE_SYSTEM_CYCLES - 1;
    2136:	8d e2       	ldi	r24, 0x2D	; 45
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	86 a3       	std	Z+38, r24	; 0x26
    213c:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_TIMER_SAMPLING.CCA = 0xFFFF; /* CCA Interrupt is not active! */
    213e:	8f ef       	ldi	r24, 0xFF	; 255
    2140:	9f ef       	ldi	r25, 0xFF	; 255
    2142:	80 a7       	std	Z+40, r24	; 0x28
    2144:	91 a7       	std	Z+41, r25	; 0x29
    CODEC_TIMER_SAMPLING.CTRLA = TC_CLKSEL_DIV1_gc;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	80 83       	st	Z, r24
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
    214a:	98 e8       	ldi	r25, 0x88	; 136
    214c:	93 83       	std	Z+3, r25	; 0x03
    CODEC_TIMER_SAMPLING.INTCTRLB = TC_CCAINTLVL_HI_gc;
    214e:	93 e0       	ldi	r25, 0x03	; 3
    2150:	97 83       	std	Z+7, r25	; 0x07

    /* Start looking out for modulation pause via interrupt. */
    CODEC_DEMOD_IN_PORT.INT0MASK = CODEC_DEMOD_IN_MASK0;
    2152:	1a 96       	adiw	r26, 0x0a	; 10
    2154:	8c 93       	st	X, r24
    2156:	08 95       	ret

00002158 <__vector_34>:
}

ISR(CODEC_DEMOD_IN_INT0_VECT) {
    2158:	1f 92       	push	r1
    215a:	0f 92       	push	r0
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	0f 92       	push	r0
    2160:	11 24       	eor	r1, r1
    2162:	8f 93       	push	r24
    2164:	9f 93       	push	r25
    2166:	ef 93       	push	r30
    2168:	ff 93       	push	r31
    /* This is the first edge of the first modulation-pause after StartDemod.
     * Now we have time to prepare our timers and variables to start
     * demodulating beginning from one bit-width after this edge. */
    CodecBufferPtr = CodecBuffer;
    216a:	80 e1       	ldi	r24, 0x10	; 16
    216c:	92 e2       	ldi	r25, 0x22	; 34
    216e:	80 93 b1 20 	sts	0x20B1, r24
    2172:	90 93 b2 20 	sts	0x20B2, r25
    ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
    2176:	80 e9       	ldi	r24, 0x90	; 144
    2178:	92 e2       	ldi	r25, 0x22	; 34
    217a:	80 93 af 20 	sts	0x20AF, r24
    217e:	90 93 b0 20 	sts	0x20B0, r25
    DataRegister = 0;
    2182:	10 92 aa 20 	sts	0x20AA, r1
    SampleRegister = 0;
    2186:	10 92 a9 20 	sts	0x20A9, r1
    SamplePosition = 0;
    218a:	10 92 a5 20 	sts	0x20A5, r1
    BitCount = 0;
    218e:	10 92 ad 20 	sts	0x20AD, r1
    2192:	10 92 ae 20 	sts	0x20AE, r1
    IsParityBit = false;
    2196:	10 92 a8 20 	sts	0x20A8, r1
     * XYZBUF mechanism of the xmega to automatically double the sampling rate on the
     * next overflow. For this we have to temporarily deactivate the automatical alignment
     * in order to catch next overflow event for updating the BUF registers.
     * We want to sample the demodulated data stream in the first quarter of the half-bit
     * where the pulsed miller encoded is located. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_OFF_gc;
    219a:	e0 e4       	ldi	r30, 0x40	; 64
    219c:	f8 e0       	ldi	r31, 0x08	; 8
    219e:	13 82       	std	Z+3, r1	; 0x03
    CODEC_TIMER_SAMPLING.PERBUF = SAMPLE_RATE_SYSTEM_CYCLES/2 - 1; /* Half bit width */
    21a0:	86 e9       	ldi	r24, 0x96	; 150
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	86 ab       	std	Z+54, r24	; 0x36
    21a6:	97 ab       	std	Z+55, r25	; 0x37
    CODEC_TIMER_SAMPLING.CCABUF = SAMPLE_RATE_SYSTEM_CYCLES/8 - 10 - 1; /* Compensate for DIGFILT and ISR prolog */
    21a8:	8a e1       	ldi	r24, 0x1A	; 26
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	80 af       	std	Z+56, r24	; 0x38
    21ae:	91 af       	std	Z+57, r25	; 0x39
    /* Setup Frame Delay Timer and wire to EVSYS. Frame delay time is
     * measured from last change in RF field, therefore we use
     * the event channel 1 (end of modulation pause) as the restart event.
     * The preliminary frame delay time chosen here is irrelevant, because
     * the correct FDT gets set automatically after demodulation. */
    CODEC_TIMER_LOADMOD.CNT = 0;
    21b0:	e0 e4       	ldi	r30, 0x40	; 64
    21b2:	f9 e0       	ldi	r31, 0x09	; 9
    21b4:	10 a2       	std	Z+32, r1	; 0x20
    21b6:	11 a2       	std	Z+33, r1	; 0x21
    CODEC_TIMER_LOADMOD.PER = 0xFFFF;
    21b8:	8f ef       	ldi	r24, 0xFF	; 255
    21ba:	9f ef       	ldi	r25, 0xFF	; 255
    21bc:	86 a3       	std	Z+38, r24	; 0x26
    21be:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH1_gc;
    21c0:	89 e8       	ldi	r24, 0x89	; 137
    21c2:	83 83       	std	Z+3, r24	; 0x03
    CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_EVCH6_gc;
    21c4:	8e e0       	ldi	r24, 0x0E	; 14
    21c6:	80 83       	st	Z, r24

    /* Disable this interrupt */
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
    21c8:	e0 e2       	ldi	r30, 0x20	; 32
    21ca:	f6 e0       	ldi	r31, 0x06	; 6
    21cc:	12 86       	std	Z+10, r1	; 0x0a
}
    21ce:	ff 91       	pop	r31
    21d0:	ef 91       	pop	r30
    21d2:	9f 91       	pop	r25
    21d4:	8f 91       	pop	r24
    21d6:	0f 90       	pop	r0
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	0f 90       	pop	r0
    21dc:	1f 90       	pop	r1
    21de:	18 95       	reti

000021e0 <__vector_22>:

ISR(CODEC_TIMER_SAMPLING_CCA_VECT) {
    21e0:	1f 92       	push	r1
    21e2:	0f 92       	push	r0
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	0f 92       	push	r0
    21e8:	11 24       	eor	r1, r1
    21ea:	2f 93       	push	r18
    21ec:	3f 93       	push	r19
    21ee:	4f 93       	push	r20
    21f0:	8f 93       	push	r24
    21f2:	9f 93       	push	r25
    21f4:	ef 93       	push	r30
    21f6:	ff 93       	push	r31
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    21f8:	90 91 28 06 	lds	r25, 0x0628
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    21fc:	80 91 a9 20 	lds	r24, 0x20A9
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
}

ISR(CODEC_TIMER_SAMPLING_CCA_VECT) {
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    2200:	95 70       	andi	r25, 0x05	; 5
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    NewSampleRegister |= (!SamplePin ? 0x01 : 0x00);
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	09 f0       	breq	.+2      	; 0x2208 <__vector_22+0x28>
    2206:	20 e0       	ldi	r18, 0x00	; 0
    /* This interrupt gets called twice for every bit to sample it. */
    uint8_t SamplePin = CODEC_DEMOD_IN_PORT.IN & CODEC_DEMOD_IN_MASK;
    uint8_t NewSampleRegister;

    /* Shift sampled bit into sampling register and hold a local copy for fast access. */
    NewSampleRegister = SampleRegister << 1;
    2208:	88 0f       	add	r24, r24
    NewSampleRegister |= (!SamplePin ? 0x01 : 0x00);
    220a:	82 2b       	or	r24, r18
    SampleRegister = NewSampleRegister;
    220c:	80 93 a9 20 	sts	0x20A9, r24

    if (SamplePosition) {
    2210:	90 91 a5 20 	lds	r25, 0x20A5
    2214:	99 23       	and	r25, r25
    2216:	c1 f1       	breq	.+112    	; 0x2288 <__vector_22+0xa8>
        /* Analyze the sampling register after 2 samples. */
        if ((NewSampleRegister & 0x07) == 0x07) {
    2218:	98 2f       	mov	r25, r24
    221a:	97 70       	andi	r25, 0x07	; 7
    221c:	97 30       	cpi	r25, 0x07	; 7
    221e:	09 f4       	brne	.+2      	; 0x2222 <__vector_22+0x42>
    2220:	48 c0       	rjmp	.+144    	; 0x22b2 <__vector_22+0xd2>

            /* Signal, that we have finished sampling */
            Flags.DemodFinished = 1;
        } else {
            /* Otherwise, we check the two sample bits from the bit before. */
            uint8_t BitSample = NewSampleRegister & 0xC;
    2222:	98 2f       	mov	r25, r24
    2224:	9c 70       	andi	r25, 0x0C	; 12
            uint8_t Bit = 0;

            if (BitSample != (0x0 << 2)) {
    2226:	81 f1       	breq	.+96     	; 0x2288 <__vector_22+0xa8>
                /* We have a valid bit. decode and process it. */
                if (BitSample & (0x1 << 2)) {
    2228:	82 fb       	bst	r24, 2
    222a:	88 27       	eor	r24, r24
    222c:	80 f9       	bld	r24, 0
    222e:	91 e0       	ldi	r25, 0x01	; 1
    2230:	89 27       	eor	r24, r25
                } else {
                    /* 10 sequence -> This is a one bit */
                    Bit = 1;
                }

                LastBit = Bit;
    2232:	80 93 a7 20 	sts	0x20A7, r24

                if (!IsParityBit) {
    2236:	90 91 a8 20 	lds	r25, 0x20A8
    223a:	91 11       	cpse	r25, r1
    223c:	7f c0       	rjmp	.+254    	; 0x233c <__vector_22+0x15c>
                    /* This is a data bit, so shift it into the data register and
                     * hold a local copy of it. */
                    uint8_t NewDataRegister = DataRegister >> 1;
    223e:	90 91 aa 20 	lds	r25, 0x20AA
    2242:	96 95       	lsr	r25
                    NewDataRegister |= (Bit ? 0x80 : 0x00);
    2244:	88 23       	and	r24, r24
    2246:	09 f4       	brne	.+2      	; 0x224a <__vector_22+0x6a>
    2248:	83 c0       	rjmp	.+262    	; 0x2350 <__vector_22+0x170>
    224a:	20 e8       	ldi	r18, 0x80	; 128
    224c:	29 2b       	or	r18, r25
                    DataRegister = NewDataRegister;
    224e:	20 93 aa 20 	sts	0x20AA, r18

                    /* Update bitcount */
                    uint16_t NewBitCount = ++BitCount;
    2252:	80 91 ad 20 	lds	r24, 0x20AD
    2256:	90 91 ae 20 	lds	r25, 0x20AE
    225a:	01 96       	adiw	r24, 0x01	; 1
    225c:	80 93 ad 20 	sts	0x20AD, r24
    2260:	90 93 ae 20 	sts	0x20AE, r25
                    if ((NewBitCount & 0x07) == 0) {
    2264:	87 70       	andi	r24, 0x07	; 7
    2266:	99 27       	eor	r25, r25
    2268:	89 2b       	or	r24, r25
    226a:	71 f4       	brne	.+28     	; 0x2288 <__vector_22+0xa8>
                        /* We have reached a byte boundary! Store the data register. */
                        /* TODO: Prevent buffer overflow */
                        *CodecBufferPtr++ = NewDataRegister;
    226c:	e0 91 b1 20 	lds	r30, 0x20B1
    2270:	f0 91 b2 20 	lds	r31, 0x20B2
    2274:	cf 01       	movw	r24, r30
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	80 93 b1 20 	sts	0x20B1, r24
    227c:	90 93 b2 20 	sts	0x20B2, r25
    2280:	20 83       	st	Z, r18

                        /* Store bit for determining FDT at EOC and enable parity
                         * handling on next bit. */
                        IsParityBit = true;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	80 93 a8 20 	sts	0x20A8, r24
        }
    } else {
        /* On odd sample position just sample. */
    }

    SamplePosition = !SamplePosition;
    2288:	80 91 a5 20 	lds	r24, 0x20A5
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	89 27       	eor	r24, r25
    2290:	80 93 a5 20 	sts	0x20A5, r24

    /* Make sure the sampling timer gets automatically aligned to the
     * modulation pauses by using the RESTART event.
     * This can be understood as a "poor mans PLL" and makes sure that we are
     * never too far out the bit-grid while sampling. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
    2294:	88 e8       	ldi	r24, 0x88	; 136
    2296:	80 93 43 08 	sts	0x0843, r24
}
    229a:	ff 91       	pop	r31
    229c:	ef 91       	pop	r30
    229e:	9f 91       	pop	r25
    22a0:	8f 91       	pop	r24
    22a2:	4f 91       	pop	r20
    22a4:	3f 91       	pop	r19
    22a6:	2f 91       	pop	r18
    22a8:	0f 90       	pop	r0
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	0f 90       	pop	r0
    22ae:	1f 90       	pop	r1
    22b0:	18 95       	reti

    if (SamplePosition) {
        /* Analyze the sampling register after 2 samples. */
        if ((NewSampleRegister & 0x07) == 0x07) {
            /* No carrier modulation for 3 sample points. EOC! */
            CODEC_TIMER_SAMPLING.CTRLA = TC_CLKSEL_OFF_gc;
    22b2:	10 92 40 08 	sts	0x0840, r1
            CODEC_TIMER_SAMPLING.INTFLAGS = TC0_CCAIF_bm;
    22b6:	80 e1       	ldi	r24, 0x10	; 16
    22b8:	80 93 4c 08 	sts	0x084C, r24

            /* By this time, the FDT timer is aligned to the last modulation
             * edge of the reader. So we disable the auto-synchronization and
             * let it count the frame delay time in the background, and generate
             * an interrupt once it has reached the FDT. */
            CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_OFF_gc;
    22bc:	10 92 43 09 	sts	0x0943, r1

            if (LastBit) {
    22c0:	80 91 a7 20 	lds	r24, 0x20A7
    22c4:	88 23       	and	r24, r24
    22c6:	e9 f1       	breq	.+122    	; 0x2342 <__vector_22+0x162>
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV1;
    22c8:	8c eb       	ldi	r24, 0xBC	; 188
    22ca:	94 e0       	ldi	r25, 0x04	; 4
    22cc:	80 93 66 09 	sts	0x0966, r24
    22d0:	90 93 67 09 	sts	0x0967, r25
            } else {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV0;
            }

            LoadModState = LOADMOD_FDT;
    22d4:	10 92 a6 20 	sts	0x20A6, r1

            CODEC_TIMER_LOADMOD.INTFLAGS = TC1_OVFIF_bm;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	80 93 4c 09 	sts	0x094C, r24
            CODEC_TIMER_LOADMOD.INTCTRLA = TC_OVFINTLVL_HI_gc;
    22de:	83 e0       	ldi	r24, 0x03	; 3
    22e0:	80 93 46 09 	sts	0x0946, r24

            /* Determine if we did not receive a multiple of 8 bits.
             * If this is the case, right-align the remaining data and
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
    22e4:	80 91 ad 20 	lds	r24, 0x20AD
    22e8:	90 91 ae 20 	lds	r25, 0x20AE
    22ec:	87 70       	andi	r24, 0x07	; 7
            if (RemainingBits != 0) {
    22ee:	11 f1       	breq	.+68     	; 0x2334 <__vector_22+0x154>
                uint8_t NewDataRegister = DataRegister;
    22f0:	90 91 aa 20 	lds	r25, 0x20AA

                while (RemainingBits++ < 8) {
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    22f4:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    22f6:	22 e0       	ldi	r18, 0x02	; 2
    22f8:	28 0f       	add	r18, r24
    22fa:	87 30       	cpi	r24, 0x07	; 7
    22fc:	b1 f0       	breq	.+44     	; 0x232a <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    22fe:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    2300:	43 e0       	ldi	r20, 0x03	; 3
    2302:	48 0f       	add	r20, r24
    2304:	28 30       	cpi	r18, 0x08	; 8
    2306:	88 f4       	brcc	.+34     	; 0x232a <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    2308:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    230a:	34 e0       	ldi	r19, 0x04	; 4
    230c:	38 0f       	add	r19, r24
    230e:	48 30       	cpi	r20, 0x08	; 8
    2310:	60 f4       	brcc	.+24     	; 0x232a <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    2312:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    2314:	25 e0       	ldi	r18, 0x05	; 5
    2316:	28 0f       	add	r18, r24
    2318:	38 30       	cpi	r19, 0x08	; 8
    231a:	38 f4       	brcc	.+14     	; 0x232a <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    231c:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    231e:	28 30       	cpi	r18, 0x08	; 8
    2320:	20 f4       	brcc	.+8      	; 0x232a <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    2322:	96 95       	lsr	r25
             * store it into the buffer. */
            uint8_t RemainingBits = BitCount % 8;
            if (RemainingBits != 0) {
                uint8_t NewDataRegister = DataRegister;

                while (RemainingBits++ < 8) {
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	09 f4       	brne	.+2      	; 0x232a <__vector_22+0x14a>
                    /* Pad with zeroes to right-align. */
                    NewDataRegister >>= 1;
    2328:	96 95       	lsr	r25
                }

                /* TODO: Prevent buffer overflow */
                *CodecBufferPtr = NewDataRegister;
    232a:	e0 91 b1 20 	lds	r30, 0x20B1
    232e:	f0 91 b2 20 	lds	r31, 0x20B2
    2332:	90 83       	st	Z, r25
            }

            /* Signal, that we have finished sampling */
            Flags.DemodFinished = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	80 93 b3 20 	sts	0x20B3, r24
    233a:	a6 cf       	rjmp	.-180    	; 0x2288 <__vector_22+0xa8>

                } else {
                    /* This is a parity bit. Store it */
                    /* TODO: Store parity and prevent overflow */
                    //*ParityBufferPtr++ = Bit;
                    IsParityBit = false;
    233c:	10 92 a8 20 	sts	0x20A8, r1
    2340:	a3 cf       	rjmp	.-186    	; 0x2288 <__vector_22+0xa8>
            CODEC_TIMER_LOADMOD.CTRLD = TC_EVACT_OFF_gc;

            if (LastBit) {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV1;
            } else {
                CODEC_TIMER_LOADMOD.PER = ISO14443A_FRAME_DELAY_PREV0;
    2342:	8c e7       	ldi	r24, 0x7C	; 124
    2344:	94 e0       	ldi	r25, 0x04	; 4
    2346:	80 93 66 09 	sts	0x0966, r24
    234a:	90 93 67 09 	sts	0x0967, r25
    234e:	c2 cf       	rjmp	.-124    	; 0x22d4 <__vector_22+0xf4>

                if (!IsParityBit) {
                    /* This is a data bit, so shift it into the data register and
                     * hold a local copy of it. */
                    uint8_t NewDataRegister = DataRegister >> 1;
                    NewDataRegister |= (Bit ? 0x80 : 0x00);
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	7c cf       	rjmp	.-264    	; 0x224c <__vector_22+0x6c>

00002354 <__vector_83>:
     * This can be understood as a "poor mans PLL" and makes sure that we are
     * never too far out the bit-grid while sampling. */
    CODEC_TIMER_SAMPLING.CTRLD = TC_EVACT_RESTART_gc | TC_EVSEL_CH0_gc;
}

ISR(CODEC_TIMER_OVF_VECT) {
    2354:	1f 92       	push	r1
    2356:	0f 92       	push	r0
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	0f 92       	push	r0
    235c:	11 24       	eor	r1, r1
    235e:	2f 93       	push	r18
    2360:	3f 93       	push	r19
    2362:	8f 93       	push	r24
    2364:	9f 93       	push	r25
    2366:	af 93       	push	r26
    2368:	bf 93       	push	r27
    236a:	ef 93       	push	r30
    236c:	ff 93       	push	r31
    /* Bit rate timer. Output a half bit on the output. */
    uint8_t Temp8;
    uint16_t Temp16;

    switch (LoadModState) {
    236e:	80 91 a6 20 	lds	r24, 0x20A6
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	8b 30       	cpi	r24, 0x0B	; 11
    2376:	91 05       	cpc	r25, r1
    2378:	80 f5       	brcc	.+96     	; 0x23da <__vector_83+0x86>
    237a:	fc 01       	movw	r30, r24
    237c:	e9 5f       	subi	r30, 0xF9	; 249
    237e:	fe 4f       	sbci	r31, 0xFE	; 254
    2380:	0c 94 ae 21 	jmp	0x435c	; 0x435c <__tablejump2__>

        LoadModState = LOADMOD_PARITY1;
        break;

    case LOADMOD_PARITY1:
        if (*ParityBufferPtr) {
    2384:	e0 91 af 20 	lds	r30, 0x20AF
    2388:	f0 91 b0 20 	lds	r31, 0x20B0
    238c:	80 81       	ld	r24, Z
    238e:	81 11       	cpse	r24, r1
    2390:	ac c0       	rjmp	.+344    	; 0x24ea <__vector_83+0x196>
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    2392:	80 e4       	ldi	r24, 0x40	; 64
    2394:	80 93 45 06 	sts	0x0645, r24
        }

        if (BitSent == BitCount) {
    2398:	20 91 ab 20 	lds	r18, 0x20AB
    239c:	30 91 ac 20 	lds	r19, 0x20AC
    23a0:	80 91 ad 20 	lds	r24, 0x20AD
    23a4:	90 91 ae 20 	lds	r25, 0x20AE
    23a8:	28 17       	cp	r18, r24
    23aa:	39 07       	cpc	r19, r25
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <__vector_83+0x5c>
    23ae:	6c c0       	rjmp	.+216    	; 0x2488 <__vector_83+0x134>
            /* No data left */
            LoadModState = LOADMOD_STOP_BIT0;
        } else {
            /* Fetch next data and continue sending bits. */
            ParityBufferPtr++;
    23b0:	31 96       	adiw	r30, 0x01	; 1
    23b2:	e0 93 af 20 	sts	0x20AF, r30
    23b6:	f0 93 b0 20 	sts	0x20B0, r31
            DataRegister = *++CodecBufferPtr;
    23ba:	e0 91 b1 20 	lds	r30, 0x20B1
    23be:	f0 91 b2 20 	lds	r31, 0x20B2
    23c2:	cf 01       	movw	r24, r30
    23c4:	01 96       	adiw	r24, 0x01	; 1
    23c6:	80 93 b1 20 	sts	0x20B1, r24
    23ca:	90 93 b2 20 	sts	0x20B2, r25
    23ce:	81 81       	ldd	r24, Z+1	; 0x01
    23d0:	80 93 aa 20 	sts	0x20AA, r24
            LoadModState = LOADMOD_DATA0;
    23d4:	84 e0       	ldi	r24, 0x04	; 4
    23d6:	80 93 a6 20 	sts	0x20A6, r24
        break;

    default:
        break;
    }
}
    23da:	ff 91       	pop	r31
    23dc:	ef 91       	pop	r30
    23de:	bf 91       	pop	r27
    23e0:	af 91       	pop	r26
    23e2:	9f 91       	pop	r25
    23e4:	8f 91       	pop	r24
    23e6:	3f 91       	pop	r19
    23e8:	2f 91       	pop	r18
    23ea:	0f 90       	pop	r0
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	0f 90       	pop	r0
    23f0:	1f 90       	pop	r1
    23f2:	18 95       	reti
        break;

    case LOADMOD_START:
        /* Application produced data. With this interrupt we are aligned to the bit-grid.
         * Start subcarrier generation and align to bitrate. */
        CODEC_TIMER_LOADMOD.PER = ISO14443A_BIT_RATE_CYCLES / 2 - 1;
    23f4:	8f e3       	ldi	r24, 0x3F	; 63
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	80 93 66 09 	sts	0x0966, r24
    23fc:	90 93 67 09 	sts	0x0967, r25
        CODEC_SUBCARRIER_TIMER.CTRLA = TC_CLKSEL_EVCH6_gc;
    2400:	8e e0       	ldi	r24, 0x0E	; 14
    2402:	80 93 00 08 	sts	0x0800, r24

        /* Fallthrough to first bit */

    case LOADMOD_START_BIT0:
    	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    2406:	80 e4       	ldi	r24, 0x40	; 64
    2408:	80 93 45 06 	sts	0x0645, r24
        LoadModState = LOADMOD_START_BIT1;
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	80 93 a6 20 	sts	0x20A6, r24
        break;
    2412:	e3 cf       	rjmp	.-58     	; 0x23da <__vector_83+0x86>

    case LOADMOD_START_BIT1:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2414:	80 e4       	ldi	r24, 0x40	; 64
    2416:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_DATA0;
    241a:	84 e0       	ldi	r24, 0x04	; 4
    241c:	80 93 a6 20 	sts	0x20A6, r24

        /* Fetch first byte */
        DataRegister = *CodecBufferPtr;
    2420:	e0 91 b1 20 	lds	r30, 0x20B1
    2424:	f0 91 b2 20 	lds	r31, 0x20B2
    2428:	80 81       	ld	r24, Z
    242a:	80 93 aa 20 	sts	0x20AA, r24
        break;
    242e:	d5 cf       	rjmp	.-86     	; 0x23da <__vector_83+0x86>

    case LOADMOD_DATA0:
        if (DataRegister & 1) {
    2430:	80 91 aa 20 	lds	r24, 0x20AA
    2434:	80 fd       	sbrc	r24, 0
    2436:	64 c0       	rjmp	.+200    	; 0x2500 <__vector_83+0x1ac>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    2438:	80 e4       	ldi	r24, 0x40	; 64
    243a:	80 93 46 06 	sts	0x0646, r24
        }

        LoadModState = LOADMOD_DATA1;
    243e:	85 e0       	ldi	r24, 0x05	; 5
    2440:	80 93 a6 20 	sts	0x20A6, r24
        break;
    2444:	ca cf       	rjmp	.-108    	; 0x23da <__vector_83+0x86>

    case LOADMOD_DATA1:
        Temp8 = DataRegister;
    2446:	80 91 aa 20 	lds	r24, 0x20AA

        if (Temp8 & 1) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    244a:	90 e4       	ldi	r25, 0x40	; 64
        break;

    case LOADMOD_DATA1:
        Temp8 = DataRegister;

        if (Temp8 & 1) {
    244c:	80 fd       	sbrc	r24, 0
    244e:	55 c0       	rjmp	.+170    	; 0x24fa <__vector_83+0x1a6>
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    2450:	90 93 45 06 	sts	0x0645, r25
        }

        DataRegister = Temp8 >> 1;
    2454:	86 95       	lsr	r24
    2456:	80 93 aa 20 	sts	0x20AA, r24

        Temp16 = BitSent;
    245a:	80 91 ab 20 	lds	r24, 0x20AB
    245e:	90 91 ac 20 	lds	r25, 0x20AC
        BitSent = ++Temp16;
    2462:	01 96       	adiw	r24, 0x01	; 1
    2464:	80 93 ab 20 	sts	0x20AB, r24
    2468:	90 93 ac 20 	sts	0x20AC, r25

        if ((Temp16 & 0x07) == 0) {
    246c:	9c 01       	movw	r18, r24
    246e:	27 70       	andi	r18, 0x07	; 7
    2470:	33 27       	eor	r19, r19
    2472:	23 2b       	or	r18, r19
    2474:	09 f4       	brne	.+2      	; 0x2478 <__vector_83+0x124>
    2476:	48 c0       	rjmp	.+144    	; 0x2508 <__vector_83+0x1b4>
            /* Byte boundary. Load parity bit and output it later. */
            LoadModState = LOADMOD_PARITY0;
            break;
        }

        if (Temp16 == BitCount) {
    2478:	20 91 ad 20 	lds	r18, 0x20AD
    247c:	30 91 ae 20 	lds	r19, 0x20AE
    2480:	82 17       	cp	r24, r18
    2482:	93 07       	cpc	r25, r19
    2484:	09 f0       	breq	.+2      	; 0x2488 <__vector_83+0x134>
    2486:	a6 cf       	rjmp	.-180    	; 0x23d4 <__vector_83+0x80>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        }

        if (BitSent == BitCount) {
            /* No data left */
            LoadModState = LOADMOD_STOP_BIT0;
    2488:	88 e0       	ldi	r24, 0x08	; 8
    248a:	80 93 a6 20 	sts	0x20A6, r24
    248e:	a5 cf       	rjmp	.-182    	; 0x23da <__vector_83+0x86>
        LoadModState = LOADMOD_DATA0;

        break;

    case LOADMOD_PARITY0:
        if (*ParityBufferPtr) {
    2490:	e0 91 af 20 	lds	r30, 0x20AF
    2494:	f0 91 b0 20 	lds	r31, 0x20B0
    2498:	80 81       	ld	r24, Z
    249a:	81 11       	cpse	r24, r1
    249c:	2a c0       	rjmp	.+84     	; 0x24f2 <__vector_83+0x19e>
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
        } else {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    249e:	80 e4       	ldi	r24, 0x40	; 64
    24a0:	80 93 46 06 	sts	0x0646, r24
        }

        LoadModState = LOADMOD_PARITY1;
    24a4:	87 e0       	ldi	r24, 0x07	; 7
    24a6:	80 93 a6 20 	sts	0x20A6, r24
        break;
    24aa:	97 cf       	rjmp	.-210    	; 0x23da <__vector_83+0x86>
        }

        break;

    case LOADMOD_STOP_BIT0:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    24ac:	80 e4       	ldi	r24, 0x40	; 64
    24ae:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_STOP_BIT1;
    24b2:	89 e0       	ldi	r24, 0x09	; 9
    24b4:	80 93 a6 20 	sts	0x20A6, r24
        break;
    24b8:	90 cf       	rjmp	.-224    	; 0x23da <__vector_83+0x86>

    case LOADMOD_STOP_BIT1:
    	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    24ba:	80 e4       	ldi	r24, 0x40	; 64
    24bc:	80 93 46 06 	sts	0x0646, r24
        LoadModState = LOADMOD_FINISHED;
    24c0:	8a e0       	ldi	r24, 0x0A	; 10
    24c2:	80 93 a6 20 	sts	0x20A6, r24
        break;
    24c6:	89 cf       	rjmp	.-238    	; 0x23da <__vector_83+0x86>

    case LOADMOD_FINISHED:
        /* We have written all of our bits. Deactivate the loadmod
         * timer. Also disable the bit-rate interrupt again. And
         * stop the subcarrier divider. */
        CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_OFF_gc;
    24c8:	10 92 40 09 	sts	0x0940, r1
        CODEC_TIMER_LOADMOD.INTCTRLA = 0;
    24cc:	10 92 46 09 	sts	0x0946, r1
        CODEC_SUBCARRIER_TIMER.CTRLA = TC_CLKSEL_OFF_gc;
    24d0:	10 92 00 08 	sts	0x0800, r1

        /* Signal application that we have finished loadmod */
        Flags.LoadmodFinished = 1;
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	80 93 b4 20 	sts	0x20B4, r24
        break;
    24da:	7f cf       	rjmp	.-258    	; 0x23da <__vector_83+0x86>
    uint16_t Temp16;

    switch (LoadModState) {
    case LOADMOD_FDT:
        /* No data has been produced, but FDT has ended. Switch over to bit-grid aligning. */
        CODEC_TIMER_LOADMOD.PER = ISO14443A_BIT_GRID_CYCLES - 1;
    24dc:	8f e7       	ldi	r24, 0x7F	; 127
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	80 93 66 09 	sts	0x0966, r24
    24e4:	90 93 67 09 	sts	0x0967, r25
        break;
    24e8:	78 cf       	rjmp	.-272    	; 0x23da <__vector_83+0x86>
        LoadModState = LOADMOD_PARITY1;
        break;

    case LOADMOD_PARITY1:
        if (*ParityBufferPtr) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    24ea:	80 e4       	ldi	r24, 0x40	; 64
    24ec:	80 93 46 06 	sts	0x0646, r24
    24f0:	53 cf       	rjmp	.-346    	; 0x2398 <__vector_83+0x44>

        break;

    case LOADMOD_PARITY0:
        if (*ParityBufferPtr) {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    24f2:	80 e4       	ldi	r24, 0x40	; 64
    24f4:	80 93 45 06 	sts	0x0645, r24
    24f8:	d5 cf       	rjmp	.-86     	; 0x24a4 <__vector_83+0x150>

    case LOADMOD_DATA1:
        Temp8 = DataRegister;

        if (Temp8 & 1) {
        	CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    24fa:	90 93 46 06 	sts	0x0646, r25
    24fe:	aa cf       	rjmp	.-172    	; 0x2454 <__vector_83+0x100>
        DataRegister = *CodecBufferPtr;
        break;

    case LOADMOD_DATA0:
        if (DataRegister & 1) {
        	CODEC_LOADMOD_PORT.OUTSET = CODEC_LOADMOD_MASK;
    2500:	80 e4       	ldi	r24, 0x40	; 64
    2502:	80 93 45 06 	sts	0x0645, r24
    2506:	9b cf       	rjmp	.-202    	; 0x243e <__vector_83+0xea>
        Temp16 = BitSent;
        BitSent = ++Temp16;

        if ((Temp16 & 0x07) == 0) {
            /* Byte boundary. Load parity bit and output it later. */
            LoadModState = LOADMOD_PARITY0;
    2508:	86 e0       	ldi	r24, 0x06	; 6
    250a:	80 93 a6 20 	sts	0x20A6, r24
            break;
    250e:	65 cf       	rjmp	.-310    	; 0x23da <__vector_83+0x86>

00002510 <ISO14443ACodecInit>:
    default:
        break;
    }
}

void ISO14443ACodecInit(void) {
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
static volatile LoadModStateType LoadModState;
static volatile bool SamplePosition;

static void Initialize(void) {
    /* Configure CARRIER input pin and route it to EVSYS */
    CODEC_CARRIER_IN_PORT.DIRCLR = CODEC_CARRIER_IN_MASK;
    2514:	e0 e4       	ldi	r30, 0x40	; 64
    2516:	f6 e0       	ldi	r31, 0x06	; 6
    2518:	84 e0       	ldi	r24, 0x04	; 4
    251a:	82 83       	std	Z+2, r24	; 0x02
    CODEC_CARRIER_IN_PORT.CODEC_CARRIER_IN_PINCTRL = PORT_ISC_BOTHEDGES_gc;
    251c:	12 8a       	std	Z+18, r1	; 0x12
    EVSYS.CH6MUX = CODEC_CARRIER_IN_EVMUX;
    251e:	c0 e8       	ldi	r28, 0x80	; 128
    2520:	d1 e0       	ldi	r29, 0x01	; 1
    2522:	82 e6       	ldi	r24, 0x62	; 98
    2524:	8e 83       	std	Y+6, r24	; 0x06

    /* Configure two DEMOD pins for input.
     * Configure event channel 0 for rising edge (begin of modulation pause)
     * Configure event channel 1 for falling edge (end of modulation pause) */
    CODEC_DEMOD_IN_PORT.DIRCLR = CODEC_DEMOD_IN_MASK;
    2526:	a0 e2       	ldi	r26, 0x20	; 32
    2528:	b6 e0       	ldi	r27, 0x06	; 6
    252a:	85 e0       	ldi	r24, 0x05	; 5
    252c:	12 96       	adiw	r26, 0x02	; 2
    252e:	8c 93       	st	X, r24
    2530:	12 97       	sbiw	r26, 0x02	; 2
    CODEC_DEMOD_IN_PORT.CODEC_DEMOD_IN_PINCTRL0 = PORT_ISC_RISING_gc;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	50 96       	adiw	r26, 0x10	; 16
    2536:	8c 93       	st	X, r24
    2538:	50 97       	sbiw	r26, 0x10	; 16
    CODEC_DEMOD_IN_PORT.CODEC_DEMOD_IN_PINCTRL1 = PORT_ISC_FALLING_gc;
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	52 96       	adiw	r26, 0x12	; 18
    253e:	8c 93       	st	X, r24
    2540:	52 97       	sbiw	r26, 0x12	; 18
    CODEC_DEMOD_IN_PORT.INT0MASK = 0;
    2542:	1a 96       	adiw	r26, 0x0a	; 10
    2544:	1c 92       	st	X, r1
    2546:	1a 97       	sbiw	r26, 0x0a	; 10
    CODEC_DEMOD_IN_PORT.INTCTRL = PORT_INT0LVL_HI_gc;
    2548:	83 e0       	ldi	r24, 0x03	; 3
    254a:	19 96       	adiw	r26, 0x09	; 9
    254c:	8c 93       	st	X, r24
    EVSYS.CH0MUX = CODEC_DEMOD_IN_EVMUX0;
    254e:	98 e5       	ldi	r25, 0x58	; 88
    2550:	98 83       	st	Y, r25
    EVSYS.CH1MUX = CODEC_DEMOD_IN_EVMUX1;
    2552:	9a e5       	ldi	r25, 0x5A	; 90
    2554:	99 83       	std	Y+1, r25	; 0x01

    /* Configure LOADMOD and SUBCARRIER output pins.
     * Disable PSK modulation by setting pin to low. */
    CODEC_LOADMOD_PORT.DIRSET = CODEC_LOADMOD_MASK;
    2556:	90 e4       	ldi	r25, 0x40	; 64
    2558:	91 83       	std	Z+1, r25	; 0x01
    CODEC_LOADMOD_PORT.OUTCLR = CODEC_LOADMOD_MASK;
    255a:	96 83       	std	Z+6, r25	; 0x06
    CODEC_SUBCARRIER_PORT.DIRSET = CODEC_SUBCARRIER_MASK;
    255c:	81 83       	std	Z+1, r24	; 0x01
    CODEC_SUBCARRIER_PORT.OUTCLR = CODEC_SUBCARRIER_MASK;
    255e:	86 83       	std	Z+6, r24	; 0x06

    /* Configure subcarrier generation with 50% DC output using OOK */
    CODEC_SUBCARRIER_TIMER.PER = ISO14443A_SUBCARRIER_DIVIDER - 1;
    2560:	e0 e0       	ldi	r30, 0x00	; 0
    2562:	f8 e0       	ldi	r31, 0x08	; 8
    2564:	8f e0       	ldi	r24, 0x0F	; 15
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	86 a3       	std	Z+38, r24	; 0x26
    256a:	97 a3       	std	Z+39, r25	; 0x27
    CODEC_SUBCARRIER_TIMER.CODEC_SUBCARRIER_CC_OOK = ISO14443A_SUBCARRIER_DIVIDER/2;
    256c:	88 e0       	ldi	r24, 0x08	; 8
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	82 a7       	std	Z+42, r24	; 0x2a
    2572:	93 a7       	std	Z+43, r25	; 0x2b
    CODEC_SUBCARRIER_TIMER.CTRLB = CODEC_SUBCARRIER_CCEN_OOK | TC_WGMODE_SINGLESLOPE_gc;
    2574:	83 e2       	ldi	r24, 0x23	; 35
    2576:	81 83       	std	Z+1, r24	; 0x01
void ISO14443ACodecInit(void) {
    /* Initialize common peripherals and start listening
     * for incoming data. */
    Initialize();
    StartDemod();
}
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28

void ISO14443ACodecInit(void) {
    /* Initialize common peripherals and start listening
     * for incoming data. */
    Initialize();
    StartDemod();
    257c:	cf cd       	rjmp	.-1122   	; 0x211c <StartDemod>

0000257e <ISO14443ACodecTask>:
}

void ISO14443ACodecTask(void) {
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    if (Flags.DemodFinished) {
    2582:	80 91 b3 20 	lds	r24, 0x20B3
    2586:	88 23       	and	r24, r24
    2588:	c1 f0       	breq	.+48     	; 0x25ba <ISO14443ACodecTask+0x3c>
        Flags.DemodFinished = 0;
    258a:	10 92 b3 20 	sts	0x20B3, r1
INLINE void CodecTask(void) {
    ActiveConfiguration.CodecTaskFunc();
}

INLINE void CodecSetDemodPower(bool bOnOff) {
    CODEC_DEMOD_POWER_PORT.DIRSET = CODEC_DEMOD_POWER_MASK;
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	80 93 21 06 	sts	0x0621, r24

    if (bOnOff) {
        CODEC_DEMOD_POWER_PORT.OUTSET = CODEC_DEMOD_POWER_MASK;
    } else {
        CODEC_DEMOD_POWER_PORT.OUTCLR = CODEC_DEMOD_POWER_MASK;
    2594:	80 93 26 06 	sts	0x0626, r24
        /* Reception finished. Process the received bytes */
        CodecSetDemodPower(false);

        uint16_t DemodBitCount = BitCount;
    2598:	60 91 ad 20 	lds	r22, 0x20AD
    259c:	70 91 ae 20 	lds	r23, 0x20AE
        uint16_t AnswerBitCount = ISO14443A_APP_NO_RESPONSE;

        if (DemodBitCount > 0) {
    25a0:	61 15       	cp	r22, r1
    25a2:	71 05       	cpc	r23, r1
    25a4:	89 f4       	brne	.+34     	; 0x25c8 <ISO14443ACodecTask+0x4a>
INLINE uint16_t ApplicationProcess(uint8_t* ByteBuffer, uint16_t ByteCount) {
    return ActiveConfiguration.ApplicationProcessFunc(ByteBuffer, ByteCount);
}

INLINE void ApplicationReset(void) {
    ActiveConfiguration.ApplicationResetFunc();
    25a6:	e0 91 ef 20 	lds	r30, 0x20EF
    25aa:	f0 91 f0 20 	lds	r31, 0x20F0
    25ae:	09 95       	icall
            CodecBufferPtr = CodecBuffer;
            ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
            LoadModState = LOADMOD_START;
        } else {
            /* No data to be processed. Disable loadmodding and start listening again */
            CODEC_TIMER_LOADMOD.CTRLA = TC_CLKSEL_OFF_gc;
    25b0:	10 92 40 09 	sts	0x0940, r1
            CODEC_TIMER_LOADMOD.INTCTRLA = 0;
    25b4:	10 92 46 09 	sts	0x0946, r1

            StartDemod();
    25b8:	b1 dd       	rcall	.-1182   	; 0x211c <StartDemod>
        }
    }

    if (Flags.LoadmodFinished) {
    25ba:	80 91 b4 20 	lds	r24, 0x20B4
    25be:	81 11       	cpse	r24, r1
    25c0:	2a c0       	rjmp	.+84     	; 0x2616 <ISO14443ACodecTask+0x98>
        Flags.LoadmodFinished = 0;
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    }
}
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	08 95       	ret
INLINE void ApplicationTask(void) {
    ActiveConfiguration.ApplicationTaskFunc();
}

INLINE uint16_t ApplicationProcess(uint8_t* ByteBuffer, uint16_t ByteCount) {
    return ActiveConfiguration.ApplicationProcessFunc(ByteBuffer, ByteCount);
    25c8:	e0 91 f3 20 	lds	r30, 0x20F3
    25cc:	f0 91 f4 20 	lds	r31, 0x20F4
    25d0:	80 e1       	ldi	r24, 0x10	; 16
    25d2:	92 e2       	ldi	r25, 0x22	; 34
    25d4:	09 95       	icall

        if (DemodBitCount > 0) {
            /* Call application if we received data */
            AnswerBitCount = ApplicationProcess(CodecBuffer, DemodBitCount);

            if (AnswerBitCount & ISO14443A_APP_CUSTOM_PARITY) {
    25d6:	94 ff       	sbrs	r25, 4
    25d8:	23 c0       	rjmp	.+70     	; 0x2620 <ISO14443ACodecTask+0xa2>
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
    25da:	9f 7e       	andi	r25, 0xEF	; 239
            }
        } else {
            ApplicationReset();
        }

        if (AnswerBitCount != ISO14443A_APP_NO_RESPONSE) {
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	41 f3       	breq	.-48     	; 0x25b0 <ISO14443ACodecTask+0x32>
            BitCount = AnswerBitCount;
    25e0:	80 93 ad 20 	sts	0x20AD, r24
    25e4:	90 93 ae 20 	sts	0x20AE, r25
            BitSent = 0;
    25e8:	10 92 ab 20 	sts	0x20AB, r1
    25ec:	10 92 ac 20 	sts	0x20AC, r1
            CodecBufferPtr = CodecBuffer;
    25f0:	80 e1       	ldi	r24, 0x10	; 16
    25f2:	92 e2       	ldi	r25, 0x22	; 34
    25f4:	80 93 b1 20 	sts	0x20B1, r24
    25f8:	90 93 b2 20 	sts	0x20B2, r25
            ParityBufferPtr = &CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET];
    25fc:	80 e9       	ldi	r24, 0x90	; 144
    25fe:	92 e2       	ldi	r25, 0x22	; 34
    2600:	80 93 af 20 	sts	0x20AF, r24
    2604:	90 93 b0 20 	sts	0x20B0, r25
            LoadModState = LOADMOD_START;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	80 93 a6 20 	sts	0x20A6, r24

            StartDemod();
        }
    }

    if (Flags.LoadmodFinished) {
    260e:	80 91 b4 20 	lds	r24, 0x20B4
    2612:	88 23       	and	r24, r24
    2614:	b1 f2       	breq	.-84     	; 0x25c2 <ISO14443ACodecTask+0x44>
        Flags.LoadmodFinished = 0;
    2616:	10 92 b4 20 	sts	0x20B4, r1
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    }
}
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28

    if (Flags.LoadmodFinished) {
        Flags.LoadmodFinished = 0;
        /* Load modulation has been finished. Stop it and start to listen
         * for incoming data again. */
        StartDemod();
    261e:	7e cd       	rjmp	.-1284   	; 0x211c <StartDemod>
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
    2620:	ac 01       	movw	r20, r24
    2622:	56 95       	lsr	r21
    2624:	47 95       	ror	r20
    2626:	56 95       	lsr	r21
    2628:	47 95       	ror	r20
    262a:	56 95       	lsr	r21
    262c:	47 95       	ror	r20
    262e:	41 15       	cp	r20, r1
    2630:	51 05       	cpc	r21, r1
    2632:	a1 f2       	breq	.-88     	; 0x25dc <ISO14443ACodecTask+0x5e>
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
                            ODD_PARITY(CodecBuffer[i]);
    263a:	f9 01       	movw	r30, r18
    263c:	e0 5f       	subi	r30, 0xF0	; 240
    263e:	fd 4d       	sbci	r31, 0xDD	; 221
    2640:	60 81       	ld	r22, Z
    2642:	06 2e       	mov	r0, r22
    2644:	62 95       	swap	r22
    2646:	60 25       	eor	r22, r0
    2648:	06 2e       	mov	r0, r22
    264a:	66 95       	lsr	r22
    264c:	66 95       	lsr	r22
    264e:	60 25       	eor	r22, r0
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
                    /* For each whole byte, generate a parity bit. */
                    CodecBuffer[ISO14443A_BUFFER_PARITY_OFFSET + i] =
    2650:	e0 58       	subi	r30, 0x80	; 128
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
                            ODD_PARITY(CodecBuffer[i]);
    2654:	6f 5f       	subi	r22, 0xFF	; 255
    2656:	66 95       	lsr	r22
    2658:	61 70       	andi	r22, 0x01	; 1
    265a:	c6 2f       	mov	r28, r22
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	d2 2f       	mov	r29, r18
    2660:	21 e0       	ldi	r18, 0x01	; 1
    2662:	c2 27       	eor	r28, r18
    2664:	c0 83       	st	Z, r28
                /* Application has generated it's own parity bits.
                 * Clear this option bit. */
                AnswerBitCount &= ~ISO14443A_APP_CUSTOM_PARITY;
            } else {
                /* We have to generate the parity bits ourself */
                for (uint8_t i = 0; i < (AnswerBitCount / 8); i++) {
    2666:	7f 5f       	subi	r23, 0xFF	; 255
    2668:	27 2f       	mov	r18, r23
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	24 17       	cp	r18, r20
    266e:	35 07       	cpc	r19, r21
    2670:	20 f3       	brcs	.-56     	; 0x263a <ISO14443ACodecTask+0xbc>
    2672:	b6 cf       	rjmp	.-148    	; 0x25e0 <ISO14443ACodecTask+0x62>

00002674 <MifareClassicAppInit1K>:
    Block[11] = Block[3];
}

void MifareClassicAppInit1K(void)
{
    State = STATE_IDLE;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	80 93 d1 20 	sts	0x20D1, r24
    CardATQAValue = MFCLASSIC_1K_ATQA_VALUE;
    267a:	84 e0       	ldi	r24, 0x04	; 4
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	80 93 b6 20 	sts	0x20B6, r24
    2682:	90 93 b7 20 	sts	0x20B7, r25
    CardSAKValue = MFCLASSIC_1K_SAK_CL1_VALUE;
    2686:	88 e0       	ldi	r24, 0x08	; 8
    2688:	80 93 b5 20 	sts	0x20B5, r24
    268c:	08 95       	ret

0000268e <MifareClassicAppInit4K>:
}

void MifareClassicAppInit4K(void)
{
    State = STATE_IDLE;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	80 93 d1 20 	sts	0x20D1, r24
    CardATQAValue = MFCLASSIC_4K_ATQA_VALUE;
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	80 93 b6 20 	sts	0x20B6, r24
    269c:	90 93 b7 20 	sts	0x20B7, r25
    CardSAKValue = MFCLASSIC_4K_SAK_CL1_VALUE;
    26a0:	88 e1       	ldi	r24, 0x18	; 24
    26a2:	80 93 b5 20 	sts	0x20B5, r24
    26a6:	08 95       	ret

000026a8 <MifareClassicAppReset>:
}

void MifareClassicAppReset(void)
{
    State = STATE_IDLE;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	80 93 d1 20 	sts	0x20D1, r24
    26ae:	08 95       	ret

000026b0 <MifareClassicAppTask>:
}

void MifareClassicAppTask(void)
{
    26b0:	08 95       	ret

000026b2 <MifareClassicAppProcess>:

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    26b2:	7f 92       	push	r7
    26b4:	8f 92       	push	r8
    26b6:	9f 92       	push	r9
    26b8:	af 92       	push	r10
    26ba:	bf 92       	push	r11
    26bc:	cf 92       	push	r12
    26be:	df 92       	push	r13
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	2e 97       	sbiw	r28, 0x0e	; 14
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	8c 01       	movw	r16, r24
    switch(State) {
    26d8:	40 91 d1 20 	lds	r20, 0x20D1
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	4a 30       	cpi	r20, 0x0A	; 10
    26e0:	51 05       	cpc	r21, r1
    26e2:	98 f0       	brcs	.+38     	; 0x270a <MifareClassicAppProcess+0x58>

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
            return true;
        } else {
            /* We have not been selected. Don't send anything. */
            *BitCount = 0;
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
}
    26e8:	2e 96       	adiw	r28, 0x0e	; 14
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
    26fe:	bf 90       	pop	r11
    2700:	af 90       	pop	r10
    2702:	9f 90       	pop	r9
    2704:	8f 90       	pop	r8
    2706:	7f 90       	pop	r7
    2708:	08 95       	ret

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    270a:	fa 01       	movw	r30, r20
    270c:	ee 5e       	subi	r30, 0xEE	; 238
    270e:	fe 4f       	sbci	r31, 0xFE	; 254
    2710:	0c 94 ae 21 	jmp	0x435c	; 0x435c <__tablejump2__>
    2714:	7c 01       	movw	r14, r24
    2716:	d1 2c       	mov	r13, r1
         * check for CRC. Then write the data when ReadOnly mode is not
         * activated. */

        /* We receive 16 bytes of data to be written and 2 bytes CRCA. Decrypt */
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();
    2718:	f7 01       	movw	r30, r14
    271a:	c0 80       	ld	r12, Z
    271c:	99 d5       	rcall	.+2866   	; 0x3250 <Crypto1Byte>
    271e:	8c 25       	eor	r24, r12
    2720:	d7 01       	movw	r26, r14
    2722:	8d 93       	st	X+, r24
    2724:	7d 01       	movw	r14, r26
         * sending the data to be written. Decrypt the data first and
         * check for CRC. Then write the data when ReadOnly mode is not
         * activated. */

        /* We receive 16 bytes of data to be written and 2 bytes CRCA. Decrypt */
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
    2726:	d3 94       	inc	r13
    2728:	b2 e1       	ldi	r27, 0x12	; 18
    272a:	db 12       	cpse	r13, r27
    272c:	f5 cf       	rjmp	.-22     	; 0x2718 <MifareClassicAppProcess+0x66>
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
    272e:	60 e1       	ldi	r22, 0x10	; 16
    2730:	70 e0       	ldi	r23, 0x00	; 0
    2732:	c8 01       	movw	r24, r16
    2734:	e5 d3       	rcall	.+1994   	; 0x2f00 <ISO14443ACheckCRCA>
    2736:	88 23       	and	r24, r24
    2738:	09 f4       	brne	.+2      	; 0x273c <MifareClassicAppProcess+0x8a>
    273a:	ec c1       	rjmp	.+984    	; 0x2b14 <MifareClassicAppProcess+0x462>
            if (!ActiveConfiguration.ReadOnly) {
    273c:	80 91 fc 20 	lds	r24, 0x20FC
    2740:	88 23       	and	r24, r24
    2742:	09 f4       	brne	.+2      	; 0x2746 <MifareClassicAppProcess+0x94>
    2744:	ed c1       	rjmp	.+986    	; 0x2b20 <MifareClassicAppProcess+0x46e>
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
            } else {
                /* Silently ignore in ReadOnly mode */
            }

            Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2746:	97 d5       	rcall	.+2862   	; 0x3276 <Crypto1Nibble>
    2748:	9a e0       	ldi	r25, 0x0A	; 10
    274a:	98 27       	eor	r25, r24
    274c:	d8 01       	movw	r26, r16
    274e:	9c 93       	st	X, r25
        } else {
            /* CRC Error. */
            Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
        }

        State = STATE_AUTHED_IDLE;
    2750:	85 e0       	ldi	r24, 0x05	; 5
    2752:	80 93 d1 20 	sts	0x20D1, r24
        return ACK_NAK_FRAME_SIZE;
    2756:	84 e0       	ldi	r24, 0x04	; 4
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	c6 cf       	rjmp	.-116    	; 0x26e8 <MifareClassicAppProcess+0x36>
    275c:	7c 01       	movw	r14, r24

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    275e:	56 e0       	ldi	r21, 0x06	; 6
    2760:	d5 2e       	mov	r13, r21
         * decrypt the data and check CRC. Read data from the requested block
         * address into the global block buffer and check for integrity. Then
         * add or subtract according to issued command if necessary and store
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();
    2762:	d7 01       	movw	r26, r14
    2764:	cc 90       	ld	r12, X
    2766:	74 d5       	rcall	.+2792   	; 0x3250 <Crypto1Byte>
    2768:	8c 25       	eor	r24, r12
    276a:	f7 01       	movw	r30, r14
    276c:	81 93       	st	Z+, r24
    276e:	7f 01       	movw	r14, r30
    2770:	da 94       	dec	r13
         * been issued earlier and the reader is now sending the data. First,
         * decrypt the data and check CRC. Read data from the requested block
         * address into the global block buffer and check for integrity. Then
         * add or subtract according to issued command if necessary and store
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
    2772:	b9 f7       	brne	.-18     	; 0x2762 <MifareClassicAppProcess+0xb0>
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_VALUE_SIZE )) {
    2774:	64 e0       	ldi	r22, 0x04	; 4
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	c8 01       	movw	r24, r16
    277a:	c2 d3       	rcall	.+1924   	; 0x2f00 <ISO14443ACheckCRCA>
    277c:	81 11       	cpse	r24, r1
    277e:	b0 c1       	rjmp	.+864    	; 0x2ae0 <MifareClassicAppProcess+0x42e>
                /* Not sure if this is the correct error code.. */
                Buffer[0] = NAK_OTHER_ERROR ^ Crypto1Nibble();
            }
        } else {
            /* CRC Error. */
            Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2780:	7a d5       	rcall	.+2804   	; 0x3276 <Crypto1Nibble>
    2782:	91 e0       	ldi	r25, 0x01	; 1
    2784:	98 27       	eor	r25, r24
    2786:	d8 01       	movw	r26, r16
    2788:	9c 93       	st	X, r25
    278a:	e2 cf       	rjmp	.-60     	; 0x2750 <MifareClassicAppProcess+0x9e>
uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    case STATE_IDLE:
    case STATE_HALT:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    278c:	20 91 b6 20 	lds	r18, 0x20B6
    2790:	90 91 b7 20 	lds	r25, 0x20B7
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    2794:	d8 01       	movw	r26, r16
    2796:	8c 91       	ld	r24, X
    2798:	86 32       	cpi	r24, 0x26	; 38
    279a:	19 f0       	breq	.+6      	; 0x27a2 <MifareClassicAppProcess+0xf0>
    279c:	82 35       	cpi	r24, 0x52	; 82
    279e:	09 f0       	breq	.+2      	; 0x27a2 <MifareClassicAppProcess+0xf0>
    27a0:	a1 cf       	rjmp	.-190    	; 0x26e4 <MifareClassicAppProcess+0x32>
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    27a2:	f8 01       	movw	r30, r16
    27a4:	20 83       	st	Z, r18
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    27a6:	91 83       	std	Z+1, r25	; 0x01
        }
        break;

    case STATE_READY:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
            State = STATE_READY;
    27a8:	82 e0       	ldi	r24, 0x02	; 2
    27aa:	80 93 d1 20 	sts	0x20D1, r24

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    27ae:	80 e1       	ldi	r24, 0x10	; 16
    27b0:	90 e0       	ldi	r25, 0x00	; 0
            return BitCount;
    27b2:	9a cf       	rjmp	.-204    	; 0x26e8 <MifareClassicAppProcess+0x36>
            return BitCount;
        }
        break;

    case STATE_READY:
        if (ISO14443AWakeUp(Buffer, &BitCount, CardATQAValue)) {
    27b4:	20 91 b6 20 	lds	r18, 0x20B6
    27b8:	90 91 b7 20 	lds	r25, 0x20B7
INLINE
bool ISO14443AWakeUp(void* Buffer, uint16_t* BitCount, uint16_t ATQAValue)
{
    uint8_t* DataPtr = (uint8_t*) Buffer;

    if ( (DataPtr[0] == ISO14443A_CMD_REQA) || (DataPtr[0] == ISO14443A_CMD_WUPA) ){
    27bc:	d8 01       	movw	r26, r16
    27be:	8c 91       	ld	r24, X
    27c0:	86 32       	cpi	r24, 0x26	; 38
    27c2:	79 f3       	breq	.-34     	; 0x27a2 <MifareClassicAppProcess+0xf0>
    27c4:	82 35       	cpi	r24, 0x52	; 82
    27c6:	69 f3       	breq	.-38     	; 0x27a2 <MifareClassicAppProcess+0xf0>
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL1) {
    27c8:	83 39       	cpi	r24, 0x93	; 147
    27ca:	09 f4       	brne	.+2      	; 0x27ce <MifareClassicAppProcess+0x11c>
    27cc:	cb c1       	rjmp	.+918    	; 0x2b64 <MifareClassicAppProcess+0x4b2>
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, CMD_HALT_FRAME_SIZE)) {
                    /* According to ISO14443, we must not send anything
                    * in order to acknowledge the HALT command. */
                    State = STATE_HALT;
    27ce:	10 92 d1 20 	sts	0x20D1, r1
                    return ISO14443A_APP_NO_RESPONSE;
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	88 cf       	rjmp	.-240    	; 0x26e8 <MifareClassicAppProcess+0x36>

    case STATE_AUTHING:
        /* Reader delivers an encrypted nonce. We use it
        * to setup the crypto1 LFSR in nonlinear feedback mode.
        * Furthermore it delivers an encrypted answer. Decrypt and check it */
        Crypto1Auth(&Buffer[0]);
    27d8:	16 d5       	rcall	.+2604   	; 0x3206 <Crypto1Auth>
    27da:	68 01       	movw	r12, r16
    27dc:	b4 e0       	ldi	r27, 0x04	; 4
    27de:	cb 0e       	add	r12, r27
    27e0:	d1 1c       	adc	r13, r1

        for (uint8_t i=0; i<4; i++)
    27e2:	b1 2c       	mov	r11, r1
            Buffer[i+4] ^= Crypto1Byte();
    27e4:	f6 01       	movw	r30, r12
    27e6:	a0 80       	ld	r10, Z
    27e8:	33 d5       	rcall	.+2662   	; 0x3250 <Crypto1Byte>
    27ea:	8a 25       	eor	r24, r10
    27ec:	d6 01       	movw	r26, r12
    27ee:	8d 93       	st	X+, r24
    27f0:	6d 01       	movw	r12, r26
        /* Reader delivers an encrypted nonce. We use it
        * to setup the crypto1 LFSR in nonlinear feedback mode.
        * Furthermore it delivers an encrypted answer. Decrypt and check it */
        Crypto1Auth(&Buffer[0]);

        for (uint8_t i=0; i<4; i++)
    27f2:	b3 94       	inc	r11
    27f4:	b4 e0       	ldi	r27, 0x04	; 4
    27f6:	bb 12       	cpse	r11, r27
    27f8:	f5 cf       	rjmp	.-22     	; 0x27e4 <MifareClassicAppProcess+0x132>
            Buffer[i+4] ^= Crypto1Byte();

        if ((Buffer[4] == ReaderResponse[0]) &&
    27fa:	f8 01       	movw	r30, r16
    27fc:	94 81       	ldd	r25, Z+4	; 0x04
    27fe:	80 91 c9 20 	lds	r24, 0x20C9
    2802:	98 17       	cp	r25, r24
    2804:	09 f4       	brne	.+2      	; 0x2808 <MifareClassicAppProcess+0x156>
    2806:	2e c1       	rjmp	.+604    	; 0x2a64 <MifareClassicAppProcess+0x3b2>
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	80 93 d1 20 	sts	0x20D1, r24
        /* Unknown state? Should never happen. */
        break;
    }

    /* No response has been sent, when we reach here */
    return ISO14443A_APP_NO_RESPONSE;
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
        } else {
            /* Unknown command. Enter HALT state */
            State = STATE_IDLE;
        }

        break;
    2812:	6a cf       	rjmp	.-300    	; 0x26e8 <MifareClassicAppProcess+0x36>

}

uint16_t MifareClassicAppProcess(uint8_t* Buffer, uint16_t BitCount)
{
    switch(State) {
    2814:	7c 01       	movw	r14, r24
    2816:	74 e0       	ldi	r23, 0x04	; 4
    2818:	b7 2e       	mov	r11, r23

    case STATE_AUTHED_IDLE:
        /* In this state, all communication is encrypted. Thus we first have to encrypt
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
            Buffer[i] ^= Crypto1Byte();
    281a:	d7 01       	movw	r26, r14
    281c:	ac 90       	ld	r10, X
    281e:	18 d5       	rcall	.+2608   	; 0x3250 <Crypto1Byte>
    2820:	8a 25       	eor	r24, r10
    2822:	f7 01       	movw	r30, r14
    2824:	81 93       	st	Z+, r24
    2826:	7f 01       	movw	r14, r30
    2828:	ba 94       	dec	r11
        break;

    case STATE_AUTHED_IDLE:
        /* In this state, all communication is encrypted. Thus we first have to encrypt
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
    282a:	b9 f7       	brne	.-18     	; 0x281a <MifareClassicAppProcess+0x168>
            Buffer[i] ^= Crypto1Byte();

        if (Buffer[0] == CMD_READ) {
    282c:	d8 01       	movw	r26, r16
    282e:	8c 91       	ld	r24, X
    2830:	80 33       	cpi	r24, 0x30	; 48
    2832:	09 f4       	brne	.+2      	; 0x2836 <MifareClassicAppProcess+0x184>
    2834:	89 c1       	rjmp	.+786    	; 0x2b48 <MifareClassicAppProcess+0x496>
                        * BITS_PER_BYTE) | ISO14443A_APP_CUSTOM_PARITY;
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
    2836:	80 3a       	cpi	r24, 0xA0	; 160
    2838:	09 f4       	brne	.+2      	; 0x283c <MifareClassicAppProcess+0x18a>
    283a:	cb c1       	rjmp	.+918    	; 0x2bd2 <MifareClassicAppProcess+0x520>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_DECREMENT) {
    283c:	80 3c       	cpi	r24, 0xC0	; 192
    283e:	09 f4       	brne	.+2      	; 0x2842 <MifareClassicAppProcess+0x190>
    2840:	da c1       	rjmp	.+948    	; 0x2bf6 <MifareClassicAppProcess+0x544>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
    2842:	81 3c       	cpi	r24, 0xC1	; 193
    2844:	09 f4       	brne	.+2      	; 0x2848 <MifareClassicAppProcess+0x196>
    2846:	75 c2       	rjmp	.+1258   	; 0x2d32 <MifareClassicAppProcess+0x680>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
    2848:	82 3c       	cpi	r24, 0xC2	; 194
    284a:	09 f4       	brne	.+2      	; 0x284e <MifareClassicAppProcess+0x19c>
    284c:	80 c2       	rjmp	.+1280   	; 0x2d4e <MifareClassicAppProcess+0x69c>
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        }else if (Buffer[0] == CMD_TRANSFER) {
    284e:	80 3b       	cpi	r24, 0xB0	; 176
    2850:	09 f4       	brne	.+2      	; 0x2854 <MifareClassicAppProcess+0x1a2>
    2852:	8e c2       	rjmp	.+1308   	; 0x2d70 <MifareClassicAppProcess+0x6be>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }

            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
    2854:	80 56       	subi	r24, 0x60	; 96
    2856:	82 30       	cpi	r24, 0x02	; 2
    2858:	b8 f6       	brcc	.-82     	; 0x2808 <MifareClassicAppProcess+0x156>
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
    285a:	62 e0       	ldi	r22, 0x02	; 2
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	c8 01       	movw	r24, r16
    2860:	4f d3       	rcall	.+1694   	; 0x2f00 <ISO14443ACheckCRCA>
    2862:	88 23       	and	r24, r24
    2864:	09 f4       	brne	.+2      	; 0x2868 <MifareClassicAppProcess+0x1b6>
    2866:	68 c1       	rjmp	.+720    	; 0x2b38 <MifareClassicAppProcess+0x486>
                /* Nested authentication. */
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
    2868:	f8 01       	movw	r30, r16
    286a:	81 81       	ldd	r24, Z+1	; 0x01
    286c:	8c 73       	andi	r24, 0x3C	; 60
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    286e:	90 81       	ld	r25, Z
    2870:	90 36       	cpi	r25, 0x60	; 96
    2872:	09 f4       	brne	.+2      	; 0x2876 <MifareClassicAppProcess+0x1c4>
    2874:	eb c2       	rjmp	.+1494   	; 0x2e4c <MifareClassicAppProcess+0x79a>
    2876:	6a e3       	ldi	r22, 0x3A	; 58
    2878:	70 e0       	ldi	r23, 0x00	; 0
                uint16_t KeyAddress = (uint16_t) SectorAddress * MEM_BYTES_PER_BLOCK + KeyOffset;
    287a:	7b 01       	movw	r14, r22
    287c:	f0 e1       	ldi	r31, 0x10	; 16
    287e:	8f 9f       	mul	r24, r31
    2880:	e0 0c       	add	r14, r0
    2882:	f1 1c       	adc	r15, r1
    2884:	11 24       	eor	r1, r1
                uint8_t Key[6];
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
    2886:	64 e0       	ldi	r22, 0x04	; 4
    2888:	ce 01       	movw	r24, r28
    288a:	07 96       	adiw	r24, 0x07	; 7
    288c:	0e 94 0b 05 	call	0xa16	; 0xa16 <RandomGetBuffer>
                MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2890:	44 e0       	ldi	r20, 0x04	; 4
    2892:	50 e0       	ldi	r21, 0x00	; 0
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	ce 01       	movw	r24, r28
    289a:	0b 96       	adiw	r24, 0x0b	; 11
    289c:	0e 94 28 06 	call	0xc50	; 0xc50 <MemoryReadBlock>
                MemoryReadBlock(Key, KeyAddress, MEM_KEY_SIZE);
    28a0:	46 e0       	ldi	r20, 0x06	; 6
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	b7 01       	movw	r22, r14
    28a6:	ce 01       	movw	r24, r28
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	0e 94 28 06 	call	0xc50	; 0xc50 <MemoryReadBlock>
    28ae:	8f 81       	ldd	r24, Y+7	; 0x07
    28b0:	98 85       	ldd	r25, Y+8	; 0x08
    28b2:	a9 85       	ldd	r26, Y+9	; 0x09
    28b4:	ba 85       	ldd	r27, Y+10	; 0x0a
    28b6:	80 93 c9 20 	sts	0x20C9, r24
    28ba:	90 93 ca 20 	sts	0x20CA, r25
    28be:	a0 93 cb 20 	sts	0x20CB, r26
    28c2:	b0 93 cc 20 	sts	0x20CC, r27

                /* Precalculate the reader response from card-nonce */
                for (uint8_t i=0; i<sizeof(ReaderResponse); i++)
                    ReaderResponse[i] = CardNonce[i];

                Crypto1PRNG(ReaderResponse, 64);
    28c6:	60 e4       	ldi	r22, 0x40	; 64
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	89 ec       	ldi	r24, 0xC9	; 201
    28cc:	90 e2       	ldi	r25, 0x20	; 32
    28ce:	e6 d4       	rcall	.+2508   	; 0x329c <Crypto1PRNG>
    28d0:	80 91 c9 20 	lds	r24, 0x20C9
    28d4:	90 91 ca 20 	lds	r25, 0x20CA
    28d8:	a0 91 cb 20 	lds	r26, 0x20CB
    28dc:	b0 91 cc 20 	lds	r27, 0x20CC
    28e0:	80 93 cd 20 	sts	0x20CD, r24
    28e4:	90 93 ce 20 	sts	0x20CE, r25
    28e8:	a0 93 cf 20 	sts	0x20CF, r26
    28ec:	b0 93 d0 20 	sts	0x20D0, r27

                /* Precalculate our response from the reader response */
                for (uint8_t i=0; i<sizeof(CardResponse); i++)
                    CardResponse[i] = ReaderResponse[i];

                Crypto1PRNG(CardResponse, 32);
    28f0:	60 e2       	ldi	r22, 0x20	; 32
    28f2:	70 e0       	ldi	r23, 0x00	; 0
    28f4:	8d ec       	ldi	r24, 0xCD	; 205
    28f6:	90 e2       	ldi	r25, 0x20	; 32
    28f8:	d1 d4       	rcall	.+2466   	; 0x329c <Crypto1PRNG>

                /* Setup crypto1 cipher. */
                Crypto1Setup(Key, Uid, CardNonce);
    28fa:	ae 01       	movw	r20, r28
    28fc:	49 5f       	subi	r20, 0xF9	; 249
    28fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2900:	be 01       	movw	r22, r28
    2902:	65 5f       	subi	r22, 0xF5	; 245
    2904:	7f 4f       	sbci	r23, 0xFF	; 255
    2906:	ce 01       	movw	r24, r28
    2908:	01 96       	adiw	r24, 0x01	; 1
    290a:	b0 d3       	rcall	.+1888   	; 0x306c <Crypto1Setup>
    290c:	8f 81       	ldd	r24, Y+7	; 0x07
    290e:	98 85       	ldd	r25, Y+8	; 0x08
    2910:	a9 85       	ldd	r26, Y+9	; 0x09
    2912:	ba 85       	ldd	r27, Y+10	; 0x0a
    2914:	f8 01       	movw	r30, r16
    2916:	80 83       	st	Z, r24
    2918:	91 83       	std	Z+1, r25	; 0x01
    291a:	a2 83       	std	Z+2, r26	; 0x02
    291c:	b3 83       	std	Z+3, r27	; 0x03
                for (uint8_t i=0; i<sizeof(CardNonce); i++)
                    Buffer[i] = CardNonce[i];

                /* Respond with the encrypted random card nonce and expect further authentication
                * form the reader in the next frame. */
                State = STATE_AUTHING;
    291e:	84 e0       	ldi	r24, 0x04	; 4
    2920:	80 93 d1 20 	sts	0x20D1, r24

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
    2924:	80 e2       	ldi	r24, 0x20	; 32
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	df ce       	rjmp	.-578    	; 0x26e8 <MifareClassicAppProcess+0x36>
    292a:	fc 01       	movw	r30, r24
    292c:	80 81       	ld	r24, Z
    292e:	86 32       	cpi	r24, 0x26	; 38
    2930:	d1 f0       	breq	.+52     	; 0x2966 <MifareClassicAppProcess+0x2b4>
    2932:	82 35       	cpi	r24, 0x52	; 82
    2934:	c1 f0       	breq	.+48     	; 0x2966 <MifareClassicAppProcess+0x2b4>

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, MFCLASSIC_1K_ATQA_VALUE)) {
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
    2936:	80 35       	cpi	r24, 0x50	; 80
    2938:	09 f1       	breq	.+66     	; 0x297c <MifareClassicAppProcess+0x2ca>
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
    293a:	90 ea       	ldi	r25, 0xA0	; 160
    293c:	98 0f       	add	r25, r24
    293e:	92 30       	cpi	r25, 0x02	; 2
    2940:	38 f1       	brcs	.+78     	; 0x2990 <MifareClassicAppProcess+0x2de>
                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR;
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (  (Buffer[0] == CMD_READ) || (Buffer[0] == CMD_WRITE) || (Buffer[0] == CMD_DECREMENT)
    2942:	98 2f       	mov	r25, r24
    2944:	9f 77       	andi	r25, 0x7F	; 127
    2946:	90 33       	cpi	r25, 0x30	; 48
    2948:	31 f0       	breq	.+12     	; 0x2956 <MifareClassicAppProcess+0x2a4>
    294a:	80 3a       	cpi	r24, 0xA0	; 160
    294c:	21 f0       	breq	.+8      	; 0x2956 <MifareClassicAppProcess+0x2a4>
    294e:	80 5c       	subi	r24, 0xC0	; 192
    2950:	83 30       	cpi	r24, 0x03	; 3
    2952:	08 f0       	brcs	.+2      	; 0x2956 <MifareClassicAppProcess+0x2a4>
    2954:	59 cf       	rjmp	.-334    	; 0x2808 <MifareClassicAppProcess+0x156>
                  || (Buffer[0] == CMD_INCREMENT) || (Buffer[0] == CMD_RESTORE) || (Buffer[0] == CMD_TRANSFER) ) {
            State = STATE_IDLE;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	80 93 d1 20 	sts	0x20D1, r24
            Buffer[0] = NAK_NOT_AUTHED;
    295c:	84 e0       	ldi	r24, 0x04	; 4
    295e:	d8 01       	movw	r26, r16
    2960:	8c 93       	st	X, r24
            return ACK_NAK_FRAME_SIZE;
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	c1 ce       	rjmp	.-638    	; 0x26e8 <MifareClassicAppProcess+0x36>
        DataPtr[0] = (ATQAValue >> 0) & 0x00FF;
    2966:	84 e0       	ldi	r24, 0x04	; 4
    2968:	d8 01       	movw	r26, r16
    296a:	8c 93       	st	X, r24
        DataPtr[1] = (ATQAValue >> 8) & 0x00FF;
    296c:	11 96       	adiw	r26, 0x01	; 1
    296e:	1c 92       	st	X, r1
        }
        break;

    case STATE_ACTIVE:
        if (ISO14443AWakeUp(Buffer, &BitCount, MFCLASSIC_1K_ATQA_VALUE)) {
            State = STATE_READY;
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	80 93 d1 20 	sts	0x20D1, r24

        *BitCount = ISO14443A_ATQA_FRAME_SIZE;
    2976:	80 e1       	ldi	r24, 0x10	; 16
    2978:	90 e0       	ldi	r25, 0x00	; 0
            return BitCount;
    297a:	b6 ce       	rjmp	.-660    	; 0x26e8 <MifareClassicAppProcess+0x36>
        } else if (Buffer[0] == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
    297c:	f8 01       	movw	r30, r16
    297e:	81 81       	ldd	r24, Z+1	; 0x01
    2980:	88 23       	and	r24, r24
    2982:	09 f4       	brne	.+2      	; 0x2986 <MifareClassicAppProcess+0x2d4>
    2984:	13 c2       	rjmp	.+1062   	; 0x2dac <MifareClassicAppProcess+0x6fa>
                } else {
                    Buffer[0] = NAK_CRC_ERROR;
                    return ACK_NAK_FRAME_SIZE;
                }
            } else {
                Buffer[0] = NAK_INVALID_ARG;
    2986:	f8 01       	movw	r30, r16
    2988:	10 82       	st	Z, r1
                return ACK_NAK_FRAME_SIZE;
    298a:	84 e0       	ldi	r24, 0x04	; 4
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	ac ce       	rjmp	.-680    	; 0x26e8 <MifareClassicAppProcess+0x36>
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
    2990:	62 e0       	ldi	r22, 0x02	; 2
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	c8 01       	movw	r24, r16
    2996:	b4 d2       	rcall	.+1384   	; 0x2f00 <ISO14443ACheckCRCA>
    2998:	88 23       	and	r24, r24
    299a:	09 f4       	brne	.+2      	; 0x299e <MifareClassicAppProcess+0x2ec>
    299c:	0d c2       	rjmp	.+1050   	; 0x2db8 <MifareClassicAppProcess+0x706>
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
    299e:	d8 01       	movw	r26, r16
    29a0:	11 96       	adiw	r26, 0x01	; 1
    29a2:	2c 91       	ld	r18, X
    29a4:	11 97       	sbiw	r26, 0x01	; 1
    29a6:	2c 73       	andi	r18, 0x3C	; 60
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    29a8:	8c 91       	ld	r24, X
    29aa:	80 36       	cpi	r24, 0x60	; 96
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <MifareClassicAppProcess+0x2fe>
    29ae:	51 c2       	rjmp	.+1186   	; 0x2e52 <MifareClassicAppProcess+0x7a0>
    29b0:	8a e3       	ldi	r24, 0x3A	; 58
    29b2:	90 e0       	ldi	r25, 0x00	; 0
                uint16_t KeyAddress = (uint16_t) SectorAddress * MEM_BYTES_PER_BLOCK + KeyOffset;
    29b4:	7c 01       	movw	r14, r24
    29b6:	b0 e1       	ldi	r27, 0x10	; 16
    29b8:	2b 9f       	mul	r18, r27
    29ba:	e0 0c       	add	r14, r0
    29bc:	f1 1c       	adc	r15, r1
    29be:	11 24       	eor	r1, r1
                uint8_t Key[6];
                uint8_t Uid[4];
                uint8_t CardNonce[4];

                /* Generate a random nonce and read UID and key from memory */
                RandomGetBuffer(CardNonce, sizeof(CardNonce));
    29c0:	64 e0       	ldi	r22, 0x04	; 4
    29c2:	ce 01       	movw	r24, r28
    29c4:	07 96       	adiw	r24, 0x07	; 7
    29c6:	0e 94 0b 05 	call	0xa16	; 0xa16 <RandomGetBuffer>
                MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    29ca:	44 e0       	ldi	r20, 0x04	; 4
    29cc:	50 e0       	ldi	r21, 0x00	; 0
    29ce:	60 e0       	ldi	r22, 0x00	; 0
    29d0:	70 e0       	ldi	r23, 0x00	; 0
    29d2:	ce 01       	movw	r24, r28
    29d4:	0b 96       	adiw	r24, 0x0b	; 11
    29d6:	0e 94 28 06 	call	0xc50	; 0xc50 <MemoryReadBlock>
                MemoryReadBlock(Key, KeyAddress, MEM_KEY_SIZE);
    29da:	46 e0       	ldi	r20, 0x06	; 6
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	b7 01       	movw	r22, r14
    29e0:	ce 01       	movw	r24, r28
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	0e 94 28 06 	call	0xc50	; 0xc50 <MemoryReadBlock>
    29e8:	8f 81       	ldd	r24, Y+7	; 0x07
    29ea:	98 85       	ldd	r25, Y+8	; 0x08
    29ec:	a9 85       	ldd	r26, Y+9	; 0x09
    29ee:	ba 85       	ldd	r27, Y+10	; 0x0a
    29f0:	80 93 c9 20 	sts	0x20C9, r24
    29f4:	90 93 ca 20 	sts	0x20CA, r25
    29f8:	a0 93 cb 20 	sts	0x20CB, r26
    29fc:	b0 93 cc 20 	sts	0x20CC, r27

                /* Precalculate the reader response from card-nonce */
                for (uint8_t i=0; i<sizeof(ReaderResponse); i++)
                    ReaderResponse[i] = CardNonce[i];

                Crypto1PRNG(ReaderResponse, 64);
    2a00:	60 e4       	ldi	r22, 0x40	; 64
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	89 ec       	ldi	r24, 0xC9	; 201
    2a06:	90 e2       	ldi	r25, 0x20	; 32
    2a08:	49 d4       	rcall	.+2194   	; 0x329c <Crypto1PRNG>
    2a0a:	80 91 c9 20 	lds	r24, 0x20C9
    2a0e:	90 91 ca 20 	lds	r25, 0x20CA
    2a12:	a0 91 cb 20 	lds	r26, 0x20CB
    2a16:	b0 91 cc 20 	lds	r27, 0x20CC
    2a1a:	80 93 cd 20 	sts	0x20CD, r24
    2a1e:	90 93 ce 20 	sts	0x20CE, r25
    2a22:	a0 93 cf 20 	sts	0x20CF, r26
    2a26:	b0 93 d0 20 	sts	0x20D0, r27

                /* Precalculate our response from the reader response */
                for (uint8_t i=0; i<sizeof(CardResponse); i++)
                    CardResponse[i] = ReaderResponse[i];

                Crypto1PRNG(CardResponse, 32);
    2a2a:	60 e2       	ldi	r22, 0x20	; 32
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	8d ec       	ldi	r24, 0xCD	; 205
    2a30:	90 e2       	ldi	r25, 0x20	; 32
    2a32:	34 d4       	rcall	.+2152   	; 0x329c <Crypto1PRNG>

                /* Respond with the random card nonce and expect further authentication
                * form the reader in the next frame. */
                State = STATE_AUTHING;
    2a34:	84 e0       	ldi	r24, 0x04	; 4
    2a36:	80 93 d1 20 	sts	0x20D1, r24
    2a3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a3c:	98 85       	ldd	r25, Y+8	; 0x08
    2a3e:	a9 85       	ldd	r26, Y+9	; 0x09
    2a40:	ba 85       	ldd	r27, Y+10	; 0x0a
    2a42:	f8 01       	movw	r30, r16
    2a44:	80 83       	st	Z, r24
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	a2 83       	std	Z+2, r26	; 0x02
    2a4a:	b3 83       	std	Z+3, r27	; 0x03

                for (uint8_t i=0; i<sizeof(CardNonce); i++)
                    Buffer[i] = CardNonce[i];

                /* Setup crypto1 cipher. Discard in-place encrypted CardNonce. */
                Crypto1Setup(Key, Uid, CardNonce);
    2a4c:	ae 01       	movw	r20, r28
    2a4e:	49 5f       	subi	r20, 0xF9	; 249
    2a50:	5f 4f       	sbci	r21, 0xFF	; 255
    2a52:	be 01       	movw	r22, r28
    2a54:	65 5f       	subi	r22, 0xF5	; 245
    2a56:	7f 4f       	sbci	r23, 0xFF	; 255
    2a58:	ce 01       	movw	r24, r28
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	07 d3       	rcall	.+1550   	; 0x306c <Crypto1Setup>

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
    2a5e:	80 e2       	ldi	r24, 0x20	; 32
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	42 ce       	rjmp	.-892    	; 0x26e8 <MifareClassicAppProcess+0x36>
        Crypto1Auth(&Buffer[0]);

        for (uint8_t i=0; i<4; i++)
            Buffer[i+4] ^= Crypto1Byte();

        if ((Buffer[4] == ReaderResponse[0]) &&
    2a64:	95 81       	ldd	r25, Z+5	; 0x05
    2a66:	80 91 ca 20 	lds	r24, 0x20CA
    2a6a:	98 13       	cpse	r25, r24
    2a6c:	cd ce       	rjmp	.-614    	; 0x2808 <MifareClassicAppProcess+0x156>
            (Buffer[5] == ReaderResponse[1]) &&
    2a6e:	96 81       	ldd	r25, Z+6	; 0x06
    2a70:	80 91 cb 20 	lds	r24, 0x20CB
    2a74:	98 13       	cpse	r25, r24
    2a76:	c8 ce       	rjmp	.-624    	; 0x2808 <MifareClassicAppProcess+0x156>
            (Buffer[6] == ReaderResponse[2]) &&
    2a78:	97 81       	ldd	r25, Z+7	; 0x07
    2a7a:	80 91 cc 20 	lds	r24, 0x20CC
    2a7e:	98 13       	cpse	r25, r24
    2a80:	c3 ce       	rjmp	.-634    	; 0x2808 <MifareClassicAppProcess+0x156>
    2a82:	68 01       	movw	r12, r16
    2a84:	0d ec       	ldi	r16, 0xCD	; 205
    2a86:	10 e2       	ldi	r17, 0x20	; 32
    2a88:	5f 01       	movw	r10, r30
    2a8a:	f0 e8       	ldi	r31, 0x80	; 128
    2a8c:	af 0e       	add	r10, r31
    2a8e:	b1 1c       	adc	r11, r1
    2a90:	48 01       	movw	r8, r16
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
    2a92:	d8 01       	movw	r26, r16
    2a94:	7d 90       	ld	r7, X+
    2a96:	8d 01       	movw	r16, r26
    2a98:	db d3       	rcall	.+1974   	; 0x3250 <Crypto1Byte>
    2a9a:	87 25       	eor	r24, r7
    2a9c:	f6 01       	movw	r30, r12
    2a9e:	81 93       	st	Z+, r24
    2aa0:	6f 01       	movw	r12, r30
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
    2aa2:	d4 01       	movw	r26, r8
    2aa4:	9c 90       	ld	r9, X
    2aa6:	09 2c       	mov	r0, r9
    2aa8:	92 94       	swap	r9
    2aaa:	90 24       	eor	r9, r0
    2aac:	09 2c       	mov	r0, r9
    2aae:	96 94       	lsr	r9
    2ab0:	96 94       	lsr	r9
    2ab2:	90 24       	eor	r9, r0
    2ab4:	a9 d2       	rcall	.+1362   	; 0x3008 <Crypto1FilterOutput>
    2ab6:	93 94       	inc	r9
    2ab8:	91 fa       	bst	r9, 1
    2aba:	ee 24       	eor	r14, r14
    2abc:	e0 f8       	bld	r14, 0
    2abe:	f1 2c       	mov	r15, r1
    2ac0:	b1 e0       	ldi	r27, 0x01	; 1
    2ac2:	eb 26       	eor	r14, r27
    2ac4:	8e 25       	eor	r24, r14
    2ac6:	f5 01       	movw	r30, r10
    2ac8:	81 93       	st	Z+, r24
    2aca:	5f 01       	movw	r10, r30
            (Buffer[5] == ReaderResponse[1]) &&
            (Buffer[6] == ReaderResponse[2]) &&
            (Buffer[7] == ReaderResponse[3])) {
            /* Reader is authenticated. Encrypt the precalculated card response
            * and generate the parity bits. */
            for (uint8_t i=0; i<sizeof(CardResponse); i++) {
    2acc:	f0 e2       	ldi	r31, 0x20	; 32
    2ace:	01 3d       	cpi	r16, 0xD1	; 209
    2ad0:	1f 07       	cpc	r17, r31
    2ad2:	f1 f6       	brne	.-68     	; 0x2a90 <MifareClassicAppProcess+0x3de>
                Buffer[i] = CardResponse[i] ^ Crypto1Byte();
                Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(CardResponse[i]) ^ Crypto1FilterOutput();
            }

            State = STATE_AUTHED_IDLE;
    2ad4:	85 e0       	ldi	r24, 0x05	; 5
    2ad6:	80 93 d1 20 	sts	0x20D1, r24

            return (CMD_AUTH_BA_FRAME_SIZE * BITS_PER_BYTE) | ISO14443A_APP_CUSTOM_PARITY;
    2ada:	80 e2       	ldi	r24, 0x20	; 32
    2adc:	90 e1       	ldi	r25, 0x10	; 16
    2ade:	04 ce       	rjmp	.-1016   	; 0x26e8 <MifareClassicAppProcess+0x36>
         * the block back into the global block buffer. */
        for (uint8_t i=0; i<(MEM_VALUE_SIZE  + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_VALUE_SIZE )) {
            MemoryReadBlock(BlockBuffer, (uint16_t) CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2ae0:	60 91 c8 20 	lds	r22, 0x20C8
    2ae4:	f0 e1       	ldi	r31, 0x10	; 16
    2ae6:	6f 9f       	mul	r22, r31
    2ae8:	b0 01       	movw	r22, r0
    2aea:	11 24       	eor	r1, r1
    2aec:	40 e1       	ldi	r20, 0x10	; 16
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	88 eb       	ldi	r24, 0xB8	; 184
    2af2:	90 e2       	ldi	r25, 0x20	; 32
    2af4:	0e 94 28 06 	call	0xc50	; 0xc50 <MemoryReadBlock>

INLINE bool CheckValueIntegrity(uint8_t* Block)
{
    /* Value Blocks contain a value stored three times, with
     * the middle portion inverted. */
    if (    (Block[0] == (uint8_t) ~Block[4]) && (Block[0] == Block[8])
    2af8:	20 91 b8 20 	lds	r18, 0x20B8
    2afc:	80 91 bc 20 	lds	r24, 0x20BC
    2b00:	80 95       	com	r24
    2b02:	28 17       	cp	r18, r24
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <MifareClassicAppProcess+0x456>
    2b06:	88 c0       	rjmp	.+272    	; 0x2c18 <MifareClassicAppProcess+0x566>
                State = STATE_AUTHED_IDLE;
                /* No ACK response on value commands part 2 */
                return ISO14443A_APP_NO_RESPONSE;
            } else {
                /* Not sure if this is the correct error code.. */
                Buffer[0] = NAK_OTHER_ERROR ^ Crypto1Nibble();
    2b08:	b6 d3       	rcall	.+1900   	; 0x3276 <Crypto1Nibble>
    2b0a:	96 e0       	ldi	r25, 0x06	; 6
    2b0c:	98 27       	eor	r25, r24
    2b0e:	f8 01       	movw	r30, r16
    2b10:	90 83       	st	Z, r25
    2b12:	1e ce       	rjmp	.-964    	; 0x2750 <MifareClassicAppProcess+0x9e>
                /* Silently ignore in ReadOnly mode */
            }

            Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
        } else {
            Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2b14:	b0 d3       	rcall	.+1888   	; 0x3276 <Crypto1Nibble>
    2b16:	91 e0       	ldi	r25, 0x01	; 1
    2b18:	98 27       	eor	r25, r24
    2b1a:	f8 01       	movw	r30, r16
    2b1c:	90 83       	st	Z, r25
    2b1e:	18 ce       	rjmp	.-976    	; 0x2750 <MifareClassicAppProcess+0x9e>
        for (uint8_t i=0; i<(MEM_BYTES_PER_BLOCK + ISO14443A_CRCA_SIZE); i++)
            Buffer[i] ^= Crypto1Byte();

        if (ISO14443ACheckCRCA(Buffer, MEM_BYTES_PER_BLOCK)) {
            if (!ActiveConfiguration.ReadOnly) {
                MemoryWriteBlock(Buffer, CurrentAddress * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2b20:	60 91 c8 20 	lds	r22, 0x20C8
    2b24:	e0 e1       	ldi	r30, 0x10	; 16
    2b26:	6e 9f       	mul	r22, r30
    2b28:	b0 01       	movw	r22, r0
    2b2a:	11 24       	eor	r1, r1
    2b2c:	40 e1       	ldi	r20, 0x10	; 16
    2b2e:	50 e0       	ldi	r21, 0x00	; 0
    2b30:	c8 01       	movw	r24, r16
    2b32:	0e 94 ad 06 	call	0xd5a	; 0xd5a <MemoryWriteBlock>
    2b36:	07 ce       	rjmp	.-1010   	; 0x2746 <MifareClassicAppProcess+0x94>
                * form the reader in the next frame. */
                State = STATE_AUTHING;

                return CMD_AUTH_RB_FRAME_SIZE * BITS_PER_BYTE;
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2b38:	9e d3       	rcall	.+1852   	; 0x3276 <Crypto1Nibble>
    2b3a:	91 e0       	ldi	r25, 0x01	; 1
    2b3c:	98 27       	eor	r25, r24
    2b3e:	d8 01       	movw	r26, r16
    2b40:	9c 93       	st	X, r25
                return ACK_NAK_FRAME_SIZE;
    2b42:	84 e0       	ldi	r24, 0x04	; 4
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	d0 cd       	rjmp	.-1120   	; 0x26e8 <MifareClassicAppProcess+0x36>
        * the incoming data. */
        for (uint8_t i=0; i<4; i++)
            Buffer[i] ^= Crypto1Byte();

        if (Buffer[0] == CMD_READ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_READ_FRAME_SIZE)) {
    2b48:	62 e0       	ldi	r22, 0x02	; 2
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	c8 01       	movw	r24, r16
    2b4e:	d8 d1       	rcall	.+944    	; 0x2f00 <ISO14443ACheckCRCA>
    2b50:	81 11       	cpse	r24, r1
    2b52:	38 c1       	rjmp	.+624    	; 0x2dc4 <MifareClassicAppProcess+0x712>
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
                CurrentAddress = Buffer[1];
                State = STATE_RESTORE;
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
    2b54:	90 d3       	rcall	.+1824   	; 0x3276 <Crypto1Nibble>
    2b56:	91 e0       	ldi	r25, 0x01	; 1
            if (ISO14443ACheckCRCA(Buffer, CMD_WRITE_FRAME_SIZE)) {
                /* Write command. Store the address and prepare for the upcoming data.
                * Respond with ACK. */
                CurrentAddress = Buffer[1];
                State = STATE_WRITE;
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2b58:	98 27       	eor	r25, r24
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	90 83       	st	Z, r25
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
    2b5e:	84 e0       	ldi	r24, 0x04	; 4
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	c2 cd       	rjmp	.-1148   	; 0x26e8 <MifareClassicAppProcess+0x36>
            State = STATE_READY;
            return BitCount;
        } else if (Buffer[0] == ISO14443A_CMD_SELECT_CL1) {
            /* Load UID CL1 and perform anticollision */
            uint8_t UidCL1[4];
            MemoryReadBlock(UidCL1, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2b64:	44 e0       	ldi	r20, 0x04	; 4
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	60 e0       	ldi	r22, 0x00	; 0
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	ce 01       	movw	r24, r28
    2b6e:	01 96       	adiw	r24, 0x01	; 1
    2b70:	0e 94 28 06 	call	0xc50	; 0xc50 <MemoryReadBlock>

            if (ISO14443ASelect(Buffer, &BitCount, UidCL1, CardSAKValue)) {
    2b74:	90 91 b5 20 	lds	r25, 0x20B5
    uint8_t* DataPtr = (uint8_t*) Buffer;
    uint8_t NVB = DataPtr[1];
    //uint8_t CollisionByteCount = (NVB >> 4) & 0x0F;
    //uint8_t CollisionBitCount =  (NVB >> 0) & 0x0F;

    switch (NVB) {
    2b78:	d8 01       	movw	r26, r16
    2b7a:	11 96       	adiw	r26, 0x01	; 1
    2b7c:	8c 91       	ld	r24, X
    2b7e:	80 32       	cpi	r24, 0x20	; 32
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <MifareClassicAppProcess+0x4d2>
    2b82:	54 c1       	rjmp	.+680    	; 0x2e2c <MifareClassicAppProcess+0x77a>
    2b84:	80 37       	cpi	r24, 0x70	; 112
    2b86:	09 f0       	breq	.+2      	; 0x2b8a <MifareClassicAppProcess+0x4d8>
    2b88:	ad cd       	rjmp	.-1190   	; 0x26e4 <MifareClassicAppProcess+0x32>
        return false;

    case ISO14443A_NVB_AC_END:
        /* End of anticollision procedure.
        * Send SAK CLn if we are selected. */
        if (    (DataPtr[2] == UidCL[0]) &&
    2b8a:	d8 01       	movw	r26, r16
    2b8c:	12 96       	adiw	r26, 0x02	; 2
    2b8e:	2c 91       	ld	r18, X
    2b90:	12 97       	sbiw	r26, 0x02	; 2
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	28 13       	cpse	r18, r24
    2b96:	a6 cd       	rjmp	.-1204   	; 0x26e4 <MifareClassicAppProcess+0x32>
    2b98:	13 96       	adiw	r26, 0x03	; 3
    2b9a:	2c 91       	ld	r18, X
    2b9c:	13 97       	sbiw	r26, 0x03	; 3
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	28 13       	cpse	r18, r24
    2ba2:	a0 cd       	rjmp	.-1216   	; 0x26e4 <MifareClassicAppProcess+0x32>
                (DataPtr[3] == UidCL[1]) &&
    2ba4:	14 96       	adiw	r26, 0x04	; 4
    2ba6:	2c 91       	ld	r18, X
    2ba8:	14 97       	sbiw	r26, 0x04	; 4
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	28 13       	cpse	r18, r24
    2bae:	9a cd       	rjmp	.-1228   	; 0x26e4 <MifareClassicAppProcess+0x32>
                (DataPtr[4] == UidCL[2]) &&
    2bb0:	15 96       	adiw	r26, 0x05	; 5
    2bb2:	2c 91       	ld	r18, X
    2bb4:	15 97       	sbiw	r26, 0x05	; 5
    2bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb8:	28 13       	cpse	r18, r24
    2bba:	94 cd       	rjmp	.-1240   	; 0x26e4 <MifareClassicAppProcess+0x32>
                (DataPtr[5] == UidCL[3]) ) {

            DataPtr[0] = SAKValue;
    2bbc:	9c 93       	st	X, r25
            ISO14443AAppendCRCA(Buffer, 1);
    2bbe:	61 e0       	ldi	r22, 0x01	; 1
    2bc0:	70 e0       	ldi	r23, 0x00	; 0
    2bc2:	c8 01       	movw	r24, r16
    2bc4:	6f d1       	rcall	.+734    	; 0x2ea4 <ISO14443AAppendCRCA>
                State = STATE_ACTIVE;
    2bc6:	83 e0       	ldi	r24, 0x03	; 3
    2bc8:	80 93 d1 20 	sts	0x20D1, r24

            *BitCount = ISO14443A_SAK_FRAME_SIZE;
    2bcc:	88 e1       	ldi	r24, 0x18	; 24
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	8b cd       	rjmp	.-1258   	; 0x26e8 <MifareClassicAppProcess+0x36>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
                return ACK_NAK_FRAME_SIZE;
            }
        } else if (Buffer[0] == CMD_WRITE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_WRITE_FRAME_SIZE)) {
    2bd2:	62 e0       	ldi	r22, 0x02	; 2
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	c8 01       	movw	r24, r16
    2bd8:	93 d1       	rcall	.+806    	; 0x2f00 <ISO14443ACheckCRCA>
    2bda:	88 23       	and	r24, r24
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <MifareClassicAppProcess+0x52e>
    2bde:	ac cf       	rjmp	.-168    	; 0x2b38 <MifareClassicAppProcess+0x486>
                /* Write command. Store the address and prepare for the upcoming data.
                * Respond with ACK. */
                CurrentAddress = Buffer[1];
    2be0:	d8 01       	movw	r26, r16
    2be2:	11 96       	adiw	r26, 0x01	; 1
    2be4:	8c 91       	ld	r24, X
    2be6:	80 93 c8 20 	sts	0x20C8, r24
                State = STATE_WRITE;
    2bea:	86 e0       	ldi	r24, 0x06	; 6
    2bec:	80 93 d1 20 	sts	0x20D1, r24
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2bf0:	42 d3       	rcall	.+1668   	; 0x3276 <Crypto1Nibble>
    2bf2:	9a e0       	ldi	r25, 0x0A	; 10
    2bf4:	b1 cf       	rjmp	.-158    	; 0x2b58 <MifareClassicAppProcess+0x4a6>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_DECREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    2bf6:	62 e0       	ldi	r22, 0x02	; 2
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	81 d1       	rcall	.+770    	; 0x2f00 <ISO14443ACheckCRCA>
    2bfe:	88 23       	and	r24, r24
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <MifareClassicAppProcess+0x552>
    2c02:	a8 cf       	rjmp	.-176    	; 0x2b54 <MifareClassicAppProcess+0x4a2>
                CurrentAddress = Buffer[1];
    2c04:	f8 01       	movw	r30, r16
    2c06:	81 81       	ldd	r24, Z+1	; 0x01
    2c08:	80 93 c8 20 	sts	0x20C8, r24
                State = STATE_DECREMENT;
    2c0c:	88 e0       	ldi	r24, 0x08	; 8
    2c0e:	80 93 d1 20 	sts	0x20D1, r24
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2c12:	31 d3       	rcall	.+1634   	; 0x3276 <Crypto1Nibble>
    2c14:	9a e0       	ldi	r25, 0x0A	; 10
    2c16:	92 cf       	rjmp	.-220    	; 0x2b3c <MifareClassicAppProcess+0x48a>

INLINE bool CheckValueIntegrity(uint8_t* Block)
{
    /* Value Blocks contain a value stored three times, with
     * the middle portion inverted. */
    if (    (Block[0] == (uint8_t) ~Block[4]) && (Block[0] == Block[8])
    2c18:	80 91 c0 20 	lds	r24, 0x20C0
    2c1c:	28 13       	cpse	r18, r24
    2c1e:	74 cf       	rjmp	.-280    	; 0x2b08 <MifareClassicAppProcess+0x456>
         && (Block[1] == (uint8_t) ~Block[5]) && (Block[1] == Block[9])
    2c20:	e0 91 b9 20 	lds	r30, 0x20B9
    2c24:	80 91 bd 20 	lds	r24, 0x20BD
    2c28:	80 95       	com	r24
    2c2a:	e8 13       	cpse	r30, r24
    2c2c:	6d cf       	rjmp	.-294    	; 0x2b08 <MifareClassicAppProcess+0x456>
    2c2e:	80 91 c1 20 	lds	r24, 0x20C1
    2c32:	e8 13       	cpse	r30, r24
    2c34:	69 cf       	rjmp	.-302    	; 0x2b08 <MifareClassicAppProcess+0x456>
         && (Block[2] == (uint8_t) ~Block[6]) && (Block[2] == Block[10])
    2c36:	80 91 ba 20 	lds	r24, 0x20BA
    2c3a:	90 91 be 20 	lds	r25, 0x20BE
    2c3e:	90 95       	com	r25
    2c40:	89 13       	cpse	r24, r25
    2c42:	62 cf       	rjmp	.-316    	; 0x2b08 <MifareClassicAppProcess+0x456>
    2c44:	90 91 c2 20 	lds	r25, 0x20C2
    2c48:	89 13       	cpse	r24, r25
    2c4a:	5e cf       	rjmp	.-324    	; 0x2b08 <MifareClassicAppProcess+0x456>
         && (Block[3] == (uint8_t) ~Block[7]) && (Block[3] == Block[11])
    2c4c:	30 91 bb 20 	lds	r19, 0x20BB
    2c50:	90 91 bf 20 	lds	r25, 0x20BF
    2c54:	90 95       	com	r25
    2c56:	39 13       	cpse	r19, r25
    2c58:	57 cf       	rjmp	.-338    	; 0x2b08 <MifareClassicAppProcess+0x456>
    2c5a:	90 91 c3 20 	lds	r25, 0x20C3
    2c5e:	39 13       	cpse	r19, r25
    2c60:	53 cf       	rjmp	.-346    	; 0x2b08 <MifareClassicAppProcess+0x456>
         && (Block[12] == (uint8_t) ~Block[13])
    2c62:	40 91 c4 20 	lds	r20, 0x20C4
    2c66:	90 91 c5 20 	lds	r25, 0x20C5
    2c6a:	90 95       	com	r25
    2c6c:	49 13       	cpse	r20, r25
    2c6e:	4c cf       	rjmp	.-360    	; 0x2b08 <MifareClassicAppProcess+0x456>
         && (Block[12] == Block[14])
    2c70:	90 91 c6 20 	lds	r25, 0x20C6
    2c74:	49 13       	cpse	r20, r25
    2c76:	48 cf       	rjmp	.-368    	; 0x2b08 <MifareClassicAppProcess+0x456>
         && (Block[14] == (uint8_t) ~Block[15])) {
    2c78:	90 91 c7 20 	lds	r25, 0x20C7
    2c7c:	90 95       	com	r25
    2c7e:	49 13       	cpse	r20, r25
    2c80:	43 cf       	rjmp	.-378    	; 0x2b08 <MifareClassicAppProcess+0x456>
}

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    2c82:	d8 01       	movw	r26, r16
    2c84:	9c 91       	ld	r25, X
    *Value |= ((uint32_t) Block[1] << 8);
    2c86:	11 96       	adiw	r26, 0x01	; 1
    2c88:	fc 91       	ld	r31, X
    2c8a:	11 97       	sbiw	r26, 0x01	; 1
    *Value |= ((uint32_t) Block[2] << 16);
    2c8c:	12 96       	adiw	r26, 0x02	; 2
    2c8e:	4c 91       	ld	r20, X
    2c90:	12 97       	sbiw	r26, 0x02	; 2
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	60 e0       	ldi	r22, 0x00	; 0
    2c96:	70 e0       	ldi	r23, 0x00	; 0
    2c98:	ba 01       	movw	r22, r20
    2c9a:	55 27       	eor	r21, r21
    2c9c:	44 27       	eor	r20, r20

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    2c9e:	5f 2b       	or	r21, r31
    *Value |= ((uint32_t) Block[2] << 16);
    2ca0:	49 2b       	or	r20, r25
    *Value |= ((uint32_t) Block[3] << 24);
    2ca2:	13 96       	adiw	r26, 0x03	; 3
    2ca4:	9c 91       	ld	r25, X
    2ca6:	79 2b       	or	r23, r25
INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    *Value |= ((uint32_t) Block[2] << 16);
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	a0 e0       	ldi	r26, 0x00	; 0
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	dc 01       	movw	r26, r24
    2cb0:	99 27       	eor	r25, r25
    2cb2:	88 27       	eor	r24, r24

INLINE void ValueFromBlock(uint32_t* Value, uint8_t* Block)
{
    *Value = 0;
    *Value |= ((uint32_t) Block[0] << 0);
    *Value |= ((uint32_t) Block[1] << 8);
    2cb4:	9e 2b       	or	r25, r30
    *Value |= ((uint32_t) Block[2] << 16);
    2cb6:	82 2b       	or	r24, r18
    *Value |= ((uint32_t) Block[3] << 24);
    2cb8:	b3 2b       	or	r27, r19
                uint32_t BlockValue;

                ValueFromBlock(&ParamValue, Buffer);
                ValueFromBlock(&BlockValue, BlockBuffer);

                if (State == STATE_DECREMENT) {
    2cba:	20 91 d1 20 	lds	r18, 0x20D1
    2cbe:	28 30       	cpi	r18, 0x08	; 8
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <MifareClassicAppProcess+0x612>
    2cc2:	6f c0       	rjmp	.+222    	; 0x2da2 <MifareClassicAppProcess+0x6f0>
                    BlockValue -= ParamValue;
                } else if (State == STATE_INCREMENT) {
    2cc4:	27 30       	cpi	r18, 0x07	; 7
    2cc6:	21 f4       	brne	.+8      	; 0x2cd0 <MifareClassicAppProcess+0x61e>
                    BlockValue += ParamValue;
    2cc8:	84 0f       	add	r24, r20
    2cca:	95 1f       	adc	r25, r21
    2ccc:	a6 1f       	adc	r26, r22
    2cce:	b7 1f       	adc	r27, r23
    *Value |= ((uint32_t) Block[3] << 24);
}

INLINE void ValueToBlock(uint8_t* Block, uint32_t Value)
{
    Block[0] = (uint8_t) (Value >> 0);
    2cd0:	80 93 b8 20 	sts	0x20B8, r24
    Block[1] = (uint8_t) (Value >> 8);
    2cd4:	c9 2e       	mov	r12, r25
    2cd6:	da 2e       	mov	r13, r26
    2cd8:	eb 2e       	mov	r14, r27
    2cda:	ff 24       	eor	r15, r15
    2cdc:	c0 92 b9 20 	sts	0x20B9, r12
    Block[2] = (uint8_t) (Value >> 16);
    2ce0:	8d 01       	movw	r16, r26
    2ce2:	22 27       	eor	r18, r18
    2ce4:	33 27       	eor	r19, r19
    2ce6:	00 93 ba 20 	sts	0x20BA, r16
    Block[3] = (uint8_t) (Value >> 24);
    2cea:	4b 2f       	mov	r20, r27
    2cec:	55 27       	eor	r21, r21
    2cee:	66 27       	eor	r22, r22
    2cf0:	77 27       	eor	r23, r23
    2cf2:	40 93 bb 20 	sts	0x20BB, r20
    Block[4] = ~Block[0];
    2cf6:	e8 2f       	mov	r30, r24
    2cf8:	e0 95       	com	r30
    2cfa:	e0 93 bc 20 	sts	0x20BC, r30
    Block[5] = ~Block[1];
    2cfe:	ec 2d       	mov	r30, r12
    2d00:	e0 95       	com	r30
    2d02:	e0 93 bd 20 	sts	0x20BD, r30
    Block[6] = ~Block[2];
    2d06:	e0 2f       	mov	r30, r16
    2d08:	e0 95       	com	r30
    2d0a:	e0 93 be 20 	sts	0x20BE, r30
    Block[7] = ~Block[3];
    2d0e:	e4 2f       	mov	r30, r20
    2d10:	e0 95       	com	r30
    2d12:	e0 93 bf 20 	sts	0x20BF, r30
    Block[8] = Block[0];
    2d16:	80 93 c0 20 	sts	0x20C0, r24
    Block[9] = Block[1];
    2d1a:	c0 92 c1 20 	sts	0x20C1, r12
    Block[10] = Block[2];
    2d1e:	00 93 c2 20 	sts	0x20C2, r16
    Block[11] = Block[3];
    2d22:	40 93 c3 20 	sts	0x20C3, r20
                    /* Do nothing */
                }

                ValueToBlock(BlockBuffer, BlockValue);

                State = STATE_AUTHED_IDLE;
    2d26:	85 e0       	ldi	r24, 0x05	; 5
    2d28:	80 93 d1 20 	sts	0x20D1, r24
                /* No ACK response on value commands part 2 */
                return ISO14443A_APP_NO_RESPONSE;
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	db cc       	rjmp	.-1610   	; 0x26e8 <MifareClassicAppProcess+0x36>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_INCREMENT) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    2d32:	62 e0       	ldi	r22, 0x02	; 2
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	c8 01       	movw	r24, r16
    2d38:	e3 d0       	rcall	.+454    	; 0x2f00 <ISO14443ACheckCRCA>
    2d3a:	88 23       	and	r24, r24
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <MifareClassicAppProcess+0x68e>
    2d3e:	fc ce       	rjmp	.-520    	; 0x2b38 <MifareClassicAppProcess+0x486>
                CurrentAddress = Buffer[1];
    2d40:	d8 01       	movw	r26, r16
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	8c 91       	ld	r24, X
    2d46:	80 93 c8 20 	sts	0x20C8, r24
                State = STATE_INCREMENT;
    2d4a:	87 e0       	ldi	r24, 0x07	; 7
    2d4c:	4f cf       	rjmp	.-354    	; 0x2bec <MifareClassicAppProcess+0x53a>
            } else {
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        } else if (Buffer[0] == CMD_RESTORE) {
            if (ISO14443ACheckCRCA(Buffer, CMD_DECREMENT_FRAME_SIZE)) {
    2d4e:	62 e0       	ldi	r22, 0x02	; 2
    2d50:	70 e0       	ldi	r23, 0x00	; 0
    2d52:	c8 01       	movw	r24, r16
    2d54:	d5 d0       	rcall	.+426    	; 0x2f00 <ISO14443ACheckCRCA>
    2d56:	88 23       	and	r24, r24
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <MifareClassicAppProcess+0x6aa>
    2d5a:	fc ce       	rjmp	.-520    	; 0x2b54 <MifareClassicAppProcess+0x4a2>
                CurrentAddress = Buffer[1];
    2d5c:	f8 01       	movw	r30, r16
    2d5e:	81 81       	ldd	r24, Z+1	; 0x01
    2d60:	80 93 c8 20 	sts	0x20C8, r24
                State = STATE_RESTORE;
    2d64:	89 e0       	ldi	r24, 0x09	; 9
    2d66:	80 93 d1 20 	sts	0x20D1, r24
                Buffer[0] = ACK_VALUE ^ Crypto1Nibble();
    2d6a:	85 d2       	rcall	.+1290   	; 0x3276 <Crypto1Nibble>
    2d6c:	9a e0       	ldi	r25, 0x0A	; 10
    2d6e:	e6 ce       	rjmp	.-564    	; 0x2b3c <MifareClassicAppProcess+0x48a>
                Buffer[0] = NAK_CRC_ERROR ^ Crypto1Nibble();
            }
            return ACK_NAK_FRAME_SIZE;
        }else if (Buffer[0] == CMD_TRANSFER) {
            /* Write back the global block buffer to the desired block address */
            if (ISO14443ACheckCRCA(Buffer, CMD_TRANSFER_FRAME_SIZE)) {
    2d70:	62 e0       	ldi	r22, 0x02	; 2
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	c8 01       	movw	r24, r16
    2d76:	c4 d0       	rcall	.+392    	; 0x2f00 <ISO14443ACheckCRCA>
    2d78:	88 23       	and	r24, r24
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <MifareClassicAppProcess+0x6cc>
    2d7c:	dd ce       	rjmp	.-582    	; 0x2b38 <MifareClassicAppProcess+0x486>
                if (!ActiveConfiguration.ReadOnly) {
    2d7e:	80 91 fc 20 	lds	r24, 0x20FC
    2d82:	81 11       	cpse	r24, r1
    2d84:	35 cf       	rjmp	.-406    	; 0x2bf0 <MifareClassicAppProcess+0x53e>
                    MemoryWriteBlock(BlockBuffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK );
    2d86:	d8 01       	movw	r26, r16
    2d88:	11 96       	adiw	r26, 0x01	; 1
    2d8a:	6c 91       	ld	r22, X
    2d8c:	b0 e1       	ldi	r27, 0x10	; 16
    2d8e:	6b 9f       	mul	r22, r27
    2d90:	b0 01       	movw	r22, r0
    2d92:	11 24       	eor	r1, r1
    2d94:	40 e1       	ldi	r20, 0x10	; 16
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	88 eb       	ldi	r24, 0xB8	; 184
    2d9a:	90 e2       	ldi	r25, 0x20	; 32
    2d9c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <MemoryWriteBlock>
    2da0:	27 cf       	rjmp	.-434    	; 0x2bf0 <MifareClassicAppProcess+0x53e>

                ValueFromBlock(&ParamValue, Buffer);
                ValueFromBlock(&BlockValue, BlockBuffer);

                if (State == STATE_DECREMENT) {
                    BlockValue -= ParamValue;
    2da2:	84 1b       	sub	r24, r20
    2da4:	95 0b       	sbc	r25, r21
    2da6:	a6 0b       	sbc	r26, r22
    2da8:	b7 0b       	sbc	r27, r23
    2daa:	92 cf       	rjmp	.-220    	; 0x2cd0 <MifareClassicAppProcess+0x61e>
            return BitCount;
        } else if (Buffer[0] == CMD_HALT) {
            /* Halts the tag. According to the ISO14443, the second
            * byte is supposed to be 0. */
            if (Buffer[1] == 0) {
                if (ISO14443ACheckCRCA(Buffer, CMD_HALT_FRAME_SIZE)) {
    2dac:	62 e0       	ldi	r22, 0x02	; 2
    2dae:	70 e0       	ldi	r23, 0x00	; 0
    2db0:	c8 01       	movw	r24, r16
    2db2:	a6 d0       	rcall	.+332    	; 0x2f00 <ISO14443ACheckCRCA>
    2db4:	81 11       	cpse	r24, r1
    2db6:	0b cd       	rjmp	.-1514   	; 0x27ce <MifareClassicAppProcess+0x11c>
                    /* According to ISO14443, we must not send anything
                    * in order to acknowledge the HALT command. */
                    State = STATE_HALT;
                    return ISO14443A_APP_NO_RESPONSE;
                } else {
                    Buffer[0] = NAK_CRC_ERROR;
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	d8 01       	movw	r26, r16
    2dbc:	8c 93       	st	X, r24
                    return ACK_NAK_FRAME_SIZE;
    2dbe:	84 e0       	ldi	r24, 0x04	; 4
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	92 cc       	rjmp	.-1756   	; 0x26e8 <MifareClassicAppProcess+0x36>
            Buffer[i] ^= Crypto1Byte();

        if (Buffer[0] == CMD_READ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_READ_FRAME_SIZE)) {
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
    2dc4:	f8 01       	movw	r30, r16
    2dc6:	61 81       	ldd	r22, Z+1	; 0x01
    2dc8:	f0 e1       	ldi	r31, 0x10	; 16
    2dca:	6f 9f       	mul	r22, r31
    2dcc:	b0 01       	movw	r22, r0
    2dce:	11 24       	eor	r1, r1
    2dd0:	40 e1       	ldi	r20, 0x10	; 16
    2dd2:	50 e0       	ldi	r21, 0x00	; 0
    2dd4:	c8 01       	movw	r24, r16
    2dd6:	0e 94 28 06 	call	0xc50	; 0xc50 <MemoryReadBlock>
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);
    2dda:	60 e1       	ldi	r22, 0x10	; 16
    2ddc:	70 e0       	ldi	r23, 0x00	; 0
    2dde:	c8 01       	movw	r24, r16
    2de0:	61 d0       	rcall	.+194    	; 0x2ea4 <ISO14443AAppendCRCA>
    2de2:	78 01       	movw	r14, r16
    2de4:	30 e8       	ldi	r19, 0x80	; 128
    2de6:	e3 0e       	add	r14, r19
    2de8:	f1 1c       	adc	r15, r1
    2dea:	62 e1       	ldi	r22, 0x12	; 18
    2dec:	a6 2e       	mov	r10, r22

                /* Encrypt and calculate parity bits. */
                for (uint8_t i=0; i<(ISO14443A_CRCA_SIZE + MEM_BYTES_PER_BLOCK); i++) {
                    uint8_t Plain = Buffer[i];
    2dee:	d8 01       	movw	r26, r16
    2df0:	bc 90       	ld	r11, X
                    Buffer[i] = Plain ^ Crypto1Byte();
    2df2:	2e d2       	rcall	.+1116   	; 0x3250 <Crypto1Byte>
    2df4:	8b 25       	eor	r24, r11
    2df6:	f8 01       	movw	r30, r16
    2df8:	81 93       	st	Z+, r24
    2dfa:	8f 01       	movw	r16, r30
                    Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(Plain) ^ Crypto1FilterOutput();
    2dfc:	0b 2c       	mov	r0, r11
    2dfe:	b2 94       	swap	r11
    2e00:	b0 24       	eor	r11, r0
    2e02:	0b 2c       	mov	r0, r11
    2e04:	b6 94       	lsr	r11
    2e06:	b6 94       	lsr	r11
    2e08:	b0 24       	eor	r11, r0
    2e0a:	fe d0       	rcall	.+508    	; 0x3008 <Crypto1FilterOutput>
    2e0c:	b3 94       	inc	r11
    2e0e:	b1 fa       	bst	r11, 1
    2e10:	cc 24       	eor	r12, r12
    2e12:	c0 f8       	bld	r12, 0
    2e14:	d1 2c       	mov	r13, r1
    2e16:	f1 e0       	ldi	r31, 0x01	; 1
    2e18:	cf 26       	eor	r12, r31
    2e1a:	8c 25       	eor	r24, r12
    2e1c:	d7 01       	movw	r26, r14
    2e1e:	8d 93       	st	X+, r24
    2e20:	7d 01       	movw	r14, r26
    2e22:	aa 94       	dec	r10
                /* Read command. Read data from memory and append CRCA. */
                MemoryReadBlock(Buffer, (uint16_t) Buffer[1] * MEM_BYTES_PER_BLOCK, MEM_BYTES_PER_BLOCK);
                ISO14443AAppendCRCA(Buffer, MEM_BYTES_PER_BLOCK);

                /* Encrypt and calculate parity bits. */
                for (uint8_t i=0; i<(ISO14443A_CRCA_SIZE + MEM_BYTES_PER_BLOCK); i++) {
    2e24:	21 f7       	brne	.-56     	; 0x2dee <MifareClassicAppProcess+0x73c>
                    uint8_t Plain = Buffer[i];
                    Buffer[i] = Plain ^ Crypto1Byte();
                    Buffer[ISO14443A_BUFFER_PARITY_OFFSET + i] = ODD_PARITY(Plain) ^ Crypto1FilterOutput();
                }

                return ( (CMD_READ_RESPONSE_FRAME_SIZE + ISO14443A_CRCA_SIZE )
    2e26:	80 e9       	ldi	r24, 0x90	; 144
    2e28:	90 e1       	ldi	r25, 0x10	; 16
    2e2a:	5e cc       	rjmp	.-1860   	; 0x26e8 <MifareClassicAppProcess+0x36>

    switch (NVB) {
    case ISO14443A_NVB_AC_START:
        /* Start of anticollision procedure.
        * Send whole UID CLn + BCC */
        DataPtr[0] = UidCL[0];
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	f8 01       	movw	r30, r16
    2e30:	80 83       	st	Z, r24
        DataPtr[1] = UidCL[1];
    2e32:	3a 81       	ldd	r19, Y+2	; 0x02
    2e34:	31 83       	std	Z+1, r19	; 0x01
        DataPtr[2] = UidCL[2];
    2e36:	2b 81       	ldd	r18, Y+3	; 0x03
    2e38:	22 83       	std	Z+2, r18	; 0x02
        DataPtr[3] = UidCL[3];
    2e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3c:	93 83       	std	Z+3, r25	; 0x03
        DataPtr[4] = ISO14443A_CALC_BCC(DataPtr);
    2e3e:	83 27       	eor	r24, r19
    2e40:	82 27       	eor	r24, r18
    2e42:	89 27       	eor	r24, r25
    2e44:	84 83       	std	Z+4, r24	; 0x04

        *BitCount = ISO14443A_CL_FRAME_SIZE;
    2e46:	88 e2       	ldi	r24, 0x28	; 40
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	4e cc       	rjmp	.-1892   	; 0x26e8 <MifareClassicAppProcess+0x36>
            return ACK_NAK_FRAME_SIZE;
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B) ) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
                /* Nested authentication. */
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    2e4c:	60 e3       	ldi	r22, 0x30	; 48
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	14 cd       	rjmp	.-1496   	; 0x287a <MifareClassicAppProcess+0x1c8>
                return ACK_NAK_FRAME_SIZE;
            }
        } else if ( (Buffer[0] == CMD_AUTH_A) || (Buffer[0] == CMD_AUTH_B)) {
            if (ISO14443ACheckCRCA(Buffer, CMD_AUTH_FRAME_SIZE)) {
                uint8_t SectorAddress = Buffer[1] & MEM_SECTOR_ADDR_MASK;
                uint8_t KeyOffset = (Buffer[0] == CMD_AUTH_A ? MEM_KEY_A_OFFSET : MEM_KEY_B_OFFSET);
    2e52:	80 e3       	ldi	r24, 0x30	; 48
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	ae cd       	rjmp	.-1188   	; 0x29b4 <MifareClassicAppProcess+0x302>

00002e58 <MifareClassicGetUid>:
    return ISO14443A_APP_NO_RESPONSE;
}

void MifareClassicGetUid(ConfigurationUidType Uid)
{
    MemoryReadBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2e58:	44 e0       	ldi	r20, 0x04	; 4
    2e5a:	50 e0       	ldi	r21, 0x00	; 0
    2e5c:	60 e0       	ldi	r22, 0x00	; 0
    2e5e:	70 e0       	ldi	r23, 0x00	; 0
    2e60:	0c 94 28 06 	jmp	0xc50	; 0xc50 <MemoryReadBlock>

00002e64 <MifareClassicSetUid>:
}

void MifareClassicSetUid(ConfigurationUidType Uid)
{
    2e64:	cf 93       	push	r28
    2e66:	df 93       	push	r29
    2e68:	1f 92       	push	r1
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    uint8_t BCC =  Uid[0] ^ Uid[1] ^ Uid[2] ^ Uid[3];
    2e6e:	fc 01       	movw	r30, r24
    2e70:	21 81       	ldd	r18, Z+1	; 0x01
    2e72:	30 81       	ld	r19, Z
    2e74:	23 27       	eor	r18, r19
    2e76:	32 81       	ldd	r19, Z+2	; 0x02
    2e78:	23 27       	eor	r18, r19
    2e7a:	33 81       	ldd	r19, Z+3	; 0x03
    2e7c:	23 27       	eor	r18, r19
    2e7e:	29 83       	std	Y+1, r18	; 0x01

    MemoryWriteBlock(Uid, MEM_UID_CL1_ADDRESS, MEM_UID_CL1_SIZE);
    2e80:	44 e0       	ldi	r20, 0x04	; 4
    2e82:	50 e0       	ldi	r21, 0x00	; 0
    2e84:	60 e0       	ldi	r22, 0x00	; 0
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	0e 94 ad 06 	call	0xd5a	; 0xd5a <MemoryWriteBlock>
    MemoryWriteBlock(&BCC, MEM_UID_BCC1_ADDRESS, ISO14443A_CL_BCC_SIZE);
    2e8c:	41 e0       	ldi	r20, 0x01	; 1
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	64 e0       	ldi	r22, 0x04	; 4
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	ce 01       	movw	r24, r28
    2e96:	01 96       	adiw	r24, 0x01	; 1
    2e98:	0e 94 ad 06 	call	0xd5a	; 0xd5a <MemoryWriteBlock>
}
    2e9c:	0f 90       	pop	r0
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	08 95       	ret

00002ea4 <ISO14443AAppendCRCA>:
 * policies, either expressed or implied, of the ORIGINAL AUTHORS.
 */

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    2ea4:	fc 01       	movw	r30, r24
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    2ea6:	61 15       	cp	r22, r1
    2ea8:	71 05       	cpc	r23, r1
    2eaa:	39 f1       	breq	.+78     	; 0x2efa <ISO14443AAppendCRCA+0x56>
    2eac:	68 0f       	add	r22, r24
    2eae:	79 1f       	adc	r23, r25
 */

#include "ISO14443-3A.h"

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    2eb0:	23 e6       	ldi	r18, 0x63	; 99
    2eb2:	33 e6       	ldi	r19, 0x63	; 99
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        uint8_t Byte = *DataPtr++;
    2eb4:	41 91       	ld	r20, Z+

        Byte ^= (uint8_t) (Checksum & 0x00FF);
    2eb6:	42 27       	eor	r20, r18
        Byte ^= Byte << 4;
    2eb8:	50 e1       	ldi	r21, 0x10	; 16
    2eba:	45 9f       	mul	r20, r21
    2ebc:	c0 01       	movw	r24, r0
    2ebe:	11 24       	eor	r1, r1
    2ec0:	a4 2f       	mov	r26, r20
    2ec2:	a8 27       	eor	r26, r24

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    2ec4:	8a 2f       	mov	r24, r26
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	58 2f       	mov	r21, r24
    2eca:	44 27       	eor	r20, r20
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    2ecc:	88 0f       	add	r24, r24
    2ece:	99 1f       	adc	r25, r25
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    2ed8:	48 27       	eor	r20, r24
    2eda:	59 27       	eor	r21, r25
    2edc:	23 2f       	mov	r18, r19
    2ede:	33 27       	eor	r19, r19
    2ee0:	24 27       	eor	r18, r20
    2ee2:	35 27       	eor	r19, r21
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    2ee4:	a2 95       	swap	r26
    2ee6:	af 70       	andi	r26, 0x0F	; 15
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    2ee8:	2a 27       	eor	r18, r26

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    2eea:	e6 17       	cp	r30, r22
    2eec:	f7 07       	cpc	r31, r23
    2eee:	11 f7       	brne	.-60     	; 0x2eb4 <ISO14443AAppendCRCA+0x10>
    2ef0:	92 2f       	mov	r25, r18
    2ef2:	83 2f       	mov	r24, r19

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    2ef4:	90 83       	st	Z, r25
    *DataPtr = (Checksum >> 8) & 0x00FF;
    2ef6:	81 83       	std	Z+1, r24	; 0x01
    2ef8:	08 95       	ret

void ISO14443AAppendCRCA(void* Buffer, uint16_t ByteCount) {
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    2efa:	83 e6       	ldi	r24, 0x63	; 99
    2efc:	93 e6       	ldi	r25, 0x63	; 99
    2efe:	fa cf       	rjmp	.-12     	; 0x2ef4 <ISO14443AAppendCRCA+0x50>

00002f00 <ISO14443ACheckCRCA>:
    *DataPtr++ = (Checksum >> 0) & 0x00FF;
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    2f00:	fc 01       	movw	r30, r24
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    2f02:	61 15       	cp	r22, r1
    2f04:	71 05       	cpc	r23, r1
    2f06:	a9 f1       	breq	.+106    	; 0x2f72 <ISO14443ACheckCRCA+0x72>
    2f08:	68 0f       	add	r22, r24
    2f0a:	79 1f       	adc	r23, r25
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    2f0c:	23 e6       	ldi	r18, 0x63	; 99
    2f0e:	33 e6       	ldi	r19, 0x63	; 99
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
        uint8_t Byte = *DataPtr++;
    2f10:	41 91       	ld	r20, Z+

        Byte ^= (uint8_t) (Checksum & 0x00FF);
    2f12:	42 27       	eor	r20, r18
        Byte ^= Byte << 4;
    2f14:	50 e1       	ldi	r21, 0x10	; 16
    2f16:	45 9f       	mul	r20, r21
    2f18:	c0 01       	movw	r24, r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	a4 2f       	mov	r26, r20
    2f1e:	a8 27       	eor	r26, r24

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    2f20:	8a 2f       	mov	r24, r26
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	58 2f       	mov	r21, r24
    2f26:	44 27       	eor	r20, r20
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    2f28:	88 0f       	add	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    2f34:	48 27       	eor	r20, r24
    2f36:	59 27       	eor	r21, r25
    2f38:	23 2f       	mov	r18, r19
    2f3a:	33 27       	eor	r19, r19
    2f3c:	24 27       	eor	r18, r20
    2f3e:	35 27       	eor	r19, r21
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    2f40:	a2 95       	swap	r26
    2f42:	af 70       	andi	r26, 0x0F	; 15
        uint8_t Byte = *DataPtr++;

        Byte ^= (uint8_t) (Checksum & 0x00FF);
        Byte ^= Byte << 4;

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
    2f44:	2a 27       	eor	r18, r26
bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    2f46:	e6 17       	cp	r30, r22
    2f48:	f7 07       	cpc	r31, r23
    2f4a:	11 f7       	brne	.-60     	; 0x2f10 <ISO14443ACheckCRCA+0x10>
    2f4c:	a9 01       	movw	r20, r18
    2f4e:	55 27       	eor	r21, r21

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    return (DataPtr[0] == ((Checksum >> 0) & 0xFF)) && (DataPtr[1] == ((Checksum >> 8) & 0xFF));
    2f50:	80 81       	ld	r24, Z
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	84 17       	cp	r24, r20
    2f56:	95 07       	cpc	r25, r21
    2f58:	11 f0       	breq	.+4      	; 0x2f5e <ISO14443ACheckCRCA+0x5e>
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
}
    2f5c:	08 95       	ret

        Checksum = (Checksum >> 8) ^ ( (uint16_t) Byte << 8 ) ^
                ( (uint16_t) Byte << 3 ) ^ ( (uint16_t) Byte >> 4 );
    }

    return (DataPtr[0] == ((Checksum >> 0) & 0xFF)) && (DataPtr[1] == ((Checksum >> 8) & 0xFF));
    2f5e:	41 81       	ldd	r20, Z+1	; 0x01
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	23 2f       	mov	r18, r19
    2f64:	33 27       	eor	r19, r19
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	42 17       	cp	r20, r18
    2f6a:	53 07       	cpc	r21, r19
    2f6c:	b9 f3       	breq	.-18     	; 0x2f5c <ISO14443ACheckCRCA+0x5c>
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	f5 cf       	rjmp	.-22     	; 0x2f5c <ISO14443ACheckCRCA+0x5c>
bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    uint8_t* DataPtr = (uint8_t*) Buffer;

    while(ByteCount--) {
    2f72:	43 e6       	ldi	r20, 0x63	; 99
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    *DataPtr = (Checksum >> 8) & 0x00FF;
}

bool ISO14443ACheckCRCA(void* Buffer, uint16_t ByteCount)
{
    uint16_t Checksum = 0x6363;
    2f76:	23 e6       	ldi	r18, 0x63	; 99
    2f78:	33 e6       	ldi	r19, 0x63	; 99
    2f7a:	ea cf       	rjmp	.-44     	; 0x2f50 <ISO14443ACheckCRCA+0x50>

00002f7c <Crypto1LFSR>:
/* Split Crypto1 state into even and odd bits to speed up the output filter network */
static uint8_t StateEven[LFSR_SIZE/2] = {0};
static uint8_t StateOdd[LFSR_SIZE/2] = {0};

/* Proceed LFSR by one clock cycle */
static void Crypto1LFSR(uint8_t In) {
    2f7c:	cf 93       	push	r28
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    2f7e:	b0 91 d5 20 	lds	r27, 0x20D5
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    2f82:	c0 91 d6 20 	lds	r28, 0x20D6
    Feedback ^= StateEven[2] & (uint8_t) (LFSR_MASK_EVEN >> 16);
    2f86:	40 91 d7 20 	lds	r20, 0x20D7

    Feedback ^= StateOdd[0] & (uint8_t) (LFSR_MASK_ODD >> 0);
    2f8a:	a0 91 d2 20 	lds	r26, 0x20D2
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    2f8e:	f0 91 d3 20 	lds	r31, 0x20D3
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);
    2f92:	e0 91 d4 20 	lds	r30, 0x20D4
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    2f96:	9c 2f       	mov	r25, r28
    2f98:	90 71       	andi	r25, 0x10	; 16
static void Crypto1LFSR(uint8_t In) {
    uint8_t Feedback = 0;

    /* Calculate feedback according to LFSR taps. XOR all 6 state bytes
    * into a single bit. */
    Feedback ^= StateEven[0] & (uint8_t) (LFSR_MASK_EVEN >> 0);
    2f9a:	2b 2f       	mov	r18, r27
    2f9c:	21 7e       	andi	r18, 0xE1	; 225
    Feedback ^= StateEven[1] & (uint8_t) (LFSR_MASK_EVEN >> 8);
    2f9e:	92 27       	eor	r25, r18
    Feedback ^= StateEven[2] & (uint8_t) (LFSR_MASK_EVEN >> 16);
    2fa0:	24 2f       	mov	r18, r20
    2fa2:	20 72       	andi	r18, 0x20	; 32
    2fa4:	92 27       	eor	r25, r18

    Feedback ^= StateOdd[0] & (uint8_t) (LFSR_MASK_ODD >> 0);
    2fa6:	2a 2f       	mov	r18, r26
    2fa8:	24 79       	andi	r18, 0x94	; 148
    2faa:	92 27       	eor	r25, r18
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    2fac:	2f 2f       	mov	r18, r31
    2fae:	23 77       	andi	r18, 0x73	; 115
    2fb0:	92 27       	eor	r25, r18
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);
    2fb2:	2e 2f       	mov	r18, r30
    2fb4:	2a 73       	andi	r18, 0x3A	; 58
    2fb6:	92 27       	eor	r25, r18

    Feedback ^= Feedback >> 4;
    2fb8:	39 2f       	mov	r19, r25
    2fba:	32 95       	swap	r19
    2fbc:	3f 70       	andi	r19, 0x0F	; 15
    2fbe:	39 27       	eor	r19, r25
    Feedback ^= Feedback >> 2;
    2fc0:	23 2f       	mov	r18, r19
    2fc2:	26 95       	lsr	r18
    2fc4:	26 95       	lsr	r18
    2fc6:	23 27       	eor	r18, r19
    Feedback ^= Feedback >> 1;
    2fc8:	92 2f       	mov	r25, r18
    2fca:	96 95       	lsr	r25
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    Temp |= ((uint32_t) StateEven[1] << 8);
    Temp |= ((uint32_t) StateEven[2] << 16);
    2fcc:	50 e0       	ldi	r21, 0x00	; 0
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	70 e0       	ldi	r23, 0x00	; 0
    2fd2:	ba 01       	movw	r22, r20
    2fd4:	55 27       	eor	r21, r21
    2fd6:	44 27       	eor	r20, r20
    * - the new even state becomes the old odd state
    * - the new odd state becomes the old even state right-shifted by 1.
    * For shifting the even state, we convert it into a 32 bit int first */
    uint32_t Temp = 0;
    Temp |= ((uint32_t) StateEven[0] << 0);
    Temp |= ((uint32_t) StateEven[1] << 8);
    2fd8:	5c 2b       	or	r21, r28
    Temp |= ((uint32_t) StateEven[2] << 16);
    2fda:	4b 2b       	or	r20, r27

    /* Proceed LFSR. Try to force compiler not to shift the unneded upper bits. */
    Temp = (Temp >> 1) & 0x00FFFFFF;
    2fdc:	76 95       	lsr	r23
    2fde:	67 95       	ror	r22
    2fe0:	57 95       	ror	r21
    2fe2:	47 95       	ror	r20
    Feedback ^= StateOdd[1] & (uint8_t) (LFSR_MASK_ODD >> 8);
    Feedback ^= StateOdd[2] & (uint8_t) (LFSR_MASK_ODD >> 16);

    Feedback ^= Feedback >> 4;
    Feedback ^= Feedback >> 2;
    Feedback ^= Feedback >> 1;
    2fe4:	92 27       	eor	r25, r18

    /* Proceed LFSR. Try to force compiler not to shift the unneded upper bits. */
    Temp = (Temp >> 1) & 0x00FFFFFF;

    /* Calculate MSBit of even state as input bit to LFSR */
    if ( (Feedback & 0x01) ^ In ) {
    2fe6:	91 70       	andi	r25, 0x01	; 1
    2fe8:	98 13       	cpse	r25, r24
        Temp |= (uint32_t) 1 << (8 * LFSR_SIZE/2 - 1);
    2fea:	60 68       	ori	r22, 0x80	; 128
    }

    /* Convert even state back into byte array and swap odd/even state
    * as explained above. */
    StateEven[0] = StateOdd[0];
    2fec:	a0 93 d5 20 	sts	0x20D5, r26
    StateEven[1] = StateOdd[1];
    2ff0:	f0 93 d6 20 	sts	0x20D6, r31
    StateEven[2] = StateOdd[2];
    2ff4:	e0 93 d7 20 	sts	0x20D7, r30

    StateOdd[0] = (uint8_t) (Temp >> 0);
    2ff8:	40 93 d2 20 	sts	0x20D2, r20
    StateOdd[1] = (uint8_t) (Temp >> 8);
    2ffc:	50 93 d3 20 	sts	0x20D3, r21
    StateOdd[2] = (uint8_t) (Temp >> 16);
    3000:	60 93 d4 20 	sts	0x20D4, r22
}
    3004:	cf 91       	pop	r28
    3006:	08 95       	ret

00003008 <Crypto1FilterOutput>:

uint8_t Crypto1FilterOutput(void) {
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    300c:	a0 91 d3 20 	lds	r26, 0x20D3
    3010:	ea 2f       	mov	r30, r26
    3012:	ef 70       	andi	r30, 0x0F	; 15
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	e0 5c       	subi	r30, 0xC0	; 192
    3018:	ff 4d       	sbci	r31, 0xDF	; 223
    * can simply be ORed together to produce the resulting
    * 5 bits that are used to lookup the output bit.
    */
    uint8_t Sum = 0;

    Sum |= TableAB[0][(StateOdd[0] >> 4) & 0x0F];
    301a:	c0 91 d2 20 	lds	r28, 0x20D2
    301e:	c2 95       	swap	r28
    3020:	cf 70       	andi	r28, 0x0F	; 15
    3022:	d0 e0       	ldi	r29, 0x00	; 0
    3024:	c0 5c       	subi	r28, 0xC0	; 192
    3026:	df 4d       	sbci	r29, 0xDF	; 223
    Sum |= TableAB[1][(StateOdd[1] >> 0) & 0x0F];
    3028:	e0 89       	ldd	r30, Z+16	; 0x10
    302a:	88 81       	ld	r24, Y
    302c:	e8 2b       	or	r30, r24
    Sum |= TableAB[2][(StateOdd[1] >> 4) & 0x0F];
    302e:	a2 95       	swap	r26
    3030:	af 70       	andi	r26, 0x0F	; 15
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	a0 5c       	subi	r26, 0xC0	; 192
    3036:	bf 4d       	sbci	r27, 0xDF	; 223
    3038:	90 96       	adiw	r26, 0x20	; 32
    303a:	8c 91       	ld	r24, X
    303c:	e8 2b       	or	r30, r24
    Sum |= TableAB[3][(StateOdd[2] >> 0) & 0x0F];
    303e:	a0 91 d4 20 	lds	r26, 0x20D4
    3042:	ca 2f       	mov	r28, r26
    3044:	cf 70       	andi	r28, 0x0F	; 15
    3046:	d0 e0       	ldi	r29, 0x00	; 0
    3048:	c0 5c       	subi	r28, 0xC0	; 192
    304a:	df 4d       	sbci	r29, 0xDF	; 223
    304c:	88 a9       	ldd	r24, Y+48	; 0x30
    304e:	e8 2b       	or	r30, r24
    Sum |= TableAB[4][(StateOdd[2] >> 4) & 0x0F];
    3050:	a2 95       	swap	r26
    3052:	af 70       	andi	r26, 0x0F	; 15
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	a0 58       	subi	r26, 0x80	; 128
    3058:	bf 4d       	sbci	r27, 0xDF	; 223
    305a:	8c 91       	ld	r24, X
    305c:	e8 2b       	or	r30, r24

    return TableC[Sum];
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	e0 5e       	subi	r30, 0xE0	; 224
    3062:	ff 4d       	sbci	r31, 0xDF	; 223
}
    3064:	80 81       	ld	r24, Z
    3066:	df 91       	pop	r29
    3068:	cf 91       	pop	r28
    306a:	08 95       	ret

0000306c <Crypto1Setup>:

void Crypto1Setup(uint8_t Key[6], uint8_t Uid[4], uint8_t CardNonce[4])
{
    306c:	af 92       	push	r10
    306e:	bf 92       	push	r11
    3070:	cf 92       	push	r12
    3072:	df 92       	push	r13
    3074:	ef 92       	push	r14
    3076:	ff 92       	push	r15
    3078:	0f 93       	push	r16
    307a:	1f 93       	push	r17
    307c:	cf 93       	push	r28
    307e:	df 93       	push	r29
    3080:	5b 01       	movw	r10, r22
    3082:	ea 01       	movw	r28, r20
    3084:	dc 01       	movw	r26, r24
    3086:	11 96       	adiw	r26, 0x01	; 1
    3088:	45 ed       	ldi	r20, 0xD5	; 213
    308a:	50 e2       	ldi	r21, 0x20	; 32
    308c:	62 ed       	ldi	r22, 0xD2	; 210
    308e:	70 e2       	ldi	r23, 0x20	; 32
    3090:	cd 01       	movw	r24, r26
    3092:	01 97       	sbiw	r24, 0x01	; 1
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
        uint8_t EvenByte = 0;
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
    3094:	fc 01       	movw	r30, r24
    3096:	20 81       	ld	r18, Z
    3098:	8c 91       	ld	r24, X
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	38 2b       	or	r19, r24
    309e:	20 ff       	sbrs	r18, 0
    30a0:	b0 c0       	rjmp	.+352    	; 0x3202 <Crypto1Setup+0x196>
    30a2:	00 e4       	ldi	r16, 0x40	; 64
    30a4:	21 ff       	sbrs	r18, 1
    30a6:	ab c0       	rjmp	.+342    	; 0x31fe <Crypto1Setup+0x192>
    30a8:	10 e4       	ldi	r17, 0x40	; 64

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
            }

            KeyWord >>= 2;
    30aa:	c9 01       	movw	r24, r18
    30ac:	96 95       	lsr	r25
    30ae:	87 95       	ror	r24
    30b0:	96 95       	lsr	r25
    30b2:	87 95       	ror	r24
        for (j=0; j<8; j++) {
            EvenByte >>= 1;
            OddByte >>= 1;

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    30b4:	30 2f       	mov	r19, r16
    30b6:	30 68       	ori	r19, 0x80	; 128
    30b8:	80 ff       	sbrs	r24, 0
    30ba:	30 2f       	mov	r19, r16
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    30bc:	21 2f       	mov	r18, r17
    30be:	20 68       	ori	r18, 0x80	; 128
    30c0:	81 ff       	sbrs	r24, 1
    30c2:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    30c4:	96 95       	lsr	r25
    30c6:	87 95       	ror	r24
    30c8:	96 95       	lsr	r25
    30ca:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    30cc:	36 95       	lsr	r19
            OddByte >>= 1;
    30ce:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    30d0:	13 2f       	mov	r17, r19
    30d2:	10 68       	ori	r17, 0x80	; 128
    30d4:	80 fd       	sbrc	r24, 0
    30d6:	31 2f       	mov	r19, r17
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    30d8:	12 2f       	mov	r17, r18
    30da:	10 68       	ori	r17, 0x80	; 128
    30dc:	81 fd       	sbrc	r24, 1
    30de:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    30e0:	96 95       	lsr	r25
    30e2:	87 95       	ror	r24
    30e4:	96 95       	lsr	r25
    30e6:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    30e8:	36 95       	lsr	r19
            OddByte >>= 1;
    30ea:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    30ec:	13 2f       	mov	r17, r19
    30ee:	10 68       	ori	r17, 0x80	; 128
    30f0:	80 fd       	sbrc	r24, 0
    30f2:	31 2f       	mov	r19, r17
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    30f4:	12 2f       	mov	r17, r18
    30f6:	10 68       	ori	r17, 0x80	; 128
    30f8:	81 fd       	sbrc	r24, 1
    30fa:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    30fc:	96 95       	lsr	r25
    30fe:	87 95       	ror	r24
    3100:	96 95       	lsr	r25
    3102:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3104:	36 95       	lsr	r19
            OddByte >>= 1;
    3106:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3108:	13 2f       	mov	r17, r19
    310a:	10 68       	ori	r17, 0x80	; 128
    310c:	80 fd       	sbrc	r24, 0
    310e:	31 2f       	mov	r19, r17
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3110:	12 2f       	mov	r17, r18
    3112:	10 68       	ori	r17, 0x80	; 128
    3114:	81 fd       	sbrc	r24, 1
    3116:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    3118:	96 95       	lsr	r25
    311a:	87 95       	ror	r24
    311c:	96 95       	lsr	r25
    311e:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3120:	36 95       	lsr	r19
            OddByte >>= 1;
    3122:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3124:	13 2f       	mov	r17, r19
    3126:	10 68       	ori	r17, 0x80	; 128
    3128:	80 fd       	sbrc	r24, 0
    312a:	31 2f       	mov	r19, r17
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    312c:	12 2f       	mov	r17, r18
    312e:	10 68       	ori	r17, 0x80	; 128
    3130:	81 fd       	sbrc	r24, 1
    3132:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    3134:	96 95       	lsr	r25
    3136:	87 95       	ror	r24
    3138:	96 95       	lsr	r25
    313a:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    313c:	36 95       	lsr	r19
            OddByte >>= 1;
    313e:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    3140:	13 2f       	mov	r17, r19
    3142:	10 68       	ori	r17, 0x80	; 128
    3144:	80 fd       	sbrc	r24, 0
    3146:	31 2f       	mov	r19, r17
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3148:	12 2f       	mov	r17, r18
    314a:	10 68       	ori	r17, 0x80	; 128
    314c:	81 fd       	sbrc	r24, 1
    314e:	21 2f       	mov	r18, r17
            }

            KeyWord >>= 2;
    3150:	96 95       	lsr	r25
    3152:	87 95       	ror	r24
    3154:	96 95       	lsr	r25
    3156:	87 95       	ror	r24
        uint8_t OddByte = 0;
        uint16_t KeyWord = ((uint16_t) Key[2*i+1] << 8) | Key[2*i+0];
        uint8_t j;

        for (j=0; j<8; j++) {
            EvenByte >>= 1;
    3158:	36 95       	lsr	r19
            OddByte >>= 1;
    315a:	26 95       	lsr	r18

            if (KeyWord & (1<<0)) {
                EvenByte |= 0x80;
    315c:	03 2f       	mov	r16, r19
    315e:	00 68       	ori	r16, 0x80	; 128
            }

            if (KeyWord & (1<<1)) {
                OddByte |= 0x80;
    3160:	12 2f       	mov	r17, r18
    3162:	10 68       	ori	r17, 0x80	; 128
    3164:	80 fd       	sbrc	r24, 0
    3166:	30 2f       	mov	r19, r16
            }

            KeyWord >>= 2;
        }

        StateEven[i] = EvenByte;
    3168:	fa 01       	movw	r30, r20
    316a:	31 93       	st	Z+, r19
    316c:	af 01       	movw	r20, r30
    316e:	81 fd       	sbrc	r24, 1
    3170:	21 2f       	mov	r18, r17
        StateOdd[i] = OddByte;
    3172:	fb 01       	movw	r30, r22
    3174:	21 93       	st	Z+, r18
    3176:	bf 01       	movw	r22, r30
    3178:	12 96       	adiw	r26, 0x02	; 2

    /* Again, one trade off when splitting up the state into even/odd parts
    * is that loading the key into the state becomes a little more difficult.
    * The inner loop generates 8 even and 8 odd bits from 16 key bits and
    * the outer loop stores them. */
    for (i=0; i<(LFSR_SIZE/2); i++) {
    317a:	f0 e2       	ldi	r31, 0x20	; 32
    317c:	48 3d       	cpi	r20, 0xD8	; 216
    317e:	5f 07       	cpc	r21, r31
    3180:	09 f0       	breq	.+2      	; 0x3184 <Crypto1Setup+0x118>
    3182:	86 cf       	rjmp	.-244    	; 0x3090 <Crypto1Setup+0x24>
    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    3184:	f5 01       	movw	r30, r10
    3186:	81 81       	ldd	r24, Z+1	; 0x01
    3188:	99 81       	ldd	r25, Y+1	; 0x01
    318a:	89 27       	eor	r24, r25
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    318c:	c2 80       	ldd	r12, Z+2	; 0x02
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	c9 26       	eor	r12, r25
    3192:	d1 2c       	mov	r13, r1
    3194:	e1 2c       	mov	r14, r1
    3196:	f1 2c       	mov	r15, r1
    3198:	76 01       	movw	r14, r12
    319a:	dd 24       	eor	r13, r13
    319c:	cc 24       	eor	r12, r12
    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    319e:	d8 2a       	or	r13, r24

    /* Use Uid XOR CardNonce as feed-in and do 32 clocks on the
    * Crypto1 LFSR.*/
    uint32_t Temp = 0;

    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    31a0:	80 81       	ld	r24, Z
    31a2:	98 81       	ld	r25, Y
    31a4:	89 27       	eor	r24, r25
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    31a6:	c8 2a       	or	r12, r24
    Temp |= (uint32_t) (Uid[3] ^ CardNonce[3]) << 24;
    31a8:	83 81       	ldd	r24, Z+3	; 0x03
    31aa:	9b 81       	ldd	r25, Y+3	; 0x03
    31ac:	89 27       	eor	r24, r25
    31ae:	f8 2a       	or	r15, r24
    31b0:	10 e2       	ldi	r17, 0x20	; 32

    for (i=0; i<32; i++) {
        uint8_t Out = Crypto1FilterOutput();
    31b2:	2a df       	rcall	.-428    	; 0x3008 <Crypto1FilterOutput>
    31b4:	08 2f       	mov	r16, r24

        Crypto1LFSR(Temp & 0x01);
    31b6:	8c 2d       	mov	r24, r12
    31b8:	81 70       	andi	r24, 0x01	; 1
    31ba:	e0 de       	rcall	.-576    	; 0x2f7c <Crypto1LFSR>
        Temp >>= 1;
    31bc:	f6 94       	lsr	r15
    31be:	e7 94       	ror	r14
    31c0:	d7 94       	ror	r13
    31c2:	c7 94       	ror	r12

        /* Store the keystream for later use */
        if (Out) {
    31c4:	00 23       	and	r16, r16
    31c6:	11 f0       	breq	.+4      	; 0x31cc <Crypto1Setup+0x160>
            Temp |= (uint32_t) 1 << 31;
    31c8:	68 94       	set
    31ca:	f7 f8       	bld	r15, 7
    31cc:	11 50       	subi	r17, 0x01	; 1
    Temp |= (uint32_t) (Uid[0] ^ CardNonce[0]) << 0;
    Temp |= (uint32_t) (Uid[1] ^ CardNonce[1]) << 8;
    Temp |= (uint32_t) (Uid[2] ^ CardNonce[2]) << 16;
    Temp |= (uint32_t) (Uid[3] ^ CardNonce[3]) << 24;

    for (i=0; i<32; i++) {
    31ce:	89 f7       	brne	.-30     	; 0x31b2 <Crypto1Setup+0x146>
    }

    /* Crypto1 state register is now set up to be used for authentication.
    * In case of nested authentication, we need to use the produced keystream
    * to encrypt the CardNonce. For this case we do the encryption in-place. */
    CardNonce[0] ^= (uint8_t) (Temp >> 0);
    31d0:	88 81       	ld	r24, Y
    31d2:	8c 25       	eor	r24, r12
    31d4:	88 83       	st	Y, r24
    CardNonce[1] ^= (uint8_t) (Temp >> 8);
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	8d 25       	eor	r24, r13
    31da:	89 83       	std	Y+1, r24	; 0x01
    CardNonce[2] ^= (uint8_t) (Temp >> 16);
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	8e 25       	eor	r24, r14
    31e0:	8a 83       	std	Y+2, r24	; 0x02
    CardNonce[3] ^= (uint8_t) (Temp >> 24);
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	8f 25       	eor	r24, r15
    31e6:	8b 83       	std	Y+3, r24	; 0x03
}
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	0f 91       	pop	r16
    31f0:	ff 90       	pop	r15
    31f2:	ef 90       	pop	r14
    31f4:	df 90       	pop	r13
    31f6:	cf 90       	pop	r12
    31f8:	bf 90       	pop	r11
    31fa:	af 90       	pop	r10
    31fc:	08 95       	ret
    31fe:	10 e0       	ldi	r17, 0x00	; 0
    3200:	54 cf       	rjmp	.-344    	; 0x30aa <Crypto1Setup+0x3e>
    3202:	00 e0       	ldi	r16, 0x00	; 0
    3204:	4f cf       	rjmp	.-354    	; 0x30a4 <Crypto1Setup+0x38>

00003206 <Crypto1Auth>:

void Crypto1Auth(uint8_t EncryptedReaderNonce[4])
{
    3206:	cf 92       	push	r12
    3208:	df 92       	push	r13
    320a:	ef 92       	push	r14
    320c:	ff 92       	push	r15
    320e:	cf 93       	push	r28
    3210:	fc 01       	movw	r30, r24
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    3212:	81 81       	ldd	r24, Z+1	; 0x01
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    3214:	c2 80       	ldd	r12, Z+2	; 0x02
    3216:	d1 2c       	mov	r13, r1
    3218:	e1 2c       	mov	r14, r1
    321a:	f1 2c       	mov	r15, r1
    321c:	76 01       	movw	r14, r12
    321e:	dd 24       	eor	r13, r13
    3220:	cc 24       	eor	r12, r12
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    3222:	d8 2a       	or	r13, r24
{
    uint32_t Temp = 0;

    /* For ease of processing, we convert the encrypted reader nonce
    * into a 32 bit integer */
    Temp |= (uint32_t) EncryptedReaderNonce[0] << 0;
    3224:	80 81       	ld	r24, Z
    Temp |= (uint32_t) EncryptedReaderNonce[1] << 8;
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    3226:	c8 2a       	or	r12, r24
    Temp |= (uint32_t) EncryptedReaderNonce[3] << 24;
    3228:	83 81       	ldd	r24, Z+3	; 0x03
    322a:	f8 2a       	or	r15, r24
    322c:	c0 e2       	ldi	r28, 0x20	; 32
    uint8_t i;

    for (i=0; i<32; i++) {
        /* Decrypt one output bit of the given encrypted nonce using the
        * filter output as keystream. */
        uint8_t Out = Crypto1FilterOutput();
    322e:	ec de       	rcall	.-552    	; 0x3008 <Crypto1FilterOutput>
        uint8_t Bit = Out ^ (Temp & 0x01);
    3230:	9c 2d       	mov	r25, r12
    3232:	91 70       	andi	r25, 0x01	; 1

        /* Feed back the bit to load the LFSR with the (decrypted) nonce */
        Crypto1LFSR(Bit);
    3234:	89 27       	eor	r24, r25
    3236:	a2 de       	rcall	.-700    	; 0x2f7c <Crypto1LFSR>
        Temp >>= 1;
    3238:	f6 94       	lsr	r15
    323a:	e7 94       	ror	r14
    323c:	d7 94       	ror	r13
    323e:	c7 94       	ror	r12
    3240:	c1 50       	subi	r28, 0x01	; 1
    Temp |= (uint32_t) EncryptedReaderNonce[2] << 16;
    Temp |= (uint32_t) EncryptedReaderNonce[3] << 24;

    uint8_t i;

    for (i=0; i<32; i++) {
    3242:	a9 f7       	brne	.-22     	; 0x322e <Crypto1Auth+0x28>

        /* Feed back the bit to load the LFSR with the (decrypted) nonce */
        Crypto1LFSR(Bit);
        Temp >>= 1;
    }
}
    3244:	cf 91       	pop	r28
    3246:	ff 90       	pop	r15
    3248:	ef 90       	pop	r14
    324a:	df 90       	pop	r13
    324c:	cf 90       	pop	r12
    324e:	08 95       	ret

00003250 <Crypto1Byte>:

uint8_t Crypto1Byte(void)
{
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	d8 e0       	ldi	r29, 0x08	; 8
    uint8_t KeyStream = 0;
    3258:	c0 e0       	ldi	r28, 0x00	; 0
    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    325a:	d6 de       	rcall	.-596    	; 0x3008 <Crypto1FilterOutput>
    325c:	18 2f       	mov	r17, r24
        Crypto1LFSR(0);
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	8d de       	rcall	.-742    	; 0x2f7c <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    3262:	c6 95       	lsr	r28

        if (Out) {
    3264:	11 11       	cpse	r17, r1
            KeyStream |= (1<<7);
    3266:	c0 68       	ori	r28, 0x80	; 128
    3268:	d1 50       	subi	r29, 0x01	; 1
{
    uint8_t KeyStream = 0;
    uint8_t i;

    /* Generate 8 keystream-bits */
    for (i=0; i<8; i++) {
    326a:	b9 f7       	brne	.-18     	; 0x325a <Crypto1Byte+0xa>
            KeyStream |= (1<<7);
        }
    }

    return KeyStream;
}
    326c:	8c 2f       	mov	r24, r28
    326e:	df 91       	pop	r29
    3270:	cf 91       	pop	r28
    3272:	1f 91       	pop	r17
    3274:	08 95       	ret

00003276 <Crypto1Nibble>:

uint8_t Crypto1Nibble(void)
{
    3276:	1f 93       	push	r17
    3278:	cf 93       	push	r28
    327a:	df 93       	push	r29
    327c:	d4 e0       	ldi	r29, 0x04	; 4
    uint8_t KeyStream = 0;
    327e:	c0 e0       	ldi	r28, 0x00	; 0
    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {

        /* Calculate output of function-network and cycle LFSR with no
        * additional input, thus linearly! */
        uint8_t Out = Crypto1FilterOutput();
    3280:	c3 de       	rcall	.-634    	; 0x3008 <Crypto1FilterOutput>
    3282:	18 2f       	mov	r17, r24
        Crypto1LFSR(0);
    3284:	80 e0       	ldi	r24, 0x00	; 0
    3286:	7a de       	rcall	.-780    	; 0x2f7c <Crypto1LFSR>

        /* Store keystream bit */
        KeyStream >>= 1;
    3288:	c6 95       	lsr	r28

        if (Out) {
    328a:	11 11       	cpse	r17, r1
            KeyStream |= (1<<3);
    328c:	c8 60       	ori	r28, 0x08	; 8
    328e:	d1 50       	subi	r29, 0x01	; 1
{
    uint8_t KeyStream = 0;
    uint8_t i;

    /* Generate 4 keystream-bits */
    for (i=0; i<4; i++) {
    3290:	b9 f7       	brne	.-18     	; 0x3280 <Crypto1Nibble+0xa>
            KeyStream |= (1<<3);
        }
    }

    return KeyStream;
}
    3292:	8c 2f       	mov	r24, r28
    3294:	df 91       	pop	r29
    3296:	cf 91       	pop	r28
    3298:	1f 91       	pop	r17
    329a:	08 95       	ret

0000329c <Crypto1PRNG>:

void Crypto1PRNG(uint8_t State[4], uint16_t ClockCount)
{
    329c:	8f 92       	push	r8
    329e:	9f 92       	push	r9
    32a0:	af 92       	push	r10
    32a2:	bf 92       	push	r11
    32a4:	cf 92       	push	r12
    32a6:	df 92       	push	r13
    32a8:	ef 92       	push	r14
    32aa:	ff 92       	push	r15
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	fc 01       	movw	r30, r24
    while(ClockCount--) {
    32b2:	cb 01       	movw	r24, r22
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	67 2b       	or	r22, r23
    32b8:	b1 f1       	breq	.+108    	; 0x3326 <Crypto1PRNG+0x8a>
    32ba:	b2 81       	ldd	r27, Z+2	; 0x02
    32bc:	a0 81       	ld	r26, Z
    32be:	81 80       	ldd	r8, Z+1	; 0x01
    32c0:	03 81       	ldd	r16, Z+3	; 0x03
    32c2:	02 c0       	rjmp	.+4      	; 0x32c8 <Crypto1PRNG+0x2c>
    32c4:	a4 2f       	mov	r26, r20
    32c6:	bc 2d       	mov	r27, r12
        * XOR all tapped bits to a single feedback bit. */
        uint8_t Feedback = 0;

        Feedback ^= State[0] & (uint8_t) (PRNG_MASK >> 0);
        Feedback ^= State[1] & (uint8_t) (PRNG_MASK >> 8);
        Feedback ^= State[2] & (uint8_t) (PRNG_MASK >> 16);
    32c8:	2b 2f       	mov	r18, r27
    32ca:	2d 72       	andi	r18, 0x2D	; 45
        Feedback ^= State[3] & (uint8_t) (PRNG_MASK >> 24);

        Feedback ^= Feedback >> 4;
    32cc:	32 2f       	mov	r19, r18
    32ce:	32 95       	swap	r19
    32d0:	3f 70       	andi	r19, 0x0F	; 15
    32d2:	32 27       	eor	r19, r18
        Feedback ^= Feedback >> 2;
    32d4:	23 2f       	mov	r18, r19
    32d6:	26 95       	lsr	r18
    32d8:	26 95       	lsr	r18
    32da:	23 27       	eor	r18, r19
        Feedback ^= Feedback >> 1;
    32dc:	32 2f       	mov	r19, r18
    32de:	36 95       	lsr	r19
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
        Temp |= (uint32_t) State[1] << 8;
        Temp |= (uint32_t) State[2] << 16;
        Temp |= (uint32_t) State[3] << 24;
    32e0:	40 2f       	mov	r20, r16
    32e2:	50 e0       	ldi	r21, 0x00	; 0
    32e4:	60 e0       	ldi	r22, 0x00	; 0
    32e6:	70 e0       	ldi	r23, 0x00	; 0
    32e8:	74 2f       	mov	r23, r20
    32ea:	66 27       	eor	r22, r22
    32ec:	55 27       	eor	r21, r21
    32ee:	44 27       	eor	r20, r20

        /* For ease of processing convert the state into a 32 bit integer first */
        uint32_t Temp = 0;

        Temp |= (uint32_t) State[0] << 0;
        Temp |= (uint32_t) State[1] << 8;
    32f0:	58 29       	or	r21, r8
        Temp |= (uint32_t) State[2] << 16;
    32f2:	4a 2b       	or	r20, r26
        Temp |= (uint32_t) State[3] << 24;
    32f4:	6b 2b       	or	r22, r27

        /* Cycle LFSR and feed back. */
        Temp >>= 1;
    32f6:	76 95       	lsr	r23
    32f8:	67 95       	ror	r22
    32fa:	57 95       	ror	r21
    32fc:	47 95       	ror	r20
        Feedback ^= State[2] & (uint8_t) (PRNG_MASK >> 16);
        Feedback ^= State[3] & (uint8_t) (PRNG_MASK >> 24);

        Feedback ^= Feedback >> 4;
        Feedback ^= Feedback >> 2;
        Feedback ^= Feedback >> 1;
    32fe:	32 27       	eor	r19, r18
        Temp |= (uint32_t) State[3] << 24;

        /* Cycle LFSR and feed back. */
        Temp >>= 1;

        if (Feedback & 0x01) {
    3300:	30 fd       	sbrc	r19, 0
            Temp |= (uint32_t) 1 << (8 * PRNG_SIZE - 1);
    3302:	70 68       	ori	r23, 0x80	; 128
        }

        /* Store back state */
        State[0] = (uint8_t) (Temp >> 0);
        State[1] = (uint8_t) (Temp >> 8);
    3304:	85 2e       	mov	r8, r21
    3306:	96 2e       	mov	r9, r22
    3308:	a7 2e       	mov	r10, r23
    330a:	bb 24       	eor	r11, r11
        State[2] = (uint8_t) (Temp >> 16);
    330c:	6b 01       	movw	r12, r22
    330e:	ee 24       	eor	r14, r14
    3310:	ff 24       	eor	r15, r15
        State[3] = (uint8_t) (Temp >> 24);
    3312:	07 2f       	mov	r16, r23
    3314:	11 27       	eor	r17, r17
    3316:	22 27       	eor	r18, r18
    3318:	33 27       	eor	r19, r19
    return KeyStream;
}

void Crypto1PRNG(uint8_t State[4], uint16_t ClockCount)
{
    while(ClockCount--) {
    331a:	01 97       	sbiw	r24, 0x01	; 1
    331c:	98 f6       	brcc	.-90     	; 0x32c4 <Crypto1PRNG+0x28>
    331e:	40 83       	st	Z, r20
    3320:	81 82       	std	Z+1, r8	; 0x01
    3322:	c2 82       	std	Z+2, r12	; 0x02
    3324:	03 83       	std	Z+3, r16	; 0x03
        State[2] = (uint8_t) (Temp >> 16);
        State[3] = (uint8_t) (Temp >> 24);
    }


}
    3326:	1f 91       	pop	r17
    3328:	0f 91       	pop	r16
    332a:	ff 90       	pop	r15
    332c:	ef 90       	pop	r14
    332e:	df 90       	pop	r13
    3330:	cf 90       	pop	r12
    3332:	bf 90       	pop	r11
    3334:	af 90       	pop	r10
    3336:	9f 90       	pop	r9
    3338:	8f 90       	pop	r8
    333a:	08 95       	ret

0000333c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    333c:	0f 93       	push	r16
    333e:	1f 93       	push	r17
    3340:	cf 93       	push	r28
    3342:	df 93       	push	r29
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	ea 97       	sbiw	r28, 0x3a	; 58
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	05 e1       	ldi	r16, 0x15	; 21
    3350:	13 e2       	ldi	r17, 0x23	; 35
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    3352:	f7 d2       	rcall	.+1518   	; 0x3942 <Endpoint_Read_8>
    3354:	f8 01       	movw	r30, r16
    3356:	81 93       	st	Z+, r24
    3358:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    335a:	f3 e2       	ldi	r31, 0x23	; 35
    335c:	0d 31       	cpi	r16, 0x1D	; 29
    335e:	1f 07       	cpc	r17, r31
    3360:	c1 f7       	brne	.-16     	; 0x3352 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    3362:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    3366:	6b d3       	rcall	.+1750   	; 0x3a3e <Endpoint_IsSETUPReceived>
    3368:	88 23       	and	r24, r24
    336a:	49 f0       	breq	.+18     	; 0x337e <USB_Device_ProcessControlRequest+0x42>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    336c:	30 91 15 23 	lds	r19, 0x2315

		switch (USB_ControlRequest.bRequest)
    3370:	20 91 16 23 	lds	r18, 0x2316
    3374:	82 2f       	mov	r24, r18
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	8a 30       	cpi	r24, 0x0A	; 10
    337a:	91 05       	cpc	r25, r1
    337c:	68 f0       	brcs	.+26     	; 0x3398 <USB_Device_ProcessControlRequest+0x5c>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    337e:	5f d3       	rcall	.+1726   	; 0x3a3e <Endpoint_IsSETUPReceived>
    3380:	88 23       	and	r24, r24
    3382:	11 f0       	breq	.+4      	; 0x3388 <USB_Device_ProcessControlRequest+0x4c>
	{
		Endpoint_ClearSETUP();
    3384:	75 d3       	rcall	.+1770   	; 0x3a70 <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    3386:	a0 d3       	rcall	.+1856   	; 0x3ac8 <Endpoint_StallTransaction>
	}
}
    3388:	ea 96       	adiw	r28, 0x3a	; 58
    338a:	cd bf       	out	0x3d, r28	; 61
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	df 91       	pop	r29
    3390:	cf 91       	pop	r28
    3392:	1f 91       	pop	r17
    3394:	0f 91       	pop	r16
    3396:	08 95       	ret

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
    3398:	fc 01       	movw	r30, r24
    339a:	e4 5e       	subi	r30, 0xE4	; 228
    339c:	fe 4f       	sbci	r31, 0xFE	; 254
    339e:	de c7       	rjmp	.+4028   	; 0x435c <__tablejump2__>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    33a0:	31 11       	cpse	r19, r1
    33a2:	ed cf       	rjmp	.-38     	; 0x337e <USB_Device_ProcessControlRequest+0x42>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    33a4:	80 91 17 23 	lds	r24, 0x2317
    33a8:	82 30       	cpi	r24, 0x02	; 2
    33aa:	48 f7       	brcc	.-46     	; 0x337e <USB_Device_ProcessControlRequest+0x42>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    33ac:	61 d3       	rcall	.+1730   	; 0x3a70 <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    33ae:	80 91 17 23 	lds	r24, 0x2317
    33b2:	80 93 10 23 	sts	0x2310, r24

	Endpoint_ClearStatusStage();
    33b6:	93 d4       	rcall	.+2342   	; 0x3cde <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    33b8:	80 91 10 23 	lds	r24, 0x2310
    33bc:	88 23       	and	r24, r24
    33be:	09 f4       	brne	.+2      	; 0x33c2 <USB_Device_ProcessControlRequest+0x86>
    33c0:	d1 c0       	rjmp	.+418    	; 0x3564 <USB_Device_ProcessControlRequest+0x228>
	  USB_DeviceState = DEVICE_STATE_Configured;
    33c2:	84 e0       	ldi	r24, 0x04	; 4
    33c4:	80 93 14 23 	sts	0x2314, r24
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;

	EVENT_USB_Device_ConfigurationChanged();
    33c8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <EVENT_USB_Device_ConfigurationChanged>
    33cc:	d8 cf       	rjmp	.-80     	; 0x337e <USB_Device_ProcessControlRequest+0x42>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    33ce:	30 38       	cpi	r19, 0x80	; 128
    33d0:	b1 f6       	brne	.-84     	; 0x337e <USB_Device_ProcessControlRequest+0x42>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    33d2:	4e d3       	rcall	.+1692   	; 0x3a70 <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    33d4:	80 91 10 23 	lds	r24, 0x2310
    33d8:	c4 d2       	rcall	.+1416   	; 0x3962 <Endpoint_Write_8>
	Endpoint_ClearIN();
    33da:	8b d2       	rcall	.+1302   	; 0x38f2 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    33dc:	80 d4       	rcall	.+2304   	; 0x3cde <Endpoint_ClearStatusStage>
    33de:	cf cf       	rjmp	.-98     	; 0x337e <USB_Device_ProcessControlRequest+0x42>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    33e0:	30 58       	subi	r19, 0x80	; 128
    33e2:	32 30       	cpi	r19, 0x02	; 2
    33e4:	60 f6       	brcc	.-104    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    33e6:	80 91 17 23 	lds	r24, 0x2317
    33ea:	90 91 18 23 	lds	r25, 0x2318
    33ee:	8c 3d       	cpi	r24, 0xDC	; 220
    33f0:	e3 e0       	ldi	r30, 0x03	; 3
    33f2:	9e 07       	cpc	r25, r30
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <USB_Device_ProcessControlRequest+0xbc>
    33f6:	88 c0       	rjmp	.+272    	; 0x3508 <USB_Device_ProcessControlRequest+0x1cc>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    33f8:	ae 01       	movw	r20, r28
    33fa:	4f 5f       	subi	r20, 0xFF	; 255
    33fc:	5f 4f       	sbci	r21, 0xFF	; 255
    33fe:	60 91 19 23 	lds	r22, 0x2319
    3402:	0e 94 b0 03 	call	0x760	; 0x760 <CALLBACK_USB_GetDescriptor>
    3406:	8c 01       	movw	r16, r24
    3408:	00 97       	sbiw	r24, 0x00	; 0
    340a:	09 f4       	brne	.+2      	; 0x340e <USB_Device_ProcessControlRequest+0xd2>
    340c:	b8 cf       	rjmp	.-144    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    340e:	30 d3       	rcall	.+1632   	; 0x3a70 <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    3410:	b8 01       	movw	r22, r16
    3412:	89 81       	ldd	r24, Y+1	; 0x01
    3414:	9a 81       	ldd	r25, Y+2	; 0x02
    3416:	c1 d1       	rcall	.+898    	; 0x379a <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    3418:	85 d2       	rcall	.+1290   	; 0x3924 <Endpoint_ClearOUT>
    341a:	b1 cf       	rjmp	.-158    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    341c:	31 11       	cpse	r19, r1
    341e:	af cf       	rjmp	.-162    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    3420:	10 91 17 23 	lds	r17, 0x2317
    3424:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    3426:	24 d3       	rcall	.+1608   	; 0x3a70 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    3428:	5a d4       	rcall	.+2228   	; 0x3cde <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    342a:	e4 d2       	rcall	.+1480   	; 0x39f4 <Endpoint_IsINReady>
    342c:	88 23       	and	r24, r24
    342e:	e9 f3       	breq	.-6      	; 0x342a <USB_Device_ProcessControlRequest+0xee>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    3430:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3434:	11 11       	cpse	r17, r1
    3436:	66 c0       	rjmp	.+204    	; 0x3504 <USB_Device_ProcessControlRequest+0x1c8>
    3438:	82 e0       	ldi	r24, 0x02	; 2
    343a:	80 93 14 23 	sts	0x2314, r24
    343e:	9f cf       	rjmp	.-194    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    3440:	33 23       	and	r19, r19
    3442:	09 f4       	brne	.+2      	; 0x3446 <USB_Device_ProcessControlRequest+0x10a>
    3444:	4b c0       	rjmp	.+150    	; 0x34dc <USB_Device_ProcessControlRequest+0x1a0>
    3446:	32 30       	cpi	r19, 0x02	; 2
    3448:	09 f0       	breq	.+2      	; 0x344c <USB_Device_ProcessControlRequest+0x110>
    344a:	99 cf       	rjmp	.-206    	; 0x337e <USB_Device_ProcessControlRequest+0x42>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    344c:	80 91 17 23 	lds	r24, 0x2317
    3450:	81 11       	cpse	r24, r1
    3452:	24 c0       	rjmp	.+72     	; 0x349c <USB_Device_ProcessControlRequest+0x160>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    3454:	10 91 19 23 	lds	r17, 0x2319
    3458:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    345a:	09 f4       	brne	.+2      	; 0x345e <USB_Device_ProcessControlRequest+0x122>
    345c:	90 cf       	rjmp	.-224    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    345e:	81 2f       	mov	r24, r17
    3460:	90 d2       	rcall	.+1312   	; 0x3982 <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    3462:	80 91 16 23 	lds	r24, 0x2316
    3466:	83 30       	cpi	r24, 0x03	; 3
    3468:	09 f4       	brne	.+2      	; 0x346c <USB_Device_ProcessControlRequest+0x130>
    346a:	86 c0       	rjmp	.+268    	; 0x3578 <USB_Device_ProcessControlRequest+0x23c>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    346c:	a0 91 1f 23 	lds	r26, 0x231F
    3470:	b0 91 20 23 	lds	r27, 0x2320
    3474:	11 96       	adiw	r26, 0x01	; 1
    3476:	8c 91       	ld	r24, X
    3478:	11 97       	sbiw	r26, 0x01	; 1
    347a:	8b 7f       	andi	r24, 0xFB	; 251
    347c:	11 96       	adiw	r26, 0x01	; 1
    347e:	8c 93       	st	X, r24
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    3480:	24 e8       	ldi	r18, 0x84	; 132
    3482:	12 9f       	mul	r17, r18
    3484:	f0 01       	movw	r30, r0
    3486:	11 24       	eor	r1, r1
    3488:	ed 59       	subi	r30, 0x9D	; 157
    348a:	fc 4d       	sbci	r31, 0xDC	; 220
    348c:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    348e:	e0 91 1f 23 	lds	r30, 0x231F
    3492:	f0 91 20 23 	lds	r31, 0x2320
    3496:	80 81       	ld	r24, Z
    3498:	8e 7f       	andi	r24, 0xFE	; 254
    349a:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	71 d2       	rcall	.+1250   	; 0x3982 <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    34a0:	e7 d2       	rcall	.+1486   	; 0x3a70 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    34a2:	1d d4       	rcall	.+2106   	; 0x3cde <Endpoint_ClearStatusStage>
    34a4:	6c cf       	rjmp	.-296    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    34a6:	30 38       	cpi	r19, 0x80	; 128
    34a8:	29 f1       	breq	.+74     	; 0x34f4 <USB_Device_ProcessControlRequest+0x1b8>
    34aa:	32 38       	cpi	r19, 0x82	; 130
    34ac:	09 f0       	breq	.+2      	; 0x34b0 <USB_Device_ProcessControlRequest+0x174>
    34ae:	67 cf       	rjmp	.-306    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    34b0:	80 91 19 23 	lds	r24, 0x2319
    34b4:	8f 70       	andi	r24, 0x0F	; 15
    34b6:	65 d2       	rcall	.+1226   	; 0x3982 <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    34b8:	e0 91 1f 23 	lds	r30, 0x231F
    34bc:	f0 91 20 23 	lds	r31, 0x2320
    34c0:	11 81       	ldd	r17, Z+1	; 0x01
    34c2:	12 fb       	bst	r17, 2
    34c4:	11 27       	eor	r17, r17
    34c6:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	5b d2       	rcall	.+1206   	; 0x3982 <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    34cc:	d1 d2       	rcall	.+1442   	; 0x3a70 <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    34ce:	81 2f       	mov	r24, r17
    34d0:	48 d2       	rcall	.+1168   	; 0x3962 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	46 d2       	rcall	.+1164   	; 0x3962 <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    34d6:	0d d2       	rcall	.+1050   	; 0x38f2 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    34d8:	02 d4       	rcall	.+2052   	; 0x3cde <Endpoint_ClearStatusStage>
    34da:	51 cf       	rjmp	.-350    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    34dc:	80 91 17 23 	lds	r24, 0x2317
    34e0:	81 30       	cpi	r24, 0x01	; 1
    34e2:	09 f0       	breq	.+2      	; 0x34e6 <USB_Device_ProcessControlRequest+0x1aa>
    34e4:	4c cf       	rjmp	.-360    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	23 30       	cpi	r18, 0x03	; 3
    34ea:	09 f0       	breq	.+2      	; 0x34ee <USB_Device_ProcessControlRequest+0x1b2>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	80 93 12 23 	sts	0x2312, r24
    34f2:	d4 cf       	rjmp	.-88     	; 0x349c <USB_Device_ProcessControlRequest+0x160>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    34f4:	10 91 11 23 	lds	r17, 0x2311
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    34f8:	80 91 12 23 	lds	r24, 0x2312
    34fc:	88 23       	and	r24, r24
    34fe:	31 f3       	breq	.-52     	; 0x34cc <USB_Device_ProcessControlRequest+0x190>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    3500:	12 60       	ori	r17, 0x02	; 2
    3502:	e4 cf       	rjmp	.-56     	; 0x34cc <USB_Device_ProcessControlRequest+0x190>

	while (!(Endpoint_IsINReady()));

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    3504:	83 e0       	ldi	r24, 0x03	; 3
    3506:	99 cf       	rjmp	.-206    	; 0x343a <USB_Device_ProcessControlRequest+0xfe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    3508:	83 e0       	ldi	r24, 0x03	; 3
    350a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    350c:	8a e3       	ldi	r24, 0x3A	; 58
    350e:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    3510:	5f b7       	in	r21, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    3512:	f8 94       	cli
				#endif

				GCC_MEMORY_BARRIER();
    3514:	de 01       	movw	r26, r28
    3516:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3518:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    351a:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    351c:	42 e0       	ldi	r20, 0x02	; 2
    351e:	07 c0       	rjmp	.+14     	; 0x352e <USB_Device_ProcessControlRequest+0x1f2>
						SigReadAddress++;
					}

					SerialByte &= 0x0F;

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	c7 96       	adiw	r24, 0x37	; 55
    3524:	8d 93       	st	X+, r24
    3526:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    3528:	2f 5f       	subi	r18, 0xFF	; 255
    352a:	2c 31       	cpi	r18, 0x1C	; 28
    352c:	91 f0       	breq	.+36     	; 0x3552 <USB_Device_ProcessControlRequest+0x216>
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    352e:	40 93 ca 01 	sts	0x01CA, r20
					SerialByte = pgm_read_byte(SigReadAddress);
    3532:	e3 2f       	mov	r30, r19
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	84 91       	lpm	r24, Z+
					NVM.CMD    = 0;
    3538:	10 92 ca 01 	sts	0x01CA, r1

					if (SerialCharNum & 0x01)
    353c:	20 ff       	sbrs	r18, 0
    353e:	03 c0       	rjmp	.+6      	; 0x3546 <USB_Device_ProcessControlRequest+0x20a>
					{
						SerialByte >>= 4;
    3540:	82 95       	swap	r24
    3542:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    3544:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    3546:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    3548:	8a 30       	cpi	r24, 0x0A	; 10
    354a:	50 f7       	brcc	.-44     	; 0x3520 <USB_Device_ProcessControlRequest+0x1e4>
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	c0 96       	adiw	r24, 0x30	; 48
    3550:	e9 cf       	rjmp	.-46     	; 0x3524 <USB_Device_ProcessControlRequest+0x1e8>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    3552:	5f bf       	out	0x3f, r21	; 63

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
    3554:	8d d2       	rcall	.+1306   	; 0x3a70 <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    3556:	6a e3       	ldi	r22, 0x3A	; 58
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	ce 01       	movw	r24, r28
    355c:	01 96       	adiw	r24, 0x01	; 1
    355e:	88 d0       	rcall	.+272    	; 0x3670 <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    3560:	e1 d1       	rcall	.+962    	; 0x3924 <Endpoint_ClearOUT>
    3562:	0d cf       	rjmp	.-486    	; 0x337e <USB_Device_ProcessControlRequest+0x42>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    3564:	80 91 c3 04 	lds	r24, 0x04C3
	Endpoint_ClearStatusStage();

	if (USB_Device_ConfigurationNumber)
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    3568:	88 23       	and	r24, r24
    356a:	21 f0       	breq	.+8      	; 0x3574 <USB_Device_ProcessControlRequest+0x238>
    356c:	84 e0       	ldi	r24, 0x04	; 4
    356e:	80 93 14 23 	sts	0x2314, r24
    3572:	2a cf       	rjmp	.-428    	; 0x33c8 <USB_Device_ProcessControlRequest+0x8c>
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	fb cf       	rjmp	.-10     	; 0x356e <USB_Device_ProcessControlRequest+0x232>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
					{
						Endpoint_StallTransaction();
    3578:	a7 d2       	rcall	.+1358   	; 0x3ac8 <Endpoint_StallTransaction>
    357a:	90 cf       	rjmp	.-224    	; 0x349c <USB_Device_ProcessControlRequest+0x160>

0000357c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    357c:	08 95       	ret

0000357e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    357e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    3580:	80 91 14 23 	lds	r24, 0x2314
    3584:	81 11       	cpse	r24, r1
    3586:	02 c0       	rjmp	.+4      	; 0x358c <USB_USBTask+0xe>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    3588:	cf 91       	pop	r28
    358a:	08 95       	ret
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    358c:	c0 91 21 23 	lds	r28, 0x2321
	if (USB_DeviceState == DEVICE_STATE_Unattached)
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	f7 d1       	rcall	.+1006   	; 0x3982 <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    3594:	54 d2       	rcall	.+1192   	; 0x3a3e <Endpoint_IsSETUPReceived>
    3596:	81 11       	cpse	r24, r1
    3598:	03 c0       	rjmp	.+6      	; 0x35a0 <USB_USBTask+0x22>
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    359a:	8c 2f       	mov	r24, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    359c:	cf 91       	pop	r28
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    359e:	f1 c1       	rjmp	.+994    	; 0x3982 <Endpoint_SelectEndpoint>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    35a0:	cd de       	rcall	.-614    	; 0x333c <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    35a2:	8c 2f       	mov	r24, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    35a4:	cf 91       	pop	r28
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();

	Endpoint_SelectEndpoint(PrevEndpoint);
    35a6:	ed c1       	rjmp	.+986    	; 0x3982 <Endpoint_SelectEndpoint>

000035a8 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    35a8:	cf 92       	push	r12
    35aa:	df 92       	push	r13
    35ac:	ef 92       	push	r14
    35ae:	ff 92       	push	r15
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	cf 93       	push	r28
    35b6:	df 93       	push	r29
    35b8:	8c 01       	movw	r16, r24
    35ba:	eb 01       	movw	r28, r22
    35bc:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    35be:	a5 d3       	rcall	.+1866   	; 0x3d0a <Endpoint_WaitUntilReady>
    35c0:	81 11       	cpse	r24, r1
    35c2:	25 c0       	rjmp	.+74     	; 0x360e <Endpoint_Write_Stream_LE+0x66>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    35c4:	e1 14       	cp	r14, r1
    35c6:	f1 04       	cpc	r15, r1
    35c8:	81 f1       	breq	.+96     	; 0x362a <Endpoint_Write_Stream_LE+0x82>
	{
		Length -= *BytesProcessed;
    35ca:	f7 01       	movw	r30, r14
    35cc:	80 81       	ld	r24, Z
    35ce:	91 81       	ldd	r25, Z+1	; 0x01
    35d0:	c8 1b       	sub	r28, r24
    35d2:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    35d4:	08 0f       	add	r16, r24
    35d6:	19 1f       	adc	r17, r25
	}

	while (Length)
    35d8:	20 97       	sbiw	r28, 0x00	; 0
    35da:	09 f4       	brne	.+2      	; 0x35de <Endpoint_Write_Stream_LE+0x36>
    35dc:	3b c0       	rjmp	.+118    	; 0x3654 <Endpoint_Write_Stream_LE+0xac>
    35de:	c1 2c       	mov	r12, r1
    35e0:	d1 2c       	mov	r13, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    35e2:	20 91 1d 23 	lds	r18, 0x231D
    35e6:	30 91 1e 23 	lds	r19, 0x231E
    35ea:	f9 01       	movw	r30, r18
    35ec:	ef 5b       	subi	r30, 0xBF	; 191
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	90 81       	ld	r25, Z
    35f2:	31 97       	sbiw	r30, 0x01	; 1
    35f4:	80 81       	ld	r24, Z
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    35f6:	98 17       	cp	r25, r24
    35f8:	78 f1       	brcs	.+94     	; 0x3658 <Endpoint_Write_Stream_LE+0xb0>
		{
			TEMPLATE_CLEAR_ENDPOINT();
    35fa:	7b d1       	rcall	.+758    	; 0x38f2 <Endpoint_ClearIN>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    35fc:	c0 df       	rcall	.-128    	; 0x357e <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
			{
				*BytesProcessed += BytesInTransfer;
    35fe:	f7 01       	movw	r30, r14
    3600:	80 81       	ld	r24, Z
    3602:	91 81       	ldd	r25, Z+1	; 0x01
    3604:	8c 0d       	add	r24, r12
    3606:	9d 1d       	adc	r25, r13
    3608:	80 83       	st	Z, r24
    360a:	91 83       	std	Z+1, r25	; 0x01
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    360c:	85 e0       	ldi	r24, 0x05	; 5
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    360e:	df 91       	pop	r29
    3610:	cf 91       	pop	r28
    3612:	1f 91       	pop	r17
    3614:	0f 91       	pop	r16
    3616:	ff 90       	pop	r15
    3618:	ef 90       	pop	r14
    361a:	df 90       	pop	r13
    361c:	cf 90       	pop	r12
    361e:	08 95       	ret

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
		{
			TEMPLATE_CLEAR_ENDPOINT();
    3620:	68 d1       	rcall	.+720    	; 0x38f2 <Endpoint_ClearIN>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    3622:	ad df       	rcall	.-166    	; 0x357e <USB_USBTask>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    3624:	72 d3       	rcall	.+1764   	; 0x3d0a <Endpoint_WaitUntilReady>
    3626:	81 11       	cpse	r24, r1
    3628:	f2 cf       	rjmp	.-28     	; 0x360e <Endpoint_Write_Stream_LE+0x66>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    362a:	20 97       	sbiw	r28, 0x00	; 0
    362c:	99 f0       	breq	.+38     	; 0x3654 <Endpoint_Write_Stream_LE+0xac>
    362e:	20 91 1d 23 	lds	r18, 0x231D
    3632:	30 91 1e 23 	lds	r19, 0x231E
    3636:	f9 01       	movw	r30, r18
    3638:	ef 5b       	subi	r30, 0xBF	; 191
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	90 81       	ld	r25, Z
    363e:	31 97       	sbiw	r30, 0x01	; 1
    3640:	80 81       	ld	r24, Z
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    3642:	98 17       	cp	r25, r24
    3644:	68 f7       	brcc	.-38     	; 0x3620 <Endpoint_Write_Stream_LE+0x78>
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3646:	f8 01       	movw	r30, r16
    3648:	81 91       	ld	r24, Z+
    364a:	8f 01       	movw	r16, r30
    364c:	8a d1       	rcall	.+788    	; 0x3962 <Endpoint_Write_8>
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    364e:	21 97       	sbiw	r28, 0x01	; 1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3650:	20 97       	sbiw	r28, 0x00	; 0
    3652:	69 f7       	brne	.-38     	; 0x362e <Endpoint_Write_Stream_LE+0x86>
			Length--;
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	db cf       	rjmp	.-74     	; 0x360e <Endpoint_Write_Stream_LE+0x66>
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    3658:	f8 01       	movw	r30, r16
    365a:	81 91       	ld	r24, Z+
    365c:	8f 01       	movw	r16, r30
    365e:	81 d1       	rcall	.+770    	; 0x3962 <Endpoint_Write_8>
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
			BytesInTransfer++;
    3660:	ff ef       	ldi	r31, 0xFF	; 255
    3662:	cf 1a       	sub	r12, r31
    3664:	df 0a       	sbc	r13, r31
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    3666:	cc 15       	cp	r28, r12
    3668:	dd 05       	cpc	r29, r13
    366a:	09 f0       	breq	.+2      	; 0x366e <Endpoint_Write_Stream_LE+0xc6>
    366c:	ba cf       	rjmp	.-140    	; 0x35e2 <Endpoint_Write_Stream_LE+0x3a>
    366e:	f2 cf       	rjmp	.-28     	; 0x3654 <Endpoint_Write_Stream_LE+0xac>

00003670 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    3670:	cf 92       	push	r12
    3672:	df 92       	push	r13
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	cf 93       	push	r28
    367e:	df 93       	push	r29
    3680:	6c 01       	movw	r12, r24
    3682:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    3684:	80 91 21 23 	lds	r24, 0x2321
    3688:	80 68       	ori	r24, 0x80	; 128
    368a:	7b d1       	rcall	.+758    	; 0x3982 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    368c:	c0 91 1b 23 	lds	r28, 0x231B
    3690:	d0 91 1c 23 	lds	r29, 0x231C
    3694:	c0 17       	cp	r28, r16
    3696:	d1 07       	cpc	r29, r17
    3698:	28 f0       	brcs	.+10     	; 0x36a4 <Endpoint_Write_Control_Stream_LE+0x34>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    369a:	01 15       	cp	r16, r1
    369c:	11 05       	cpc	r17, r1
    369e:	09 f4       	brne	.+2      	; 0x36a2 <Endpoint_Write_Control_Stream_LE+0x32>
    36a0:	6f c0       	rjmp	.+222    	; 0x3780 <Endpoint_Write_Control_Stream_LE+0x110>
    36a2:	e8 01       	movw	r28, r16
    36a4:	10 e0       	ldi	r17, 0x00	; 0
    36a6:	20 97       	sbiw	r28, 0x00	; 0
    36a8:	39 f5       	brne	.+78     	; 0x36f8 <Endpoint_Write_Control_Stream_LE+0x88>
    36aa:	11 11       	cpse	r17, r1
    36ac:	0c c0       	rjmp	.+24     	; 0x36c6 <Endpoint_Write_Control_Stream_LE+0x56>
    36ae:	2f c0       	rjmp	.+94     	; 0x370e <Endpoint_Write_Control_Stream_LE+0x9e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    36b0:	85 30       	cpi	r24, 0x05	; 5
    36b2:	91 f1       	breq	.+100    	; 0x3718 <Endpoint_Write_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    36b4:	c4 d1       	rcall	.+904    	; 0x3a3e <Endpoint_IsSETUPReceived>
    36b6:	81 11       	cpse	r24, r1
    36b8:	31 c0       	rjmp	.+98     	; 0x371c <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    36ba:	a8 d1       	rcall	.+848    	; 0x3a0c <Endpoint_IsOUTReceived>
    36bc:	81 11       	cpse	r24, r1
    36be:	27 c0       	rjmp	.+78     	; 0x370e <Endpoint_Write_Control_Stream_LE+0x9e>
		  break;

		if (Endpoint_IsINReady())
    36c0:	99 d1       	rcall	.+818    	; 0x39f4 <Endpoint_IsINReady>
    36c2:	81 11       	cpse	r24, r1
    36c4:	2d c0       	rjmp	.+90     	; 0x3720 <Endpoint_Write_Control_Stream_LE+0xb0>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    36c6:	80 91 14 23 	lds	r24, 0x2314

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    36ca:	81 11       	cpse	r24, r1
    36cc:	f1 cf       	rjmp	.-30     	; 0x36b0 <Endpoint_Write_Control_Stream_LE+0x40>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    36ce:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    36d0:	df 91       	pop	r29
    36d2:	cf 91       	pop	r28
    36d4:	1f 91       	pop	r17
    36d6:	0f 91       	pop	r16
    36d8:	ff 90       	pop	r15
    36da:	ef 90       	pop	r14
    36dc:	df 90       	pop	r13
    36de:	cf 90       	pop	r12
    36e0:	08 95       	ret
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    36e2:	85 30       	cpi	r24, 0x05	; 5
    36e4:	c9 f0       	breq	.+50     	; 0x3718 <Endpoint_Write_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    36e6:	ab d1       	rcall	.+854    	; 0x3a3e <Endpoint_IsSETUPReceived>
    36e8:	81 11       	cpse	r24, r1
    36ea:	18 c0       	rjmp	.+48     	; 0x371c <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    36ec:	8f d1       	rcall	.+798    	; 0x3a0c <Endpoint_IsOUTReceived>
    36ee:	81 11       	cpse	r24, r1
    36f0:	0e c0       	rjmp	.+28     	; 0x370e <Endpoint_Write_Control_Stream_LE+0x9e>
		  break;

		if (Endpoint_IsINReady())
    36f2:	80 d1       	rcall	.+768    	; 0x39f4 <Endpoint_IsINReady>
    36f4:	81 11       	cpse	r24, r1
    36f6:	14 c0       	rjmp	.+40     	; 0x3720 <Endpoint_Write_Control_Stream_LE+0xb0>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    36f8:	80 91 14 23 	lds	r24, 0x2314

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    36fc:	81 11       	cpse	r24, r1
    36fe:	f1 cf       	rjmp	.-30     	; 0x36e2 <Endpoint_Write_Control_Stream_LE+0x72>
    3700:	e6 cf       	rjmp	.-52     	; 0x36ce <Endpoint_Write_Control_Stream_LE+0x5e>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3702:	80 91 14 23 	lds	r24, 0x2314

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3706:	88 23       	and	r24, r24
    3708:	11 f3       	breq	.-60     	; 0x36ce <Endpoint_Write_Control_Stream_LE+0x5e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    370a:	85 30       	cpi	r24, 0x05	; 5
    370c:	29 f0       	breq	.+10     	; 0x3718 <Endpoint_Write_Control_Stream_LE+0xa8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    370e:	7e d1       	rcall	.+764    	; 0x3a0c <Endpoint_IsOUTReceived>
    3710:	88 23       	and	r24, r24
    3712:	b9 f3       	breq	.-18     	; 0x3702 <Endpoint_Write_Control_Stream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	dc cf       	rjmp	.-72     	; 0x36d0 <Endpoint_Write_Control_Stream_LE+0x60>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3718:	83 e0       	ldi	r24, 0x03	; 3
    371a:	da cf       	rjmp	.-76     	; 0x36d0 <Endpoint_Write_Control_Stream_LE+0x60>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	d8 cf       	rjmp	.-80     	; 0x36d0 <Endpoint_Write_Control_Stream_LE+0x60>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    3720:	80 91 21 23 	lds	r24, 0x2321
    3724:	87 fd       	sbrc	r24, 7
    3726:	30 c0       	rjmp	.+96     	; 0x3788 <Endpoint_Write_Control_Stream_LE+0x118>
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    3728:	20 91 1d 23 	lds	r18, 0x231D
    372c:	30 91 1e 23 	lds	r19, 0x231E
    3730:	f9 01       	movw	r30, r18
    3732:	e0 5c       	subi	r30, 0xC0	; 192
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	e0 80       	ld	r14, Z
    3738:	31 96       	adiw	r30, 0x01	; 1
    373a:	80 81       	ld	r24, Z
    373c:	f1 2c       	mov	r15, r1
    373e:	e8 1a       	sub	r14, r24
    3740:	f1 08       	sbc	r15, r1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    3742:	20 97       	sbiw	r28, 0x00	; 0
    3744:	a9 f0       	breq	.+42     	; 0x3770 <Endpoint_Write_Control_Stream_LE+0x100>
    3746:	88 e0       	ldi	r24, 0x08	; 8
    3748:	e8 16       	cp	r14, r24
    374a:	f1 04       	cpc	r15, r1
    374c:	88 f4       	brcc	.+34     	; 0x3770 <Endpoint_Write_Control_Stream_LE+0x100>
    374e:	86 01       	movw	r16, r12
    3750:	04 c0       	rjmp	.+8      	; 0x375a <Endpoint_Write_Control_Stream_LE+0xea>
    3752:	88 e0       	ldi	r24, 0x08	; 8
    3754:	e8 16       	cp	r14, r24
    3756:	f1 04       	cpc	r15, r1
    3758:	59 f0       	breq	.+22     	; 0x3770 <Endpoint_Write_Control_Stream_LE+0x100>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    375a:	f8 01       	movw	r30, r16
    375c:	81 91       	ld	r24, Z+
    375e:	8f 01       	movw	r16, r30
    3760:	00 d1       	rcall	.+512    	; 0x3962 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    3762:	68 01       	movw	r12, r16
				Length--;
    3764:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    3766:	ff ef       	ldi	r31, 0xFF	; 255
    3768:	ef 1a       	sub	r14, r31
    376a:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    376c:	20 97       	sbiw	r28, 0x00	; 0
    376e:	89 f7       	brne	.-30     	; 0x3752 <Endpoint_Write_Control_Stream_LE+0xe2>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    3770:	11 e0       	ldi	r17, 0x01	; 1
    3772:	e8 e0       	ldi	r30, 0x08	; 8
    3774:	ee 16       	cp	r14, r30
    3776:	f1 04       	cpc	r15, r1
    3778:	09 f0       	breq	.+2      	; 0x377c <Endpoint_Write_Control_Stream_LE+0x10c>
    377a:	10 e0       	ldi	r17, 0x00	; 0
			Endpoint_ClearIN();
    377c:	ba d0       	rcall	.+372    	; 0x38f2 <Endpoint_ClearIN>
    377e:	93 cf       	rjmp	.-218    	; 0x36a6 <Endpoint_Write_Control_Stream_LE+0x36>
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();
    3780:	b8 d0       	rcall	.+368    	; 0x38f2 <Endpoint_ClearIN>
    3782:	c0 e0       	ldi	r28, 0x00	; 0
    3784:	d0 e0       	ldi	r29, 0x00	; 0
    3786:	8e cf       	rjmp	.-228    	; 0x36a4 <Endpoint_Write_Control_Stream_LE+0x34>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
				  return USB_Endpoint_SelectedFIFO->Position;
    3788:	e0 91 1d 23 	lds	r30, 0x231D
    378c:	f0 91 1e 23 	lds	r31, 0x231E
    3790:	ef 5b       	subi	r30, 0xBF	; 191
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	e0 80       	ld	r14, Z
    3796:	f1 2c       	mov	r15, r1
    3798:	d4 cf       	rjmp	.-88     	; 0x3742 <Endpoint_Write_Control_Stream_LE+0xd2>

0000379a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    379a:	df 92       	push	r13
    379c:	ef 92       	push	r14
    379e:	ff 92       	push	r15
    37a0:	0f 93       	push	r16
    37a2:	1f 93       	push	r17
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
    37a8:	f8 2e       	mov	r15, r24
    37aa:	e9 2e       	mov	r14, r25
    37ac:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    37ae:	80 91 21 23 	lds	r24, 0x2321
    37b2:	80 68       	ori	r24, 0x80	; 128
    37b4:	e6 d0       	rcall	.+460    	; 0x3982 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    37b6:	c0 91 1b 23 	lds	r28, 0x231B
    37ba:	d0 91 1c 23 	lds	r29, 0x231C
    37be:	c0 17       	cp	r28, r16
    37c0:	d1 07       	cpc	r29, r17
    37c2:	28 f0       	brcs	.+10     	; 0x37ce <Endpoint_Write_Control_PStream_LE+0x34>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    37c4:	01 15       	cp	r16, r1
    37c6:	11 05       	cpc	r17, r1
    37c8:	09 f4       	brne	.+2      	; 0x37cc <Endpoint_Write_Control_PStream_LE+0x32>
    37ca:	86 c0       	rjmp	.+268    	; 0x38d8 <Endpoint_Write_Control_PStream_LE+0x13e>
    37cc:	e8 01       	movw	r28, r16
    37ce:	0f 2d       	mov	r16, r15
    37d0:	1e 2d       	mov	r17, r14
    37d2:	d1 2c       	mov	r13, r1
    37d4:	20 97       	sbiw	r28, 0x00	; 0
    37d6:	39 f5       	brne	.+78     	; 0x3826 <Endpoint_Write_Control_PStream_LE+0x8c>
    37d8:	d1 10       	cpse	r13, r1
    37da:	0d c0       	rjmp	.+26     	; 0x37f6 <Endpoint_Write_Control_PStream_LE+0x5c>
    37dc:	2f c0       	rjmp	.+94     	; 0x383c <Endpoint_Write_Control_PStream_LE+0xa2>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    37de:	85 30       	cpi	r24, 0x05	; 5
    37e0:	09 f4       	brne	.+2      	; 0x37e4 <Endpoint_Write_Control_PStream_LE+0x4a>
    37e2:	38 c0       	rjmp	.+112    	; 0x3854 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    37e4:	2c d1       	rcall	.+600    	; 0x3a3e <Endpoint_IsSETUPReceived>
    37e6:	81 11       	cpse	r24, r1
    37e8:	3e c0       	rjmp	.+124    	; 0x3866 <Endpoint_Write_Control_PStream_LE+0xcc>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    37ea:	10 d1       	rcall	.+544    	; 0x3a0c <Endpoint_IsOUTReceived>
    37ec:	81 11       	cpse	r24, r1
    37ee:	26 c0       	rjmp	.+76     	; 0x383c <Endpoint_Write_Control_PStream_LE+0xa2>
		  break;

		if (Endpoint_IsINReady())
    37f0:	01 d1       	rcall	.+514    	; 0x39f4 <Endpoint_IsINReady>
    37f2:	81 11       	cpse	r24, r1
    37f4:	41 c0       	rjmp	.+130    	; 0x3878 <Endpoint_Write_Control_PStream_LE+0xde>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    37f6:	80 91 14 23 	lds	r24, 0x2314

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    37fa:	81 11       	cpse	r24, r1
    37fc:	f0 cf       	rjmp	.-32     	; 0x37de <Endpoint_Write_Control_PStream_LE+0x44>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    37fe:	82 e0       	ldi	r24, 0x02	; 2
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3800:	df 91       	pop	r29
    3802:	cf 91       	pop	r28
    3804:	1f 91       	pop	r17
    3806:	0f 91       	pop	r16
    3808:	ff 90       	pop	r15
    380a:	ef 90       	pop	r14
    380c:	df 90       	pop	r13
    380e:	08 95       	ret
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3810:	85 30       	cpi	r24, 0x05	; 5
    3812:	01 f1       	breq	.+64     	; 0x3854 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    3814:	14 d1       	rcall	.+552    	; 0x3a3e <Endpoint_IsSETUPReceived>
    3816:	81 11       	cpse	r24, r1
    3818:	26 c0       	rjmp	.+76     	; 0x3866 <Endpoint_Write_Control_PStream_LE+0xcc>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    381a:	f8 d0       	rcall	.+496    	; 0x3a0c <Endpoint_IsOUTReceived>
    381c:	81 11       	cpse	r24, r1
    381e:	0e c0       	rjmp	.+28     	; 0x383c <Endpoint_Write_Control_PStream_LE+0xa2>
		  break;

		if (Endpoint_IsINReady())
    3820:	e9 d0       	rcall	.+466    	; 0x39f4 <Endpoint_IsINReady>
    3822:	81 11       	cpse	r24, r1
    3824:	29 c0       	rjmp	.+82     	; 0x3878 <Endpoint_Write_Control_PStream_LE+0xde>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3826:	80 91 14 23 	lds	r24, 0x2314

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    382a:	81 11       	cpse	r24, r1
    382c:	f1 cf       	rjmp	.-30     	; 0x3810 <Endpoint_Write_Control_PStream_LE+0x76>
    382e:	e7 cf       	rjmp	.-50     	; 0x37fe <Endpoint_Write_Control_PStream_LE+0x64>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3830:	80 91 14 23 	lds	r24, 0x2314

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3834:	88 23       	and	r24, r24
    3836:	19 f3       	breq	.-58     	; 0x37fe <Endpoint_Write_Control_PStream_LE+0x64>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3838:	85 30       	cpi	r24, 0x05	; 5
    383a:	61 f0       	breq	.+24     	; 0x3854 <Endpoint_Write_Control_PStream_LE+0xba>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    383c:	e7 d0       	rcall	.+462    	; 0x3a0c <Endpoint_IsOUTReceived>
    383e:	88 23       	and	r24, r24
    3840:	b9 f3       	breq	.-18     	; 0x3830 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    3842:	80 e0       	ldi	r24, 0x00	; 0
}
    3844:	df 91       	pop	r29
    3846:	cf 91       	pop	r28
    3848:	1f 91       	pop	r17
    384a:	0f 91       	pop	r16
    384c:	ff 90       	pop	r15
    384e:	ef 90       	pop	r14
    3850:	df 90       	pop	r13
    3852:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    3854:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3856:	df 91       	pop	r29
    3858:	cf 91       	pop	r28
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	ff 90       	pop	r15
    3860:	ef 90       	pop	r14
    3862:	df 90       	pop	r13
    3864:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    3866:	81 e0       	ldi	r24, 0x01	; 1
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    3868:	df 91       	pop	r29
    386a:	cf 91       	pop	r28
    386c:	1f 91       	pop	r17
    386e:	0f 91       	pop	r16
    3870:	ff 90       	pop	r15
    3872:	ef 90       	pop	r14
    3874:	df 90       	pop	r13
    3876:	08 95       	ret
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    3878:	80 91 21 23 	lds	r24, 0x2321
    387c:	87 fd       	sbrc	r24, 7
    387e:	30 c0       	rjmp	.+96     	; 0x38e0 <Endpoint_Write_Control_PStream_LE+0x146>
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    3880:	80 91 1d 23 	lds	r24, 0x231D
    3884:	90 91 1e 23 	lds	r25, 0x231E
    3888:	fc 01       	movw	r30, r24
    388a:	e0 5c       	subi	r30, 0xC0	; 192
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	e0 80       	ld	r14, Z
    3890:	31 96       	adiw	r30, 0x01	; 1
    3892:	80 81       	ld	r24, Z
    3894:	f1 2c       	mov	r15, r1
    3896:	e8 1a       	sub	r14, r24
    3898:	f1 08       	sbc	r15, r1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    389a:	20 97       	sbiw	r28, 0x00	; 0
    389c:	a1 f0       	breq	.+40     	; 0x38c6 <Endpoint_Write_Control_PStream_LE+0x12c>
    389e:	88 e0       	ldi	r24, 0x08	; 8
    38a0:	e8 16       	cp	r14, r24
    38a2:	f1 04       	cpc	r15, r1
    38a4:	28 f0       	brcs	.+10     	; 0x38b0 <Endpoint_Write_Control_PStream_LE+0x116>
    38a6:	0f c0       	rjmp	.+30     	; 0x38c6 <Endpoint_Write_Control_PStream_LE+0x12c>
    38a8:	88 e0       	ldi	r24, 0x08	; 8
    38aa:	e8 16       	cp	r14, r24
    38ac:	f1 04       	cpc	r15, r1
    38ae:	59 f0       	breq	.+22     	; 0x38c6 <Endpoint_Write_Control_PStream_LE+0x12c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    38b0:	f8 01       	movw	r30, r16
    38b2:	84 91       	lpm	r24, Z+
    38b4:	56 d0       	rcall	.+172    	; 0x3962 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    38b6:	0f 5f       	subi	r16, 0xFF	; 255
    38b8:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    38ba:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    38bc:	ff ef       	ldi	r31, 0xFF	; 255
    38be:	ef 1a       	sub	r14, r31
    38c0:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    38c2:	20 97       	sbiw	r28, 0x00	; 0
    38c4:	89 f7       	brne	.-30     	; 0x38a8 <Endpoint_Write_Control_PStream_LE+0x10e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    38c6:	dd 24       	eor	r13, r13
    38c8:	d3 94       	inc	r13
    38ca:	e8 e0       	ldi	r30, 0x08	; 8
    38cc:	ee 16       	cp	r14, r30
    38ce:	f1 04       	cpc	r15, r1
    38d0:	09 f0       	breq	.+2      	; 0x38d4 <Endpoint_Write_Control_PStream_LE+0x13a>
    38d2:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    38d4:	0e d0       	rcall	.+28     	; 0x38f2 <Endpoint_ClearIN>
    38d6:	7e cf       	rjmp	.-260    	; 0x37d4 <Endpoint_Write_Control_PStream_LE+0x3a>
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();
    38d8:	0c d0       	rcall	.+24     	; 0x38f2 <Endpoint_ClearIN>
    38da:	c0 e0       	ldi	r28, 0x00	; 0
    38dc:	d0 e0       	ldi	r29, 0x00	; 0
    38de:	77 cf       	rjmp	.-274    	; 0x37ce <Endpoint_Write_Control_PStream_LE+0x34>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
				  return USB_Endpoint_SelectedFIFO->Position;
    38e0:	e0 91 1d 23 	lds	r30, 0x231D
    38e4:	f0 91 1e 23 	lds	r31, 0x231E
    38e8:	ef 5b       	subi	r30, 0xBF	; 191
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	e0 80       	ld	r14, Z
    38ee:	f1 2c       	mov	r15, r1
    38f0:	d4 cf       	rjmp	.-88     	; 0x389a <Endpoint_Write_Control_PStream_LE+0x100>

000038f2 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    38f2:	e0 91 1f 23 	lds	r30, 0x231F
    38f6:	f0 91 20 23 	lds	r31, 0x2320
    38fa:	a0 91 1d 23 	lds	r26, 0x231D
    38fe:	b0 91 1e 23 	lds	r27, 0x231E
    3902:	af 5b       	subi	r26, 0xBF	; 191
    3904:	bf 4f       	sbci	r27, 0xFF	; 255
    3906:	8c 91       	ld	r24, X
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	82 83       	std	Z+2, r24	; 0x02
    390c:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    390e:	80 81       	ld	r24, Z
    3910:	8d 79       	andi	r24, 0x9D	; 157
    3912:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    3914:	e0 91 1d 23 	lds	r30, 0x231D
    3918:	f0 91 1e 23 	lds	r31, 0x231E
    391c:	ef 5b       	subi	r30, 0xBF	; 191
    391e:	ff 4f       	sbci	r31, 0xFF	; 255
    3920:	10 82       	st	Z, r1
    3922:	08 95       	ret

00003924 <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    3924:	e0 91 1f 23 	lds	r30, 0x231F
    3928:	f0 91 20 23 	lds	r31, 0x2320
    392c:	80 81       	ld	r24, Z
    392e:	8d 79       	andi	r24, 0x9D	; 157
    3930:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    3932:	e0 91 1d 23 	lds	r30, 0x231D
    3936:	f0 91 1e 23 	lds	r31, 0x231E
    393a:	ef 5b       	subi	r30, 0xBF	; 191
    393c:	ff 4f       	sbci	r31, 0xFF	; 255
    393e:	10 82       	st	Z, r1
    3940:	08 95       	ret

00003942 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    3942:	80 91 1d 23 	lds	r24, 0x231D
    3946:	90 91 1e 23 	lds	r25, 0x231E
    394a:	fc 01       	movw	r30, r24
    394c:	ef 5b       	subi	r30, 0xBF	; 191
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	20 81       	ld	r18, Z
    3952:	31 e0       	ldi	r19, 0x01	; 1
    3954:	32 0f       	add	r19, r18
    3956:	30 83       	st	Z, r19
    3958:	fc 01       	movw	r30, r24
    395a:	e2 0f       	add	r30, r18
    395c:	f1 1d       	adc	r31, r1
    395e:	80 81       	ld	r24, Z
}
    3960:	08 95       	ret

00003962 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    3962:	20 91 1d 23 	lds	r18, 0x231D
    3966:	30 91 1e 23 	lds	r19, 0x231E
    396a:	f9 01       	movw	r30, r18
    396c:	ef 5b       	subi	r30, 0xBF	; 191
    396e:	ff 4f       	sbci	r31, 0xFF	; 255
    3970:	90 81       	ld	r25, Z
    3972:	41 e0       	ldi	r20, 0x01	; 1
    3974:	49 0f       	add	r20, r25
    3976:	40 83       	st	Z, r20
    3978:	f9 01       	movw	r30, r18
    397a:	e9 0f       	add	r30, r25
    397c:	f1 1d       	adc	r31, r1
    397e:	80 83       	st	Z, r24
    3980:	08 95       	ret

00003982 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    3982:	80 93 21 23 	sts	0x2321, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    3986:	28 2f       	mov	r18, r24
    3988:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    398a:	62 2f       	mov	r22, r18
    398c:	70 e0       	ldi	r23, 0x00	; 0
    398e:	94 e8       	ldi	r25, 0x84	; 132
    3990:	29 9f       	mul	r18, r25
    3992:	90 01       	movw	r18, r0
    3994:	11 24       	eor	r1, r1
    3996:	2e 5d       	subi	r18, 0xDE	; 222
    3998:	3c 4d       	sbci	r19, 0xDC	; 220
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    399a:	40 91 c6 04 	lds	r20, 0x04C6
    399e:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    39a2:	87 fd       	sbrc	r24, 7
    39a4:	12 c0       	rjmp	.+36     	; 0x39ca <Endpoint_SelectEndpoint+0x48>
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    39a6:	20 93 1d 23 	sts	0x231D, r18
    39aa:	30 93 1e 23 	sts	0x231E, r19
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    39ae:	cb 01       	movw	r24, r22
    39b0:	82 95       	swap	r24
    39b2:	92 95       	swap	r25
    39b4:	90 7f       	andi	r25, 0xF0	; 240
    39b6:	98 27       	eor	r25, r24
    39b8:	80 7f       	andi	r24, 0xF0	; 240
    39ba:	98 27       	eor	r25, r24
    39bc:	84 0f       	add	r24, r20
    39be:	95 1f       	adc	r25, r21
    39c0:	80 93 1f 23 	sts	0x231F, r24
    39c4:	90 93 20 23 	sts	0x2320, r25
    39c8:	08 95       	ret
	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;

	if (Address & ENDPOINT_DIR_IN)
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    39ca:	2e 5b       	subi	r18, 0xBE	; 190
    39cc:	3f 4f       	sbci	r19, 0xFF	; 255
    39ce:	20 93 1d 23 	sts	0x231D, r18
    39d2:	30 93 1e 23 	sts	0x231E, r19
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    39d6:	62 95       	swap	r22
    39d8:	72 95       	swap	r23
    39da:	70 7f       	andi	r23, 0xF0	; 240
    39dc:	76 27       	eor	r23, r22
    39de:	60 7f       	andi	r22, 0xF0	; 240
    39e0:	76 27       	eor	r23, r22
    39e2:	68 5f       	subi	r22, 0xF8	; 248
    39e4:	7f 4f       	sbci	r23, 0xFF	; 255
    39e6:	64 0f       	add	r22, r20
    39e8:	75 1f       	adc	r23, r21
    39ea:	60 93 1f 23 	sts	0x231F, r22
    39ee:	70 93 20 23 	sts	0x2320, r23
    39f2:	08 95       	ret

000039f4 <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    39f4:	80 91 21 23 	lds	r24, 0x2321
    39f8:	80 68       	ori	r24, 0x80	; 128
    39fa:	c3 df       	rcall	.-122    	; 0x3982 <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    39fc:	e0 91 1f 23 	lds	r30, 0x231F
    3a00:	f0 91 20 23 	lds	r31, 0x2320
    3a04:	80 81       	ld	r24, Z
}
    3a06:	86 95       	lsr	r24
    3a08:	81 70       	andi	r24, 0x01	; 1
    3a0a:	08 95       	ret

00003a0c <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    3a0c:	80 91 21 23 	lds	r24, 0x2321
    3a10:	8f 77       	andi	r24, 0x7F	; 127
    3a12:	b7 df       	rcall	.-146    	; 0x3982 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    3a14:	e0 91 1f 23 	lds	r30, 0x231F
    3a18:	f0 91 20 23 	lds	r31, 0x2320
    3a1c:	80 81       	ld	r24, Z
    3a1e:	85 ff       	sbrs	r24, 5
    3a20:	0c c0       	rjmp	.+24     	; 0x3a3a <Endpoint_IsOUTReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    3a22:	20 91 1d 23 	lds	r18, 0x231D
    3a26:	30 91 1e 23 	lds	r19, 0x231E
    3a2a:	82 81       	ldd	r24, Z+2	; 0x02
    3a2c:	93 81       	ldd	r25, Z+3	; 0x03
    3a2e:	f9 01       	movw	r30, r18
    3a30:	e0 5c       	subi	r30, 0xC0	; 192
    3a32:	ff 4f       	sbci	r31, 0xFF	; 255
    3a34:	80 83       	st	Z, r24
		return true;
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	08 95       	ret
	}

	return false;
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
}
    3a3c:	08 95       	ret

00003a3e <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    3a3e:	80 91 21 23 	lds	r24, 0x2321
    3a42:	8f 77       	andi	r24, 0x7F	; 127
    3a44:	9e df       	rcall	.-196    	; 0x3982 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    3a46:	e0 91 1f 23 	lds	r30, 0x231F
    3a4a:	f0 91 20 23 	lds	r31, 0x2320
    3a4e:	80 81       	ld	r24, Z
    3a50:	84 ff       	sbrs	r24, 4
    3a52:	0c c0       	rjmp	.+24     	; 0x3a6c <Endpoint_IsSETUPReceived+0x2e>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    3a54:	20 91 1d 23 	lds	r18, 0x231D
    3a58:	30 91 1e 23 	lds	r19, 0x231E
    3a5c:	82 81       	ldd	r24, Z+2	; 0x02
    3a5e:	93 81       	ldd	r25, Z+3	; 0x03
    3a60:	f9 01       	movw	r30, r18
    3a62:	e0 5c       	subi	r30, 0xC0	; 192
    3a64:	ff 4f       	sbci	r31, 0xFF	; 255
    3a66:	80 83       	st	Z, r24
		return true;
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	08 95       	ret
	}

	return false;
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
}
    3a6e:	08 95       	ret

00003a70 <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    3a70:	80 91 21 23 	lds	r24, 0x2321
    3a74:	8f 77       	andi	r24, 0x7F	; 127
    3a76:	85 df       	rcall	.-246    	; 0x3982 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    3a78:	e0 91 1f 23 	lds	r30, 0x231F
    3a7c:	f0 91 20 23 	lds	r31, 0x2320
    3a80:	80 81       	ld	r24, Z
    3a82:	8d 78       	andi	r24, 0x8D	; 141
    3a84:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    3a86:	e0 91 1f 23 	lds	r30, 0x231F
    3a8a:	f0 91 20 23 	lds	r31, 0x2320
    3a8e:	80 81       	ld	r24, Z
    3a90:	81 60       	ori	r24, 0x01	; 1
    3a92:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    3a94:	e0 91 1d 23 	lds	r30, 0x231D
    3a98:	f0 91 1e 23 	lds	r31, 0x231E
    3a9c:	ef 5b       	subi	r30, 0xBF	; 191
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    3aa2:	80 91 21 23 	lds	r24, 0x2321
    3aa6:	80 68       	ori	r24, 0x80	; 128
    3aa8:	6c df       	rcall	.-296    	; 0x3982 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    3aaa:	e0 91 1f 23 	lds	r30, 0x231F
    3aae:	f0 91 20 23 	lds	r31, 0x2320
    3ab2:	80 81       	ld	r24, Z
    3ab4:	81 60       	ori	r24, 0x01	; 1
    3ab6:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    3ab8:	e0 91 1d 23 	lds	r30, 0x231D
    3abc:	f0 91 1e 23 	lds	r31, 0x231E
    3ac0:	ef 5b       	subi	r30, 0xBF	; 191
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	10 82       	st	Z, r1
    3ac6:	08 95       	ret

00003ac8 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    3ac8:	e0 91 1f 23 	lds	r30, 0x231F
    3acc:	f0 91 20 23 	lds	r31, 0x2320
    3ad0:	81 81       	ldd	r24, Z+1	; 0x01
    3ad2:	84 60       	ori	r24, 0x04	; 4
    3ad4:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    3ad6:	e0 91 1f 23 	lds	r30, 0x231F
    3ada:	f0 91 20 23 	lds	r31, 0x2320
    3ade:	81 81       	ldd	r24, Z+1	; 0x01
    3ae0:	80 7c       	andi	r24, 0xC0	; 192
    3ae2:	80 34       	cpi	r24, 0x40	; 64
    3ae4:	09 f0       	breq	.+2      	; 0x3ae8 <Endpoint_StallTransaction+0x20>
    3ae6:	08 95       	ret
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    3ae8:	80 91 21 23 	lds	r24, 0x2321
    3aec:	80 58       	subi	r24, 0x80	; 128
    3aee:	49 df       	rcall	.-366    	; 0x3982 <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    3af0:	e0 91 1f 23 	lds	r30, 0x231F
    3af4:	f0 91 20 23 	lds	r31, 0x2320
    3af8:	81 81       	ldd	r24, Z+1	; 0x01
    3afa:	84 60       	ori	r24, 0x04	; 4
    3afc:	81 83       	std	Z+1, r24	; 0x01
    3afe:	08 95       	ret

00003b00 <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    3b00:	1f 93       	push	r17
    3b02:	cf 93       	push	r28
    3b04:	df 93       	push	r29
    3b06:	00 d0       	rcall	.+0      	; 0x3b08 <Endpoint_ConfigureEndpoint_PRV+0x8>
    3b08:	cd b7       	in	r28, 0x3d	; 61
    3b0a:	de b7       	in	r29, 0x3e	; 62
    3b0c:	18 2f       	mov	r17, r24
	Endpoint_SelectEndpoint(Address);
    3b0e:	4a 83       	std	Y+2, r20	; 0x02
    3b10:	69 83       	std	Y+1, r22	; 0x01
    3b12:	37 df       	rcall	.-402    	; 0x3982 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    3b14:	e0 91 1f 23 	lds	r30, 0x231F
    3b18:	f0 91 20 23 	lds	r31, 0x2320
    3b1c:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    3b1e:	e0 91 1f 23 	lds	r30, 0x231F
    3b22:	f0 91 20 23 	lds	r31, 0x2320
    3b26:	4a 81       	ldd	r20, Y+2	; 0x02
    3b28:	69 81       	ldd	r22, Y+1	; 0x01
    3b2a:	17 fd       	sbrc	r17, 7
    3b2c:	20 c0       	rjmp	.+64     	; 0x3b6e <Endpoint_ConfigureEndpoint_PRV+0x6e>
    3b2e:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    3b30:	e0 91 1f 23 	lds	r30, 0x231F
    3b34:	f0 91 20 23 	lds	r31, 0x2320
    3b38:	61 83       	std	Z+1, r22	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    3b3a:	e0 91 1f 23 	lds	r30, 0x231F
    3b3e:	f0 91 20 23 	lds	r31, 0x2320
    3b42:	12 82       	std	Z+2, r1	; 0x02
    3b44:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    3b46:	80 91 1d 23 	lds	r24, 0x231D
    3b4a:	90 91 1e 23 	lds	r25, 0x231E
    3b4e:	84 83       	std	Z+4, r24	; 0x04
    3b50:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    3b52:	40 e0       	ldi	r20, 0x00	; 0
    3b54:	fc 01       	movw	r30, r24
    3b56:	e0 5c       	subi	r30, 0xC0	; 192
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    3b5c:	31 96       	adiw	r30, 0x01	; 1
    3b5e:	10 82       	st	Z, r1

	return true;
}
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	1f 91       	pop	r17
    3b6c:	08 95       	ret
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    3b6e:	82 e0       	ldi	r24, 0x02	; 2
    3b70:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    3b72:	e0 91 1f 23 	lds	r30, 0x231F
    3b76:	f0 91 20 23 	lds	r31, 0x2320
    3b7a:	61 83       	std	Z+1, r22	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    3b7c:	e0 91 1f 23 	lds	r30, 0x231F
    3b80:	f0 91 20 23 	lds	r31, 0x2320
    3b84:	12 82       	std	Z+2, r1	; 0x02
    3b86:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    3b88:	80 91 1d 23 	lds	r24, 0x231D
    3b8c:	90 91 1e 23 	lds	r25, 0x231E
    3b90:	84 83       	std	Z+4, r24	; 0x04
    3b92:	95 83       	std	Z+5, r25	; 0x05
    3b94:	df cf       	rjmp	.-66     	; 0x3b54 <Endpoint_ConfigureEndpoint_PRV+0x54>

00003b96 <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    3b96:	cf 92       	push	r12
    3b98:	df 92       	push	r13
    3b9a:	ef 92       	push	r14
    3b9c:	ff 92       	push	r15
    3b9e:	0f 93       	push	r16
    3ba0:	1f 93       	push	r17
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
    3ba6:	1f 92       	push	r1
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	f6 2e       	mov	r15, r22
	for (uint8_t i = 0; i < Entries; i++)
    3bae:	66 23       	and	r22, r22
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <Endpoint_ConfigureEndpointTable+0x1e>
    3bb2:	3e c0       	rjmp	.+124    	; 0x3c30 <Endpoint_ConfigureEndpointTable+0x9a>
    3bb4:	6c 01       	movw	r12, r24
    3bb6:	00 e0       	ldi	r16, 0x00	; 0
	{
		if (!(Table[i].Address))
    3bb8:	d6 01       	movw	r26, r12
    3bba:	1c 91       	ld	r17, X
    3bbc:	11 23       	and	r17, r17
    3bbe:	91 f1       	breq	.+100    	; 0x3c24 <Endpoint_ConfigureEndpointTable+0x8e>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    3bc0:	d6 01       	movw	r26, r12
    3bc2:	11 96       	adiw	r26, 0x01	; 1
    3bc4:	ed 91       	ld	r30, X+
    3bc6:	fc 91       	ld	r31, X
    3bc8:	12 97       	sbiw	r26, 0x02	; 2
    3bca:	13 96       	adiw	r26, 0x03	; 3
    3bcc:	8c 91       	ld	r24, X
    3bce:	13 97       	sbiw	r26, 0x03	; 3
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    3bd0:	14 96       	adiw	r26, 0x04	; 4
    3bd2:	9c 91       	ld	r25, X
    3bd4:	92 30       	cpi	r25, 0x02	; 2
    3bd6:	08 f4       	brcc	.+2      	; 0x3bda <Endpoint_ConfigureEndpointTable+0x44>
    3bd8:	45 c0       	rjmp	.+138    	; 0x3c64 <Endpoint_ConfigureEndpointTable+0xce>
    3bda:	98 e1       	ldi	r25, 0x18	; 24
    3bdc:	48 e1       	ldi	r20, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    3bde:	e9 30       	cpi	r30, 0x09	; 9
    3be0:	f1 05       	cpc	r31, r1
    3be2:	50 f0       	brcs	.+20     	; 0x3bf8 <Endpoint_ConfigureEndpointTable+0x62>
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    3be4:	28 e0       	ldi	r18, 0x08	; 8
    3be6:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    3be8:	90 e0       	ldi	r25, 0x00	; 0
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    3bea:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    3bec:	22 0f       	add	r18, r18
    3bee:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    3bf0:	2e 17       	cp	r18, r30
    3bf2:	3f 07       	cpc	r19, r31
    3bf4:	d0 f3       	brcs	.-12     	; 0x3bea <Endpoint_ConfigureEndpointTable+0x54>
    3bf6:	94 2b       	or	r25, r20
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    3bf8:	21 2f       	mov	r18, r17
    3bfa:	2f 70       	andi	r18, 0x0F	; 15
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	26 30       	cpi	r18, 0x06	; 6
    3c00:	31 05       	cpc	r19, r1
    3c02:	9c f5       	brge	.+102    	; 0x3c6a <Endpoint_ConfigureEndpointTable+0xd4>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    3c04:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
    3c06:	e1 34       	cpi	r30, 0x41	; 65
    3c08:	f1 05       	cpc	r31, r1
    3c0a:	78 f5       	brcc	.+94     	; 0x3c6a <Endpoint_ConfigureEndpointTable+0xd4>
				  return false;

				switch (Type)
    3c0c:	88 23       	and	r24, r24
    3c0e:	01 f1       	breq	.+64     	; 0x3c50 <Endpoint_ConfigureEndpointTable+0xba>
    3c10:	81 30       	cpi	r24, 0x01	; 1
    3c12:	c9 f4       	brne	.+50     	; 0x3c46 <Endpoint_ConfigureEndpointTable+0xb0>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    3c14:	90 6c       	ori	r25, 0xC0	; 192
    3c16:	ee 2e       	mov	r14, r30
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    3c18:	4e 2d       	mov	r20, r14
    3c1a:	69 2f       	mov	r22, r25
    3c1c:	81 2f       	mov	r24, r17
    3c1e:	70 df       	rcall	.-288    	; 0x3b00 <Endpoint_ConfigureEndpoint_PRV>
    3c20:	88 23       	and	r24, r24
    3c22:	19 f1       	breq	.+70     	; 0x3c6a <Endpoint_ConfigureEndpointTable+0xd4>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    3c24:	0f 5f       	subi	r16, 0xFF	; 255
    3c26:	b5 e0       	ldi	r27, 0x05	; 5
    3c28:	cb 0e       	add	r12, r27
    3c2a:	d1 1c       	adc	r13, r1
    3c2c:	0f 11       	cpse	r16, r15
    3c2e:	c4 cf       	rjmp	.-120    	; 0x3bb8 <Endpoint_ConfigureEndpointTable+0x22>
		{
			return false;
		}
	}

	return true;
    3c30:	81 e0       	ldi	r24, 0x01	; 1
}
    3c32:	0f 90       	pop	r0
    3c34:	df 91       	pop	r29
    3c36:	cf 91       	pop	r28
    3c38:	1f 91       	pop	r17
    3c3a:	0f 91       	pop	r16
    3c3c:	ff 90       	pop	r15
    3c3e:	ef 90       	pop	r14
    3c40:	df 90       	pop	r13
    3c42:	cf 90       	pop	r12
    3c44:	08 95       	ret
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    3c46:	90 68       	ori	r25, 0x80	; 128
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    3c48:	88 23       	and	r24, r24
    3c4a:	19 f0       	breq	.+6      	; 0x3c52 <Endpoint_ConfigureEndpointTable+0xbc>
    3c4c:	ee 2e       	mov	r14, r30
    3c4e:	e4 cf       	rjmp	.-56     	; 0x3c18 <Endpoint_ConfigureEndpointTable+0x82>
				  return false;

				switch (Type)
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    3c50:	90 64       	ori	r25, 0x40	; 64
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    3c52:	ee 2e       	mov	r14, r30
    3c54:	4e 2f       	mov	r20, r30
    3c56:	69 2f       	mov	r22, r25
    3c58:	80 e8       	ldi	r24, 0x80	; 128
    3c5a:	81 0f       	add	r24, r17
    3c5c:	99 83       	std	Y+1, r25	; 0x01
    3c5e:	50 df       	rcall	.-352    	; 0x3b00 <Endpoint_ConfigureEndpoint_PRV>
    3c60:	99 81       	ldd	r25, Y+1	; 0x01
    3c62:	da cf       	rjmp	.-76     	; 0x3c18 <Endpoint_ConfigureEndpointTable+0x82>
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    3c64:	98 e0       	ldi	r25, 0x08	; 8
    3c66:	48 e0       	ldi	r20, 0x08	; 8
    3c68:	ba cf       	rjmp	.-140    	; 0x3bde <Endpoint_ConfigureEndpointTable+0x48>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	e2 cf       	rjmp	.-60     	; 0x3c32 <Endpoint_ConfigureEndpointTable+0x9c>

00003c6e <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    3c6e:	e0 ec       	ldi	r30, 0xC0	; 192
    3c70:	f4 e0       	ldi	r31, 0x04	; 4
    3c72:	a6 81       	ldd	r26, Z+6	; 0x06
    3c74:	b7 81       	ldd	r27, Z+7	; 0x07
    3c76:	19 96       	adiw	r26, 0x09	; 9
    3c78:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    3c7a:	a6 81       	ldd	r26, Z+6	; 0x06
    3c7c:	b7 81       	ldd	r27, Z+7	; 0x07
    3c7e:	11 96       	adiw	r26, 0x01	; 1
    3c80:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    3c82:	a6 81       	ldd	r26, Z+6	; 0x06
    3c84:	b7 81       	ldd	r27, Z+7	; 0x07
    3c86:	59 96       	adiw	r26, 0x19	; 25
    3c88:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    3c8a:	a6 81       	ldd	r26, Z+6	; 0x06
    3c8c:	b7 81       	ldd	r27, Z+7	; 0x07
    3c8e:	51 96       	adiw	r26, 0x11	; 17
    3c90:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    3c92:	a6 81       	ldd	r26, Z+6	; 0x06
    3c94:	b7 81       	ldd	r27, Z+7	; 0x07
    3c96:	99 96       	adiw	r26, 0x29	; 41
    3c98:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    3c9a:	a6 81       	ldd	r26, Z+6	; 0x06
    3c9c:	b7 81       	ldd	r27, Z+7	; 0x07
    3c9e:	91 96       	adiw	r26, 0x21	; 33
    3ca0:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    3ca2:	a6 81       	ldd	r26, Z+6	; 0x06
    3ca4:	b7 81       	ldd	r27, Z+7	; 0x07
    3ca6:	d9 96       	adiw	r26, 0x39	; 57
    3ca8:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    3caa:	a6 81       	ldd	r26, Z+6	; 0x06
    3cac:	b7 81       	ldd	r27, Z+7	; 0x07
    3cae:	d1 96       	adiw	r26, 0x31	; 49
    3cb0:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    3cb2:	a6 81       	ldd	r26, Z+6	; 0x06
    3cb4:	b7 81       	ldd	r27, Z+7	; 0x07
    3cb6:	a7 5b       	subi	r26, 0xB7	; 183
    3cb8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cba:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    3cbc:	a6 81       	ldd	r26, Z+6	; 0x06
    3cbe:	b7 81       	ldd	r27, Z+7	; 0x07
    3cc0:	af 5b       	subi	r26, 0xBF	; 191
    3cc2:	bf 4f       	sbci	r27, 0xFF	; 255
    3cc4:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    3cc6:	a6 81       	ldd	r26, Z+6	; 0x06
    3cc8:	b7 81       	ldd	r27, Z+7	; 0x07
    3cca:	a7 5a       	subi	r26, 0xA7	; 167
    3ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    3cce:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    3cd0:	06 80       	ldd	r0, Z+6	; 0x06
    3cd2:	f7 81       	ldd	r31, Z+7	; 0x07
    3cd4:	e0 2d       	mov	r30, r0
    3cd6:	ef 5a       	subi	r30, 0xAF	; 175
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	10 82       	st	Z, r1
    3cdc:	08 95       	ret

00003cde <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    3cde:	80 91 15 23 	lds	r24, 0x2315
    3ce2:	87 ff       	sbrs	r24, 7
    3ce4:	05 c0       	rjmp	.+10     	; 0x3cf0 <Endpoint_ClearStatusStage+0x12>
    3ce6:	0c c0       	rjmp	.+24     	; 0x3d00 <Endpoint_ClearStatusStage+0x22>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3ce8:	80 91 14 23 	lds	r24, 0x2314
    3cec:	88 23       	and	r24, r24
    3cee:	61 f0       	breq	.+24     	; 0x3d08 <Endpoint_ClearStatusStage+0x2a>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    3cf0:	81 de       	rcall	.-766    	; 0x39f4 <Endpoint_IsINReady>
    3cf2:	88 23       	and	r24, r24
    3cf4:	c9 f3       	breq	.-14     	; 0x3ce8 <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    3cf6:	fd cd       	rjmp	.-1030   	; 0x38f2 <Endpoint_ClearIN>
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    3cf8:	80 91 14 23 	lds	r24, 0x2314
    3cfc:	88 23       	and	r24, r24
    3cfe:	21 f0       	breq	.+8      	; 0x3d08 <Endpoint_ClearStatusStage+0x2a>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    3d00:	85 de       	rcall	.-758    	; 0x3a0c <Endpoint_IsOUTReceived>
    3d02:	88 23       	and	r24, r24
    3d04:	c9 f3       	breq	.-14     	; 0x3cf8 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    3d06:	0e ce       	rjmp	.-996    	; 0x3924 <Endpoint_ClearOUT>
    3d08:	08 95       	ret

00003d0a <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    3d0a:	1f 93       	push	r17
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    3d10:	e0 91 c6 04 	lds	r30, 0x04C6
    3d14:	f0 91 c7 04 	lds	r31, 0x04C7
    3d18:	e0 5a       	subi	r30, 0xA0	; 160
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	c0 81       	ld	r28, Z
    3d1e:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    3d20:	14 e6       	ldi	r17, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    3d22:	80 91 21 23 	lds	r24, 0x2321
    3d26:	80 78       	andi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    3d28:	80 38       	cpi	r24, 0x80	; 128
    3d2a:	31 f1       	breq	.+76     	; 0x3d78 <Endpoint_WaitUntilReady+0x6e>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    3d2c:	6f de       	rcall	.-802    	; 0x3a0c <Endpoint_IsOUTReceived>
    3d2e:	81 11       	cpse	r24, r1
    3d30:	26 c0       	rjmp	.+76     	; 0x3d7e <Endpoint_WaitUntilReady+0x74>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    3d32:	80 91 14 23 	lds	r24, 0x2314

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    3d36:	88 23       	and	r24, r24
    3d38:	39 f1       	breq	.+78     	; 0x3d88 <Endpoint_WaitUntilReady+0x7e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    3d3a:	85 30       	cpi	r24, 0x05	; 5
    3d3c:	51 f1       	breq	.+84     	; 0x3d92 <Endpoint_WaitUntilReady+0x88>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    3d3e:	e0 91 1f 23 	lds	r30, 0x231F
    3d42:	f0 91 20 23 	lds	r31, 0x2320
    3d46:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    3d48:	82 fd       	sbrc	r24, 2
    3d4a:	28 c0       	rjmp	.+80     	; 0x3d9c <Endpoint_WaitUntilReady+0x92>
    3d4c:	e0 91 c6 04 	lds	r30, 0x04C6
    3d50:	f0 91 c7 04 	lds	r31, 0x04C7
    3d54:	e0 5a       	subi	r30, 0xA0	; 160
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	80 81       	ld	r24, Z
    3d5a:	91 81       	ldd	r25, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    3d5c:	c8 17       	cp	r28, r24
    3d5e:	d9 07       	cpc	r29, r25
    3d60:	01 f3       	breq	.-64     	; 0x3d22 <Endpoint_WaitUntilReady+0x18>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    3d62:	2f ef       	ldi	r18, 0xFF	; 255
    3d64:	21 0f       	add	r18, r17
    3d66:	11 23       	and	r17, r17
    3d68:	f1 f0       	breq	.+60     	; 0x3da6 <Endpoint_WaitUntilReady+0x9c>
    3d6a:	ec 01       	movw	r28, r24
    3d6c:	12 2f       	mov	r17, r18
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    3d6e:	80 91 21 23 	lds	r24, 0x2321
    3d72:	80 78       	andi	r24, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    3d74:	80 38       	cpi	r24, 0x80	; 128
    3d76:	d1 f6       	brne	.-76     	; 0x3d2c <Endpoint_WaitUntilReady+0x22>
		{
			if (Endpoint_IsINReady())
    3d78:	3d de       	rcall	.-902    	; 0x39f4 <Endpoint_IsINReady>
    3d7a:	88 23       	and	r24, r24
    3d7c:	d1 f2       	breq	.-76     	; 0x3d32 <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_NoError;
    3d7e:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	1f 91       	pop	r17
    3d86:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    3d88:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3d8a:	df 91       	pop	r29
    3d8c:	cf 91       	pop	r28
    3d8e:	1f 91       	pop	r17
    3d90:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    3d92:	83 e0       	ldi	r24, 0x03	; 3

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3d94:	df 91       	pop	r29
    3d96:	cf 91       	pop	r28
    3d98:	1f 91       	pop	r17
    3d9a:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    3d9c:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    3d9e:	df 91       	pop	r29
    3da0:	cf 91       	pop	r28
    3da2:	1f 91       	pop	r17
    3da4:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    3da6:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
}
    3da8:	df 91       	pop	r29
    3daa:	cf 91       	pop	r28
    3dac:	1f 91       	pop	r17
    3dae:	08 95       	ret

00003db0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    3db0:	62 d0       	rcall	.+196    	; 0x3e76 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3db2:	68 d0       	rcall	.+208    	; 0x3e84 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				USB.CTRLB &= ~USB_ATTACH_bm;
    3db4:	e0 ec       	ldi	r30, 0xC0	; 192
    3db6:	f4 e0       	ldi	r31, 0x04	; 4
    3db8:	81 81       	ldd	r24, Z+1	; 0x01
    3dba:	8e 7f       	andi	r24, 0xFE	; 254
    3dbc:	81 83       	std	Z+1, r24	; 0x01
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    3dbe:	80 81       	ld	r24, Z
    3dc0:	8f 77       	andi	r24, 0x7F	; 127
    3dc2:	80 83       	st	Z, r24

	USB_Detach();
	USB_Controller_Disable();

	USB_IsInitialized = false;
    3dc4:	10 92 13 23 	sts	0x2313, r1
    3dc8:	08 95       	ret

00003dca <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
	#if defined(USB_DEVICE_OPT_FULLSPEED)
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	else
	  CLK.USBCTRL = (((F_USB / 48000000) - 1) << CLK_USBPSDIV_gp);
    3dce:	e0 e4       	ldi	r30, 0x40	; 64
    3dd0:	f0 e0       	ldi	r31, 0x00	; 0
    3dd2:	14 82       	std	Z+4, r1	; 0x04
	#else
	CLK.USBCTRL = (((F_USB / 6000000) - 1) << CLK_USBPSDIV_gp);
	#endif

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
    3dd4:	84 81       	ldd	r24, Z+4	; 0x04
    3dd6:	81 60       	ori	r24, 0x01	; 1
    3dd8:	84 83       	std	Z+4, r24	; 0x04
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    3dda:	4d d0       	rcall	.+154    	; 0x3e76 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    3ddc:	53 d0       	rcall	.+166    	; 0x3e84 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    3dde:	c0 ec       	ldi	r28, 0xC0	; 192
    3de0:	d4 e0       	ldi	r29, 0x04	; 4
    3de2:	88 81       	ld	r24, Y
    3de4:	8f 77       	andi	r24, 0x7F	; 127
    3de6:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    3de8:	88 81       	ld	r24, Y
    3dea:	80 68       	ori	r24, 0x80	; 128
    3dec:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    3dee:	10 92 14 23 	sts	0x2314, r1
	USB_Device_ConfigurationNumber  = 0;
    3df2:	10 92 10 23 	sts	0x2310, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    3df6:	10 92 12 23 	sts	0x2312, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    3dfa:	10 92 11 23 	sts	0x2311, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    3dfe:	88 81       	ld	r24, Y
    3e00:	80 64       	ori	r24, 0x40	; 64
    3e02:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    3e04:	48 e0       	ldi	r20, 0x08	; 8
    3e06:	68 e4       	ldi	r22, 0x48	; 72
    3e08:	80 e8       	ldi	r24, 0x80	; 128
    3e0a:	7a de       	rcall	.-780    	; 0x3b00 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    3e0c:	48 e0       	ldi	r20, 0x08	; 8
    3e0e:	68 e4       	ldi	r22, 0x48	; 72
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	76 de       	rcall	.-788    	; 0x3b00 <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    3e14:	88 85       	ldd	r24, Y+8	; 0x08
    3e16:	80 64       	ori	r24, 0x40	; 64
    3e18:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	81 60       	ori	r24, 0x01	; 1
    3e1e:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    3e20:	df 91       	pop	r29
    3e22:	cf 91       	pop	r28
    3e24:	08 95       	ret

00003e26 <USB_Init>:
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    3e26:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    3e28:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    3e2a:	82 e0       	ldi	r24, 0x02	; 2
    3e2c:	e0 ec       	ldi	r30, 0xC0	; 192
    3e2e:	f1 e0       	ldi	r31, 0x01	; 1
    3e30:	82 87       	std	Z+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    3e32:	ea e1       	ldi	r30, 0x1A	; 26
    3e34:	f0 e0       	ldi	r31, 0x00	; 0
    3e36:	e4 91       	lpm	r30, Z+
    3e38:	a0 ec       	ldi	r26, 0xC0	; 192
    3e3a:	b4 e0       	ldi	r27, 0x04	; 4
    3e3c:	da 96       	adiw	r26, 0x3a	; 58
    3e3e:	ec 93       	st	X, r30
    3e40:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    3e42:	eb e1       	ldi	r30, 0x1B	; 27
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	e4 91       	lpm	r30, Z+
    3e48:	db 96       	adiw	r26, 0x3b	; 59
    3e4a:	ec 93       	st	X, r30
    3e4c:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    3e4e:	e0 ec       	ldi	r30, 0xC0	; 192
    3e50:	f1 e0       	ldi	r31, 0x01	; 1
    3e52:	12 86       	std	Z+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    3e54:	8b e3       	ldi	r24, 0x3B	; 59
    3e56:	96 e2       	ldi	r25, 0x26	; 38
    3e58:	8e 7f       	andi	r24, 0xFE	; 254
    3e5a:	16 96       	adiw	r26, 0x06	; 6
    3e5c:	8d 93       	st	X+, r24
    3e5e:	9c 93       	st	X, r25
    3e60:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    3e62:	85 e1       	ldi	r24, 0x15	; 21
    3e64:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
	else if ((USB_Options & USB_OPT_BUSEVENT_PRIMED) == USB_OPT_BUSEVENT_PRIMED)
	  USB.INTCTRLA = (2 << USB_INTLVL_gp);
    3e66:	82 e0       	ldi	r24, 0x02	; 2
    3e68:	18 96       	adiw	r26, 0x08	; 8
    3e6a:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    3e6c:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	80 93 13 23 	sts	0x2313, r24

	USB_ResetInterface();
    3e74:	aa cf       	rjmp	.-172    	; 0x3dca <USB_ResetInterface>

00003e76 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    3e76:	e0 ec       	ldi	r30, 0xC0	; 192
    3e78:	f4 e0       	ldi	r31, 0x04	; 4
    3e7a:	80 85       	ldd	r24, Z+8	; 0x08
    3e7c:	83 70       	andi	r24, 0x03	; 3
    3e7e:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    3e80:	11 86       	std	Z+9, r1	; 0x09
    3e82:	08 95       	ret

00003e84 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    3e84:	e0 ec       	ldi	r30, 0xC0	; 192
    3e86:	f4 e0       	ldi	r31, 0x04	; 4
    3e88:	8f ef       	ldi	r24, 0xFF	; 255
    3e8a:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    3e8c:	84 87       	std	Z+12, r24	; 0x0c
    3e8e:	08 95       	ret

00003e90 <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    3e90:	1f 92       	push	r1
    3e92:	0f 92       	push	r0
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	0f 92       	push	r0
    3e98:	11 24       	eor	r1, r1
    3e9a:	2f 93       	push	r18
    3e9c:	3f 93       	push	r19
    3e9e:	4f 93       	push	r20
    3ea0:	5f 93       	push	r21
    3ea2:	6f 93       	push	r22
    3ea4:	7f 93       	push	r23
    3ea6:	8f 93       	push	r24
    3ea8:	9f 93       	push	r25
    3eaa:	af 93       	push	r26
    3eac:	bf 93       	push	r27
    3eae:	ef 93       	push	r30
    3eb0:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    3eb2:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3eb6:	87 fd       	sbrc	r24, 7
    3eb8:	4d c0       	rjmp	.+154    	; 0x3f54 <__vector_125+0xc4>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    3eba:	80 91 ca 04 	lds	r24, 0x04CA

		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    3ebe:	86 fd       	sbrc	r24, 6
    3ec0:	41 c0       	rjmp	.+130    	; 0x3f44 <__vector_125+0xb4>
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    3ec2:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    3ec6:	85 ff       	sbrs	r24, 5
    3ec8:	0c c0       	rjmp	.+24     	; 0x3ee2 <__vector_125+0x52>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    3eca:	80 e2       	ldi	r24, 0x20	; 32
    3ecc:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    3ed0:	80 91 10 23 	lds	r24, 0x2310
    3ed4:	88 23       	and	r24, r24
    3ed6:	71 f1       	breq	.+92     	; 0x3f34 <__vector_125+0xa4>
		  USB_DeviceState = DEVICE_STATE_Configured;
    3ed8:	84 e0       	ldi	r24, 0x04	; 4
    3eda:	80 93 14 23 	sts	0x2314, r24
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    3ede:	0e 94 4d 0b 	call	0x169a	; 0x169a <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    3ee2:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    3ee6:	84 ff       	sbrs	r24, 4
    3ee8:	14 c0       	rjmp	.+40     	; 0x3f12 <__vector_125+0x82>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    3eea:	80 e1       	ldi	r24, 0x10	; 16
    3eec:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    3ef0:	82 e0       	ldi	r24, 0x02	; 2
    3ef2:	80 93 14 23 	sts	0x2314, r24
		USB_Device_ConfigurationNumber = 0;
    3ef6:	10 92 10 23 	sts	0x2310, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    3efa:	10 92 c3 04 	sts	0x04C3, r1

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    3efe:	b7 de       	rcall	.-658    	; 0x3c6e <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    3f00:	48 e0       	ldi	r20, 0x08	; 8
    3f02:	68 e4       	ldi	r22, 0x48	; 72
    3f04:	80 e8       	ldi	r24, 0x80	; 128
    3f06:	fc dd       	rcall	.-1032   	; 0x3b00 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    3f08:	48 e0       	ldi	r20, 0x08	; 8
    3f0a:	68 e4       	ldi	r22, 0x48	; 72
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
    3f0e:	f8 dd       	rcall	.-1040   	; 0x3b00 <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    3f10:	35 db       	rcall	.-2454   	; 0x357c <USB_Event_Stub>
	}
}
    3f12:	ff 91       	pop	r31
    3f14:	ef 91       	pop	r30
    3f16:	bf 91       	pop	r27
    3f18:	af 91       	pop	r26
    3f1a:	9f 91       	pop	r25
    3f1c:	8f 91       	pop	r24
    3f1e:	7f 91       	pop	r23
    3f20:	6f 91       	pop	r22
    3f22:	5f 91       	pop	r21
    3f24:	4f 91       	pop	r20
    3f26:	3f 91       	pop	r19
    3f28:	2f 91       	pop	r18
    3f2a:	0f 90       	pop	r0
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	0f 90       	pop	r0
    3f30:	1f 90       	pop	r1
    3f32:	18 95       	reti
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    3f34:	80 91 c3 04 	lds	r24, 0x04C3
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3f38:	81 11       	cpse	r24, r1
    3f3a:	15 c0       	rjmp	.+42     	; 0x3f66 <__vector_125+0xd6>
    3f3c:	81 e0       	ldi	r24, 0x01	; 1
    3f3e:	80 93 14 23 	sts	0x2314, r24
    3f42:	cd cf       	rjmp	.-102    	; 0x3ede <__vector_125+0x4e>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    3f44:	80 e4       	ldi	r24, 0x40	; 64
    3f46:	80 93 ca 04 	sts	0x04CA, r24
	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    3f4a:	10 92 14 23 	sts	0x2314, r1
		EVENT_USB_Device_Disconnect();
    3f4e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <EVENT_USB_Device_Disconnect>
    3f52:	b7 cf       	rjmp	.-146    	; 0x3ec2 <__vector_125+0x32>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    3f54:	80 91 c8 04 	lds	r24, 0x04C8
}

ISR(USB_BUSEVENT_vect)
{
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    3f58:	87 ff       	sbrs	r24, 7
    3f5a:	af cf       	rjmp	.-162    	; 0x3eba <__vector_125+0x2a>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    3f5c:	80 e8       	ldi	r24, 0x80	; 128
    3f5e:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    3f62:	0c db       	rcall	.-2536   	; 0x357c <USB_Event_Stub>
    3f64:	aa cf       	rjmp	.-172    	; 0x3eba <__vector_125+0x2a>
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    3f66:	83 e0       	ldi	r24, 0x03	; 3
    3f68:	ea cf       	rjmp	.-44     	; 0x3f3e <__vector_125+0xae>

00003f6a <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    3f6a:	cf 93       	push	r28
    3f6c:	df 93       	push	r29
    3f6e:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    3f70:	fc 01       	movw	r30, r24
    3f72:	70 96       	adiw	r30, 0x10	; 16
    3f74:	8b e0       	ldi	r24, 0x0B	; 11
    3f76:	df 01       	movw	r26, r30
    3f78:	1d 92       	st	X+, r1
    3f7a:	8a 95       	dec	r24
    3f7c:	e9 f7       	brne	.-6      	; 0x3f78 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    3f7e:	82 e0       	ldi	r24, 0x02	; 2
    3f80:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    3f82:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    3f84:	83 e0       	ldi	r24, 0x03	; 3
    3f86:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    3f88:	61 e0       	ldi	r22, 0x01	; 1
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	01 96       	adiw	r24, 0x01	; 1
    3f8e:	03 de       	rcall	.-1018   	; 0x3b96 <Endpoint_ConfigureEndpointTable>
    3f90:	81 11       	cpse	r24, r1
    3f92:	04 c0       	rjmp	.+8      	; 0x3f9c <CDC_Device_ConfigureEndpoints+0x32>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	df 91       	pop	r29
    3f98:	cf 91       	pop	r28
    3f9a:	08 95       	ret
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    3f9c:	61 e0       	ldi	r22, 0x01	; 1
    3f9e:	ce 01       	movw	r24, r28
    3fa0:	06 96       	adiw	r24, 0x06	; 6
    3fa2:	f9 dd       	rcall	.-1038   	; 0x3b96 <Endpoint_ConfigureEndpointTable>
    3fa4:	88 23       	and	r24, r24
    3fa6:	b1 f3       	breq	.-20     	; 0x3f94 <CDC_Device_ConfigureEndpoints+0x2a>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    3fa8:	61 e0       	ldi	r22, 0x01	; 1
    3faa:	ce 01       	movw	r24, r28
    3fac:	0b 96       	adiw	r24, 0x0b	; 11
	  return false;

	return true;
}
    3fae:	df 91       	pop	r29
    3fb0:	cf 91       	pop	r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    3fb2:	f1 cd       	rjmp	.-1054   	; 0x3b96 <Endpoint_ConfigureEndpointTable>

00003fb4 <CDC_Device_SendString>:
	#endif
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
    3fb4:	cf 93       	push	r28
    3fb6:	df 93       	push	r29
    3fb8:	eb 01       	movw	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    3fba:	20 91 14 23 	lds	r18, 0x2314
    3fbe:	24 30       	cpi	r18, 0x04	; 4
    3fc0:	21 f0       	breq	.+8      	; 0x3fca <CDC_Device_SendString+0x16>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
}
    3fc2:	82 e0       	ldi	r24, 0x02	; 2
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	08 95       	ret
}

uint8_t CDC_Device_SendString(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                              const char* const String)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    3fca:	fc 01       	movw	r30, r24
    3fcc:	44 89       	ldd	r20, Z+20	; 0x14
    3fce:	55 89       	ldd	r21, Z+21	; 0x15
    3fd0:	66 89       	ldd	r22, Z+22	; 0x16
    3fd2:	77 89       	ldd	r23, Z+23	; 0x17
    3fd4:	45 2b       	or	r20, r21
    3fd6:	46 2b       	or	r20, r22
    3fd8:	47 2b       	or	r20, r23
    3fda:	99 f3       	breq	.-26     	; 0x3fc2 <CDC_Device_SendString+0xe>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    3fdc:	81 81       	ldd	r24, Z+1	; 0x01
    3fde:	d1 dc       	rcall	.-1630   	; 0x3982 <Endpoint_SelectEndpoint>
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	01 90       	ld	r0, Z+
    3fe4:	00 20       	and	r0, r0
    3fe6:	e9 f7       	brne	.-6      	; 0x3fe2 <CDC_Device_SendString+0x2e>
    3fe8:	bf 01       	movw	r22, r30
    3fea:	61 50       	subi	r22, 0x01	; 1
    3fec:	71 09       	sbc	r23, r1
    3fee:	6c 1b       	sub	r22, r28
    3ff0:	7d 0b       	sbc	r23, r29
    3ff2:	40 e0       	ldi	r20, 0x00	; 0
    3ff4:	50 e0       	ldi	r21, 0x00	; 0
    3ff6:	ce 01       	movw	r24, r28
}
    3ff8:	df 91       	pop	r29
    3ffa:	cf 91       	pop	r28
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(String, strlen(String), NULL);
    3ffc:	d5 ca       	rjmp	.-2646   	; 0x35a8 <Endpoint_Write_Stream_LE>

00003ffe <CDC_Device_SendData>:
}

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
    3ffe:	ef 92       	push	r14
    4000:	ff 92       	push	r15
    4002:	0f 93       	push	r16
    4004:	1f 93       	push	r17
    4006:	cf 93       	push	r28
    4008:	df 93       	push	r29
    400a:	eb 01       	movw	r28, r22
    400c:	7a 01       	movw	r14, r20
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    400e:	20 91 14 23 	lds	r18, 0x2314
    4012:	24 30       	cpi	r18, 0x04	; 4
    4014:	41 f0       	breq	.+16     	; 0x4026 <CDC_Device_SendData+0x28>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}
    4016:	82 e0       	ldi	r24, 0x02	; 2
    4018:	df 91       	pop	r29
    401a:	cf 91       	pop	r28
    401c:	1f 91       	pop	r17
    401e:	0f 91       	pop	r16
    4020:	ff 90       	pop	r15
    4022:	ef 90       	pop	r14
    4024:	08 95       	ret

uint8_t CDC_Device_SendData(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const void* const Buffer,
                            const uint16_t Length)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    4026:	fc 01       	movw	r30, r24
    4028:	04 89       	ldd	r16, Z+20	; 0x14
    402a:	15 89       	ldd	r17, Z+21	; 0x15
    402c:	26 89       	ldd	r18, Z+22	; 0x16
    402e:	37 89       	ldd	r19, Z+23	; 0x17
    4030:	01 2b       	or	r16, r17
    4032:	02 2b       	or	r16, r18
    4034:	03 2b       	or	r16, r19
    4036:	79 f3       	breq	.-34     	; 0x4016 <CDC_Device_SendData+0x18>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    4038:	81 81       	ldd	r24, Z+1	; 0x01
    403a:	a3 dc       	rcall	.-1722   	; 0x3982 <Endpoint_SelectEndpoint>
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    403c:	40 e0       	ldi	r20, 0x00	; 0
    403e:	50 e0       	ldi	r21, 0x00	; 0
    4040:	b7 01       	movw	r22, r14
    4042:	ce 01       	movw	r24, r28
}
    4044:	df 91       	pop	r29
    4046:	cf 91       	pop	r28
    4048:	1f 91       	pop	r17
    404a:	0f 91       	pop	r16
    404c:	ff 90       	pop	r15
    404e:	ef 90       	pop	r14
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
    4050:	ab ca       	rjmp	.-2730   	; 0x35a8 <Endpoint_Write_Stream_LE>

00004052 <CDC_Device_SendByte>:
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    4052:	0f 93       	push	r16
    4054:	1f 93       	push	r17
    4056:	cf 93       	push	r28
    4058:	df 93       	push	r29
    405a:	1f 92       	push	r1
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    4060:	20 91 14 23 	lds	r18, 0x2314
    4064:	24 30       	cpi	r18, 0x04	; 4
    4066:	39 f0       	breq	.+14     	; 0x4076 <CDC_Device_SendByte+0x24>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    4068:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    406a:	0f 90       	pop	r0
    406c:	df 91       	pop	r29
    406e:	cf 91       	pop	r28
    4070:	1f 91       	pop	r17
    4072:	0f 91       	pop	r16
    4074:	08 95       	ret
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    4076:	fc 01       	movw	r30, r24
    4078:	04 89       	ldd	r16, Z+20	; 0x14
    407a:	15 89       	ldd	r17, Z+21	; 0x15
    407c:	26 89       	ldd	r18, Z+22	; 0x16
    407e:	37 89       	ldd	r19, Z+23	; 0x17
    4080:	01 2b       	or	r16, r17
    4082:	02 2b       	or	r16, r18
    4084:	03 2b       	or	r16, r19
    4086:	81 f3       	breq	.-32     	; 0x4068 <CDC_Device_SendByte+0x16>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    4088:	81 81       	ldd	r24, Z+1	; 0x01
    408a:	69 83       	std	Y+1, r22	; 0x01
    408c:	7a dc       	rcall	.-1804   	; 0x3982 <Endpoint_SelectEndpoint>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    408e:	20 91 1d 23 	lds	r18, 0x231D
    4092:	30 91 1e 23 	lds	r19, 0x231E
    4096:	f9 01       	movw	r30, r18
    4098:	ef 5b       	subi	r30, 0xBF	; 191
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	90 81       	ld	r25, Z
    409e:	31 97       	sbiw	r30, 0x01	; 1
    40a0:	80 81       	ld	r24, Z

	if (!(Endpoint_IsReadWriteAllowed()))
    40a2:	69 81       	ldd	r22, Y+1	; 0x01
    40a4:	98 17       	cp	r25, r24
    40a6:	30 f0       	brcs	.+12     	; 0x40b4 <CDC_Device_SendByte+0x62>
	{
		Endpoint_ClearIN();
    40a8:	69 83       	std	Y+1, r22	; 0x01
    40aa:	23 dc       	rcall	.-1978   	; 0x38f2 <Endpoint_ClearIN>

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    40ac:	2e de       	rcall	.-932    	; 0x3d0a <Endpoint_WaitUntilReady>
    40ae:	69 81       	ldd	r22, Y+1	; 0x01
    40b0:	81 11       	cpse	r24, r1
    40b2:	db cf       	rjmp	.-74     	; 0x406a <CDC_Device_SendByte+0x18>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
    40b4:	86 2f       	mov	r24, r22
    40b6:	55 dc       	rcall	.-1878   	; 0x3962 <Endpoint_Write_8>
	return ENDPOINT_READYWAIT_NoError;
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	d7 cf       	rjmp	.-82     	; 0x406a <CDC_Device_SendByte+0x18>

000040bc <CDC_Device_Flush>:
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    40bc:	cf 93       	push	r28
    40be:	df 93       	push	r29
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    40c0:	20 91 14 23 	lds	r18, 0x2314
    40c4:	24 30       	cpi	r18, 0x04	; 4
    40c6:	21 f0       	breq	.+8      	; 0x40d0 <CDC_Device_Flush+0x14>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    40c8:	82 e0       	ldi	r24, 0x02	; 2

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    40ca:	df 91       	pop	r29
    40cc:	cf 91       	pop	r28
    40ce:	08 95       	ret
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    40d0:	fc 01       	movw	r30, r24
    40d2:	44 89       	ldd	r20, Z+20	; 0x14
    40d4:	55 89       	ldd	r21, Z+21	; 0x15
    40d6:	66 89       	ldd	r22, Z+22	; 0x16
    40d8:	77 89       	ldd	r23, Z+23	; 0x17
    40da:	45 2b       	or	r20, r21
    40dc:	46 2b       	or	r20, r22
    40de:	47 2b       	or	r20, r23
    40e0:	99 f3       	breq	.-26     	; 0x40c8 <CDC_Device_Flush+0xc>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    40e2:	81 81       	ldd	r24, Z+1	; 0x01
    40e4:	4e dc       	rcall	.-1892   	; 0x3982 <Endpoint_SelectEndpoint>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    40e6:	80 91 21 23 	lds	r24, 0x2321
				  return USB_Endpoint_SelectedFIFO->Position;
    40ea:	20 91 1d 23 	lds	r18, 0x231D
    40ee:	30 91 1e 23 	lds	r19, 0x231E
    40f2:	f9 01       	movw	r30, r18
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    40f4:	87 fd       	sbrc	r24, 7
    40f6:	1b c0       	rjmp	.+54     	; 0x412e <CDC_Device_Flush+0x72>
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    40f8:	e0 5c       	subi	r30, 0xC0	; 192
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	80 81       	ld	r24, Z
    40fe:	31 96       	adiw	r30, 0x01	; 1
    4100:	40 81       	ld	r20, Z
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	84 1b       	sub	r24, r20
    4106:	91 09       	sbc	r25, r1

	if (!(Endpoint_BytesInEndpoint()))
    4108:	89 2b       	or	r24, r25
    410a:	11 f4       	brne	.+4      	; 0x4110 <CDC_Device_Flush+0x54>
	if (BankFull)
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;

		Endpoint_ClearIN();
    410c:	80 e0       	ldi	r24, 0x00	; 0
    410e:	dd cf       	rjmp	.-70     	; 0x40ca <CDC_Device_Flush+0xe>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    4110:	f9 01       	movw	r30, r18
    4112:	ef 5b       	subi	r30, 0xBF	; 191
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	d0 81       	ld	r29, Z
    4118:	31 97       	sbiw	r30, 0x01	; 1
    411a:	c0 81       	ld	r28, Z
	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();
    411c:	ea db       	rcall	.-2092   	; 0x38f2 <Endpoint_ClearIN>

	if (BankFull)
    411e:	dc 17       	cp	r29, r28
    4120:	a8 f3       	brcs	.-22     	; 0x410c <CDC_Device_Flush+0x50>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    4122:	f3 dd       	rcall	.-1050   	; 0x3d0a <Endpoint_WaitUntilReady>
    4124:	81 11       	cpse	r24, r1
    4126:	d1 cf       	rjmp	.-94     	; 0x40ca <CDC_Device_Flush+0xe>
		  return ErrorCode;

		Endpoint_ClearIN();
    4128:	e4 db       	rcall	.-2104   	; 0x38f2 <Endpoint_ClearIN>
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	ce cf       	rjmp	.-100    	; 0x40ca <CDC_Device_Flush+0xe>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
				  return USB_Endpoint_SelectedFIFO->Position;
    412e:	ef 5b       	subi	r30, 0xBF	; 191
    4130:	ff 4f       	sbci	r31, 0xFF	; 255
    4132:	80 81       	ld	r24, Z
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	e8 cf       	rjmp	.-48     	; 0x4108 <CDC_Device_Flush+0x4c>

00004138 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    4138:	cf 93       	push	r28
    413a:	df 93       	push	r29
    413c:	ec 01       	movw	r28, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    413e:	80 91 14 23 	lds	r24, 0x2314
    4142:	84 30       	cpi	r24, 0x04	; 4
    4144:	19 f0       	breq	.+6      	; 0x414c <CDC_Device_USBTask+0x14>
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
	  CDC_Device_Flush(CDCInterfaceInfo);
	#endif
}
    4146:	df 91       	pop	r29
    4148:	cf 91       	pop	r28
    414a:	08 95       	ret
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    414c:	4c 89       	ldd	r20, Y+20	; 0x14
    414e:	5d 89       	ldd	r21, Y+21	; 0x15
    4150:	6e 89       	ldd	r22, Y+22	; 0x16
    4152:	7f 89       	ldd	r23, Y+23	; 0x17
    4154:	45 2b       	or	r20, r21
    4156:	46 2b       	or	r20, r22
    4158:	47 2b       	or	r20, r23
    415a:	a9 f3       	breq	.-22     	; 0x4146 <CDC_Device_USBTask+0xe>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);
    415c:	89 81       	ldd	r24, Y+1	; 0x01
    415e:	11 dc       	rcall	.-2014   	; 0x3982 <Endpoint_SelectEndpoint>

	if (Endpoint_IsINReady())
    4160:	49 dc       	rcall	.-1902   	; 0x39f4 <Endpoint_IsINReady>
    4162:	88 23       	and	r24, r24
    4164:	81 f3       	breq	.-32     	; 0x4146 <CDC_Device_USBTask+0xe>
	  CDC_Device_Flush(CDCInterfaceInfo);
    4166:	ce 01       	movw	r24, r28
	#endif
}
    4168:	df 91       	pop	r29
    416a:	cf 91       	pop	r28

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
	  CDC_Device_Flush(CDCInterfaceInfo);
    416c:	a7 cf       	rjmp	.-178    	; 0x40bc <CDC_Device_Flush>

0000416e <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    416e:	cf 93       	push	r28
    4170:	df 93       	push	r29
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    4172:	20 91 14 23 	lds	r18, 0x2314
    4176:	24 30       	cpi	r18, 0x04	; 4
    4178:	a9 f5       	brne	.+106    	; 0x41e4 <CDC_Device_ReceiveByte+0x76>
    417a:	fc 01       	movw	r30, r24
    417c:	44 89       	ldd	r20, Z+20	; 0x14
    417e:	55 89       	ldd	r21, Z+21	; 0x15
    4180:	66 89       	ldd	r22, Z+22	; 0x16
    4182:	77 89       	ldd	r23, Z+23	; 0x17
    4184:	45 2b       	or	r20, r21
    4186:	46 2b       	or	r20, r22
    4188:	47 2b       	or	r20, r23
    418a:	61 f1       	breq	.+88     	; 0x41e4 <CDC_Device_ReceiveByte+0x76>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);
    418c:	86 81       	ldd	r24, Z+6	; 0x06
    418e:	f9 db       	rcall	.-2062   	; 0x3982 <Endpoint_SelectEndpoint>

	if (Endpoint_IsOUTReceived())
    4190:	3d dc       	rcall	.-1926   	; 0x3a0c <Endpoint_IsOUTReceived>
    4192:	88 23       	and	r24, r24
    4194:	39 f1       	breq	.+78     	; 0x41e4 <CDC_Device_ReceiveByte+0x76>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    4196:	80 91 21 23 	lds	r24, 0x2321
				  return USB_Endpoint_SelectedFIFO->Position;
    419a:	40 91 1d 23 	lds	r20, 0x231D
    419e:	50 91 1e 23 	lds	r21, 0x231E
    41a2:	fa 01       	movw	r30, r20
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    41a4:	87 fd       	sbrc	r24, 7
    41a6:	3a c0       	rjmp	.+116    	; 0x421c <CDC_Device_ReceiveByte+0xae>
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    41a8:	e0 5c       	subi	r30, 0xC0	; 192
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	80 81       	ld	r24, Z
    41ae:	31 96       	adiw	r30, 0x01	; 1
    41b0:	20 81       	ld	r18, Z
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	82 1b       	sub	r24, r18
    41b6:	91 09       	sbc	r25, r1
	{
		if (Endpoint_BytesInEndpoint())
    41b8:	89 2b       	or	r24, r25
    41ba:	c9 f4       	brne	.+50     	; 0x41ee <CDC_Device_ReceiveByte+0x80>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    41bc:	cf ef       	ldi	r28, 0xFF	; 255
    41be:	df ef       	ldi	r29, 0xFF	; 255
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    41c0:	80 91 21 23 	lds	r24, 0x2321
				  return USB_Endpoint_SelectedFIFO->Position;
    41c4:	fa 01       	movw	r30, r20
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    41c6:	87 fd       	sbrc	r24, 7
    41c8:	1e c0       	rjmp	.+60     	; 0x4206 <CDC_Device_ReceiveByte+0x98>
				  return USB_Endpoint_SelectedFIFO->Position;
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    41ca:	e0 5c       	subi	r30, 0xC0	; 192
    41cc:	ff 4f       	sbci	r31, 0xFF	; 255
    41ce:	20 81       	ld	r18, Z
    41d0:	31 96       	adiw	r30, 0x01	; 1
    41d2:	80 81       	ld	r24, Z
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	28 1b       	sub	r18, r24
    41d8:	31 09       	sbc	r19, r1
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    41da:	d9 f0       	breq	.+54     	; 0x4212 <CDC_Device_ReceiveByte+0xa4>
    41dc:	ce 01       	movw	r24, r28
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	08 95       	ret
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    41e4:	8f ef       	ldi	r24, 0xFF	; 255
    41e6:	9f ef       	ldi	r25, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    41e8:	df 91       	pop	r29
    41ea:	cf 91       	pop	r28
    41ec:	08 95       	ret
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();
    41ee:	a9 db       	rcall	.-2222   	; 0x3942 <Endpoint_Read_8>
    41f0:	c8 2f       	mov	r28, r24
    41f2:	d0 e0       	ldi	r29, 0x00	; 0
    41f4:	40 91 1d 23 	lds	r20, 0x231D
    41f8:	50 91 1e 23 	lds	r21, 0x231E
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    41fc:	80 91 21 23 	lds	r24, 0x2321
				  return USB_Endpoint_SelectedFIFO->Position;
    4200:	fa 01       	movw	r30, r20
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    4202:	87 ff       	sbrs	r24, 7
    4204:	e2 cf       	rjmp	.-60     	; 0x41ca <CDC_Device_ReceiveByte+0x5c>
				  return USB_Endpoint_SelectedFIFO->Position;
    4206:	ef 5b       	subi	r30, 0xBF	; 191
    4208:	ff 4f       	sbci	r31, 0xFF	; 255
    420a:	20 81       	ld	r18, Z
    420c:	30 e0       	ldi	r19, 0x00	; 0

		if (!(Endpoint_BytesInEndpoint()))
    420e:	23 2b       	or	r18, r19
    4210:	29 f7       	brne	.-54     	; 0x41dc <CDC_Device_ReceiveByte+0x6e>
		  Endpoint_ClearOUT();
    4212:	88 db       	rcall	.-2288   	; 0x3924 <Endpoint_ClearOUT>
    4214:	ce 01       	movw	r24, r28
	}

	return ReceivedByte;
}
    4216:	df 91       	pop	r29
    4218:	cf 91       	pop	r28
    421a:	08 95       	ret
    421c:	ef 5b       	subi	r30, 0xBF	; 191
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	80 81       	ld	r24, Z
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	c9 cf       	rjmp	.-110    	; 0x41b8 <CDC_Device_ReceiveByte+0x4a>

00004226 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    4226:	08 95       	ret

00004228 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    4228:	ff 92       	push	r15
    422a:	0f 93       	push	r16
    422c:	1f 93       	push	r17
    422e:	cf 93       	push	r28
    4230:	df 93       	push	r29
    4232:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    4234:	04 dc       	rcall	.-2040   	; 0x3a3e <Endpoint_IsSETUPReceived>
    4236:	88 23       	and	r24, r24
    4238:	49 f0       	breq	.+18     	; 0x424c <CDC_Device_ProcessControlRequest+0x24>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    423a:	88 81       	ld	r24, Y
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	20 91 19 23 	lds	r18, 0x2319
    4242:	30 91 1a 23 	lds	r19, 0x231A
    4246:	28 17       	cp	r18, r24
    4248:	39 07       	cpc	r19, r25
    424a:	31 f0       	breq	.+12     	; 0x4258 <CDC_Device_ProcessControlRequest+0x30>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    424c:	df 91       	pop	r29
    424e:	cf 91       	pop	r28
    4250:	1f 91       	pop	r17
    4252:	0f 91       	pop	r16
    4254:	ff 90       	pop	r15
    4256:	08 95       	ret
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
    4258:	80 91 16 23 	lds	r24, 0x2316
    425c:	81 32       	cpi	r24, 0x21	; 33
    425e:	09 f4       	brne	.+2      	; 0x4262 <CDC_Device_ProcessControlRequest+0x3a>
    4260:	48 c0       	rjmp	.+144    	; 0x42f2 <CDC_Device_ProcessControlRequest+0xca>
    4262:	a0 f0       	brcs	.+40     	; 0x428c <CDC_Device_ProcessControlRequest+0x64>
    4264:	82 32       	cpi	r24, 0x22	; 34
    4266:	09 f4       	brne	.+2      	; 0x426a <CDC_Device_ProcessControlRequest+0x42>
    4268:	65 c0       	rjmp	.+202    	; 0x4334 <CDC_Device_ProcessControlRequest+0x10c>
    426a:	83 32       	cpi	r24, 0x23	; 35
    426c:	79 f7       	brne	.-34     	; 0x424c <CDC_Device_ProcessControlRequest+0x24>
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    426e:	80 91 15 23 	lds	r24, 0x2315
    4272:	81 32       	cpi	r24, 0x21	; 33
    4274:	59 f7       	brne	.-42     	; 0x424c <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    4276:	fc db       	rcall	.-2056   	; 0x3a70 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    4278:	32 dd       	rcall	.-1436   	; 0x3cde <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    427a:	60 91 17 23 	lds	r22, 0x2317
    427e:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	1f 91       	pop	r17
    4286:	0f 91       	pop	r16
    4288:	ff 90       	pop	r15
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    428a:	cd cf       	rjmp	.-102    	; 0x4226 <CDC_Device_Event_Stub>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
    428c:	80 32       	cpi	r24, 0x20	; 32
    428e:	f1 f6       	brne	.-68     	; 0x424c <CDC_Device_ProcessControlRequest+0x24>
				Endpoint_ClearStatusStage();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4290:	80 91 15 23 	lds	r24, 0x2315
    4294:	81 32       	cpi	r24, 0x21	; 33
    4296:	d1 f6       	brne	.-76     	; 0x424c <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    4298:	eb db       	rcall	.-2090   	; 0x3a70 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
    429a:	04 c0       	rjmp	.+8      	; 0x42a4 <CDC_Device_ProcessControlRequest+0x7c>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    429c:	80 91 14 23 	lds	r24, 0x2314
    42a0:	88 23       	and	r24, r24
    42a2:	a1 f2       	breq	.-88     	; 0x424c <CDC_Device_ProcessControlRequest+0x24>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    42a4:	b3 db       	rcall	.-2202   	; 0x3a0c <Endpoint_IsOUTReceived>
    42a6:	88 23       	and	r24, r24
    42a8:	c9 f3       	breq	.-14     	; 0x429c <CDC_Device_ProcessControlRequest+0x74>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    42aa:	4b db       	rcall	.-2410   	; 0x3942 <Endpoint_Read_8>
    42ac:	08 2f       	mov	r16, r24
				uint32_t Byte1 = Endpoint_Read_8();
    42ae:	49 db       	rcall	.-2414   	; 0x3942 <Endpoint_Read_8>
    42b0:	18 2f       	mov	r17, r24
				uint32_t Byte2 = Endpoint_Read_8();
    42b2:	47 db       	rcall	.-2418   	; 0x3942 <Endpoint_Read_8>
    42b4:	f8 2e       	mov	r15, r24
				uint32_t Byte3 = Endpoint_Read_8();
    42b6:	45 db       	rcall	.-2422   	; 0x3942 <Endpoint_Read_8>
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    42b8:	4f 2d       	mov	r20, r15
    42ba:	50 e0       	ldi	r21, 0x00	; 0
    42bc:	60 e0       	ldi	r22, 0x00	; 0
    42be:	70 e0       	ldi	r23, 0x00	; 0
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    42c0:	ba 01       	movw	r22, r20
    42c2:	55 27       	eor	r21, r21
    42c4:	44 27       	eor	r20, r20
    42c6:	78 2b       	or	r23, r24
    42c8:	40 2b       	or	r20, r16
    42ca:	51 2b       	or	r21, r17
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    42cc:	4c 8b       	std	Y+20, r20	; 0x14
    42ce:	5d 8b       	std	Y+21, r21	; 0x15
    42d0:	6e 8b       	std	Y+22, r22	; 0x16
    42d2:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    42d4:	36 db       	rcall	.-2452   	; 0x3942 <Endpoint_Read_8>
    42d6:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    42d8:	34 db       	rcall	.-2456   	; 0x3942 <Endpoint_Read_8>
    42da:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    42dc:	32 db       	rcall	.-2460   	; 0x3942 <Endpoint_Read_8>
    42de:	8a 8f       	std	Y+26, r24	; 0x1a

				Endpoint_ClearOUT();
    42e0:	21 db       	rcall	.-2494   	; 0x3924 <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
    42e2:	fd dc       	rcall	.-1542   	; 0x3cde <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    42e4:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    42e6:	df 91       	pop	r29
    42e8:	cf 91       	pop	r28
    42ea:	1f 91       	pop	r17
    42ec:	0f 91       	pop	r16
    42ee:	ff 90       	pop	r15
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    42f0:	9a cf       	rjmp	.-204    	; 0x4226 <CDC_Device_Event_Stub>
	  return;

	switch (USB_ControlRequest.bRequest)
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    42f2:	80 91 15 23 	lds	r24, 0x2315
    42f6:	81 3a       	cpi	r24, 0xA1	; 161
    42f8:	09 f0       	breq	.+2      	; 0x42fc <CDC_Device_ProcessControlRequest+0xd4>
    42fa:	a8 cf       	rjmp	.-176    	; 0x424c <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    42fc:	b9 db       	rcall	.-2190   	; 0x3a70 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsINReady()));
    42fe:	7a db       	rcall	.-2316   	; 0x39f4 <Endpoint_IsINReady>
    4300:	88 23       	and	r24, r24
    4302:	e9 f3       	breq	.-6      	; 0x42fe <CDC_Device_ProcessControlRequest+0xd6>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    4304:	8c 89       	ldd	r24, Y+20	; 0x14
    4306:	fd 88       	ldd	r15, Y+21	; 0x15
    4308:	0e 89       	ldd	r16, Y+22	; 0x16
    430a:	1f 89       	ldd	r17, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    430c:	2a db       	rcall	.-2476   	; 0x3962 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    430e:	8f 2d       	mov	r24, r15
    4310:	28 db       	rcall	.-2480   	; 0x3962 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 16);
    4312:	80 2f       	mov	r24, r16
    4314:	26 db       	rcall	.-2484   	; 0x3962 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 24);
    4316:	81 2f       	mov	r24, r17
    4318:	24 db       	rcall	.-2488   	; 0x3962 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    431a:	88 8d       	ldd	r24, Y+24	; 0x18
    431c:	22 db       	rcall	.-2492   	; 0x3962 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    431e:	89 8d       	ldd	r24, Y+25	; 0x19
    4320:	20 db       	rcall	.-2496   	; 0x3962 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    4322:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4324:	1e db       	rcall	.-2500   	; 0x3962 <Endpoint_Write_8>

				Endpoint_ClearIN();
    4326:	e5 da       	rcall	.-2614   	; 0x38f2 <Endpoint_ClearIN>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    4328:	df 91       	pop	r29
    432a:	cf 91       	pop	r28
    432c:	1f 91       	pop	r17
    432e:	0f 91       	pop	r16
    4330:	ff 90       	pop	r15
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    4332:	d5 cc       	rjmp	.-1622   	; 0x3cde <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    4334:	80 91 15 23 	lds	r24, 0x2315
    4338:	81 32       	cpi	r24, 0x21	; 33
    433a:	09 f0       	breq	.+2      	; 0x433e <CDC_Device_ProcessControlRequest+0x116>
    433c:	87 cf       	rjmp	.-242    	; 0x424c <CDC_Device_ProcessControlRequest+0x24>
			{
				Endpoint_ClearSETUP();
    433e:	98 db       	rcall	.-2256   	; 0x3a70 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    4340:	ce dc       	rcall	.-1636   	; 0x3cde <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    4342:	80 91 17 23 	lds	r24, 0x2317
    4346:	90 91 18 23 	lds	r25, 0x2318
    434a:	88 8b       	std	Y+16, r24	; 0x10
    434c:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    434e:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	1f 91       	pop	r17
    4356:	0f 91       	pop	r16
    4358:	ff 90       	pop	r15
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    435a:	65 cf       	rjmp	.-310    	; 0x4226 <CDC_Device_Event_Stub>

0000435c <__tablejump2__>:
    435c:	ee 0f       	add	r30, r30
    435e:	ff 1f       	adc	r31, r31

00004360 <__tablejump__>:
    4360:	05 90       	lpm	r0, Z+
    4362:	f4 91       	lpm	r31, Z+
    4364:	e0 2d       	mov	r30, r0
    4366:	09 94       	ijmp

00004368 <__mulshisi3>:
    4368:	b7 ff       	sbrs	r27, 7
    436a:	04 c0       	rjmp	.+8      	; 0x4374 <__muluhisi3>

0000436c <__mulohisi3>:
    436c:	03 d0       	rcall	.+6      	; 0x4374 <__muluhisi3>
    436e:	82 1b       	sub	r24, r18
    4370:	93 0b       	sbc	r25, r19
    4372:	08 95       	ret

00004374 <__muluhisi3>:
    4374:	09 d0       	rcall	.+18     	; 0x4388 <__umulhisi3>
    4376:	a5 9f       	mul	r26, r21
    4378:	90 0d       	add	r25, r0
    437a:	b4 9f       	mul	r27, r20
    437c:	90 0d       	add	r25, r0
    437e:	a4 9f       	mul	r26, r20
    4380:	80 0d       	add	r24, r0
    4382:	91 1d       	adc	r25, r1
    4384:	11 24       	eor	r1, r1
    4386:	08 95       	ret

00004388 <__umulhisi3>:
    4388:	a2 9f       	mul	r26, r18
    438a:	b0 01       	movw	r22, r0
    438c:	b3 9f       	mul	r27, r19
    438e:	c0 01       	movw	r24, r0
    4390:	a3 9f       	mul	r26, r19
    4392:	70 0d       	add	r23, r0
    4394:	81 1d       	adc	r24, r1
    4396:	11 24       	eor	r1, r1
    4398:	91 1d       	adc	r25, r1
    439a:	b2 9f       	mul	r27, r18
    439c:	70 0d       	add	r23, r0
    439e:	81 1d       	adc	r24, r1
    43a0:	11 24       	eor	r1, r1
    43a2:	91 1d       	adc	r25, r1
    43a4:	08 95       	ret

000043a6 <do_rand>:
    43a6:	8f 92       	push	r8
    43a8:	9f 92       	push	r9
    43aa:	af 92       	push	r10
    43ac:	bf 92       	push	r11
    43ae:	cf 92       	push	r12
    43b0:	df 92       	push	r13
    43b2:	ef 92       	push	r14
    43b4:	ff 92       	push	r15
    43b6:	cf 93       	push	r28
    43b8:	df 93       	push	r29
    43ba:	ec 01       	movw	r28, r24
    43bc:	68 81       	ld	r22, Y
    43be:	79 81       	ldd	r23, Y+1	; 0x01
    43c0:	8a 81       	ldd	r24, Y+2	; 0x02
    43c2:	9b 81       	ldd	r25, Y+3	; 0x03
    43c4:	61 15       	cp	r22, r1
    43c6:	71 05       	cpc	r23, r1
    43c8:	81 05       	cpc	r24, r1
    43ca:	91 05       	cpc	r25, r1
    43cc:	21 f4       	brne	.+8      	; 0x43d6 <do_rand+0x30>
    43ce:	64 e2       	ldi	r22, 0x24	; 36
    43d0:	79 ed       	ldi	r23, 0xD9	; 217
    43d2:	8b e5       	ldi	r24, 0x5B	; 91
    43d4:	97 e0       	ldi	r25, 0x07	; 7
    43d6:	2d e1       	ldi	r18, 0x1D	; 29
    43d8:	33 ef       	ldi	r19, 0xF3	; 243
    43da:	41 e0       	ldi	r20, 0x01	; 1
    43dc:	50 e0       	ldi	r21, 0x00	; 0
    43de:	31 d3       	rcall	.+1634   	; 0x4a42 <__divmodsi4>
    43e0:	49 01       	movw	r8, r18
    43e2:	5a 01       	movw	r10, r20
    43e4:	9b 01       	movw	r18, r22
    43e6:	ac 01       	movw	r20, r24
    43e8:	a7 ea       	ldi	r26, 0xA7	; 167
    43ea:	b1 e4       	ldi	r27, 0x41	; 65
    43ec:	c3 df       	rcall	.-122    	; 0x4374 <__muluhisi3>
    43ee:	6b 01       	movw	r12, r22
    43f0:	7c 01       	movw	r14, r24
    43f2:	ac ee       	ldi	r26, 0xEC	; 236
    43f4:	b4 ef       	ldi	r27, 0xF4	; 244
    43f6:	a5 01       	movw	r20, r10
    43f8:	94 01       	movw	r18, r8
    43fa:	b8 df       	rcall	.-144    	; 0x436c <__mulohisi3>
    43fc:	c6 0e       	add	r12, r22
    43fe:	d7 1e       	adc	r13, r23
    4400:	e8 1e       	adc	r14, r24
    4402:	f9 1e       	adc	r15, r25
    4404:	f7 fe       	sbrs	r15, 7
    4406:	06 c0       	rjmp	.+12     	; 0x4414 <do_rand+0x6e>
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	c8 1a       	sub	r12, r24
    440c:	d1 08       	sbc	r13, r1
    440e:	e1 08       	sbc	r14, r1
    4410:	80 e8       	ldi	r24, 0x80	; 128
    4412:	f8 0a       	sbc	r15, r24
    4414:	c8 82       	st	Y, r12
    4416:	d9 82       	std	Y+1, r13	; 0x01
    4418:	ea 82       	std	Y+2, r14	; 0x02
    441a:	fb 82       	std	Y+3, r15	; 0x03
    441c:	c6 01       	movw	r24, r12
    441e:	9f 77       	andi	r25, 0x7F	; 127
    4420:	df 91       	pop	r29
    4422:	cf 91       	pop	r28
    4424:	ff 90       	pop	r15
    4426:	ef 90       	pop	r14
    4428:	df 90       	pop	r13
    442a:	cf 90       	pop	r12
    442c:	bf 90       	pop	r11
    442e:	af 90       	pop	r10
    4430:	9f 90       	pop	r9
    4432:	8f 90       	pop	r8
    4434:	08 95       	ret

00004436 <rand_r>:
    4436:	b7 cf       	rjmp	.-146    	; 0x43a6 <do_rand>

00004438 <rand>:
    4438:	8c e1       	ldi	r24, 0x1C	; 28
    443a:	90 e2       	ldi	r25, 0x20	; 32
    443c:	b4 cf       	rjmp	.-152    	; 0x43a6 <do_rand>

0000443e <srand>:
    443e:	a0 e0       	ldi	r26, 0x00	; 0
    4440:	b0 e0       	ldi	r27, 0x00	; 0
    4442:	80 93 1c 20 	sts	0x201C, r24
    4446:	90 93 1d 20 	sts	0x201D, r25
    444a:	a0 93 1e 20 	sts	0x201E, r26
    444e:	b0 93 1f 20 	sts	0x201F, r27
    4452:	08 95       	ret

00004454 <memcpy_P>:
    4454:	fb 01       	movw	r30, r22
    4456:	dc 01       	movw	r26, r24
    4458:	02 c0       	rjmp	.+4      	; 0x445e <memcpy_P+0xa>
    445a:	05 90       	lpm	r0, Z+
    445c:	0d 92       	st	X+, r0
    445e:	41 50       	subi	r20, 0x01	; 1
    4460:	50 40       	sbci	r21, 0x00	; 0
    4462:	d8 f7       	brcc	.-10     	; 0x445a <memcpy_P+0x6>
    4464:	08 95       	ret

00004466 <strcmp_P>:
    4466:	fb 01       	movw	r30, r22
    4468:	dc 01       	movw	r26, r24
    446a:	8d 91       	ld	r24, X+
    446c:	05 90       	lpm	r0, Z+
    446e:	80 19       	sub	r24, r0
    4470:	01 10       	cpse	r0, r1
    4472:	d9 f3       	breq	.-10     	; 0x446a <strcmp_P+0x4>
    4474:	99 0b       	sbc	r25, r25
    4476:	08 95       	ret

00004478 <strncpy_P>:
    4478:	fb 01       	movw	r30, r22
    447a:	dc 01       	movw	r26, r24
    447c:	41 50       	subi	r20, 0x01	; 1
    447e:	50 40       	sbci	r21, 0x00	; 0
    4480:	48 f0       	brcs	.+18     	; 0x4494 <strncpy_P+0x1c>
    4482:	05 90       	lpm	r0, Z+
    4484:	0d 92       	st	X+, r0
    4486:	00 20       	and	r0, r0
    4488:	c9 f7       	brne	.-14     	; 0x447c <strncpy_P+0x4>
    448a:	01 c0       	rjmp	.+2      	; 0x448e <strncpy_P+0x16>
    448c:	1d 92       	st	X+, r1
    448e:	41 50       	subi	r20, 0x01	; 1
    4490:	50 40       	sbci	r21, 0x00	; 0
    4492:	e0 f7       	brcc	.-8      	; 0x448c <strncpy_P+0x14>
    4494:	08 95       	ret

00004496 <memcpy>:
    4496:	fb 01       	movw	r30, r22
    4498:	dc 01       	movw	r26, r24
    449a:	02 c0       	rjmp	.+4      	; 0x44a0 <memcpy+0xa>
    449c:	01 90       	ld	r0, Z+
    449e:	0d 92       	st	X+, r0
    44a0:	41 50       	subi	r20, 0x01	; 1
    44a2:	50 40       	sbci	r21, 0x00	; 0
    44a4:	d8 f7       	brcc	.-10     	; 0x449c <memcpy+0x6>
    44a6:	08 95       	ret

000044a8 <snprintf_P>:
    44a8:	ae e0       	ldi	r26, 0x0E	; 14
    44aa:	b0 e0       	ldi	r27, 0x00	; 0
    44ac:	e9 e5       	ldi	r30, 0x59	; 89
    44ae:	f2 e2       	ldi	r31, 0x22	; 34
    44b0:	f2 c2       	rjmp	.+1508   	; 0x4a96 <__prologue_saves__+0x1c>
    44b2:	0d 89       	ldd	r16, Y+21	; 0x15
    44b4:	1e 89       	ldd	r17, Y+22	; 0x16
    44b6:	8f 89       	ldd	r24, Y+23	; 0x17
    44b8:	98 8d       	ldd	r25, Y+24	; 0x18
    44ba:	2e e0       	ldi	r18, 0x0E	; 14
    44bc:	2c 83       	std	Y+4, r18	; 0x04
    44be:	09 83       	std	Y+1, r16	; 0x01
    44c0:	1a 83       	std	Y+2, r17	; 0x02
    44c2:	97 ff       	sbrs	r25, 7
    44c4:	02 c0       	rjmp	.+4      	; 0x44ca <snprintf_P+0x22>
    44c6:	80 e0       	ldi	r24, 0x00	; 0
    44c8:	90 e8       	ldi	r25, 0x80	; 128
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	8d 83       	std	Y+5, r24	; 0x05
    44ce:	9e 83       	std	Y+6, r25	; 0x06
    44d0:	ae 01       	movw	r20, r28
    44d2:	45 5e       	subi	r20, 0xE5	; 229
    44d4:	5f 4f       	sbci	r21, 0xFF	; 255
    44d6:	69 8d       	ldd	r22, Y+25	; 0x19
    44d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44da:	ce 01       	movw	r24, r28
    44dc:	01 96       	adiw	r24, 0x01	; 1
    44de:	11 d0       	rcall	.+34     	; 0x4502 <vfprintf>
    44e0:	4d 81       	ldd	r20, Y+5	; 0x05
    44e2:	5e 81       	ldd	r21, Y+6	; 0x06
    44e4:	57 fd       	sbrc	r21, 7
    44e6:	0a c0       	rjmp	.+20     	; 0x44fc <snprintf_P+0x54>
    44e8:	2f 81       	ldd	r18, Y+7	; 0x07
    44ea:	38 85       	ldd	r19, Y+8	; 0x08
    44ec:	42 17       	cp	r20, r18
    44ee:	53 07       	cpc	r21, r19
    44f0:	0c f4       	brge	.+2      	; 0x44f4 <snprintf_P+0x4c>
    44f2:	9a 01       	movw	r18, r20
    44f4:	f8 01       	movw	r30, r16
    44f6:	e2 0f       	add	r30, r18
    44f8:	f3 1f       	adc	r31, r19
    44fa:	10 82       	st	Z, r1
    44fc:	2e 96       	adiw	r28, 0x0e	; 14
    44fe:	e4 e0       	ldi	r30, 0x04	; 4
    4500:	e3 c2       	rjmp	.+1478   	; 0x4ac8 <__epilogue_restores__+0x1c>

00004502 <vfprintf>:
    4502:	ac e0       	ldi	r26, 0x0C	; 12
    4504:	b0 e0       	ldi	r27, 0x00	; 0
    4506:	e6 e8       	ldi	r30, 0x86	; 134
    4508:	f2 e2       	ldi	r31, 0x22	; 34
    450a:	b7 c2       	rjmp	.+1390   	; 0x4a7a <__prologue_saves__>
    450c:	7c 01       	movw	r14, r24
    450e:	6b 01       	movw	r12, r22
    4510:	8a 01       	movw	r16, r20
    4512:	fc 01       	movw	r30, r24
    4514:	16 82       	std	Z+6, r1	; 0x06
    4516:	17 82       	std	Z+7, r1	; 0x07
    4518:	83 81       	ldd	r24, Z+3	; 0x03
    451a:	81 ff       	sbrs	r24, 1
    451c:	b0 c1       	rjmp	.+864    	; 0x487e <vfprintf+0x37c>
    451e:	ce 01       	movw	r24, r28
    4520:	01 96       	adiw	r24, 0x01	; 1
    4522:	4c 01       	movw	r8, r24
    4524:	f7 01       	movw	r30, r14
    4526:	93 81       	ldd	r25, Z+3	; 0x03
    4528:	f6 01       	movw	r30, r12
    452a:	93 fd       	sbrc	r25, 3
    452c:	85 91       	lpm	r24, Z+
    452e:	93 ff       	sbrs	r25, 3
    4530:	81 91       	ld	r24, Z+
    4532:	6f 01       	movw	r12, r30
    4534:	88 23       	and	r24, r24
    4536:	09 f4       	brne	.+2      	; 0x453a <vfprintf+0x38>
    4538:	9e c1       	rjmp	.+828    	; 0x4876 <vfprintf+0x374>
    453a:	85 32       	cpi	r24, 0x25	; 37
    453c:	39 f4       	brne	.+14     	; 0x454c <vfprintf+0x4a>
    453e:	93 fd       	sbrc	r25, 3
    4540:	85 91       	lpm	r24, Z+
    4542:	93 ff       	sbrs	r25, 3
    4544:	81 91       	ld	r24, Z+
    4546:	6f 01       	movw	r12, r30
    4548:	85 32       	cpi	r24, 0x25	; 37
    454a:	21 f4       	brne	.+8      	; 0x4554 <vfprintf+0x52>
    454c:	b7 01       	movw	r22, r14
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	e8 d1       	rcall	.+976    	; 0x4922 <fputc>
    4552:	e8 cf       	rjmp	.-48     	; 0x4524 <vfprintf+0x22>
    4554:	51 2c       	mov	r5, r1
    4556:	31 2c       	mov	r3, r1
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	20 32       	cpi	r18, 0x20	; 32
    455c:	a0 f4       	brcc	.+40     	; 0x4586 <vfprintf+0x84>
    455e:	8b 32       	cpi	r24, 0x2B	; 43
    4560:	69 f0       	breq	.+26     	; 0x457c <vfprintf+0x7a>
    4562:	30 f4       	brcc	.+12     	; 0x4570 <vfprintf+0x6e>
    4564:	80 32       	cpi	r24, 0x20	; 32
    4566:	59 f0       	breq	.+22     	; 0x457e <vfprintf+0x7c>
    4568:	83 32       	cpi	r24, 0x23	; 35
    456a:	69 f4       	brne	.+26     	; 0x4586 <vfprintf+0x84>
    456c:	20 61       	ori	r18, 0x10	; 16
    456e:	2c c0       	rjmp	.+88     	; 0x45c8 <vfprintf+0xc6>
    4570:	8d 32       	cpi	r24, 0x2D	; 45
    4572:	39 f0       	breq	.+14     	; 0x4582 <vfprintf+0x80>
    4574:	80 33       	cpi	r24, 0x30	; 48
    4576:	39 f4       	brne	.+14     	; 0x4586 <vfprintf+0x84>
    4578:	21 60       	ori	r18, 0x01	; 1
    457a:	26 c0       	rjmp	.+76     	; 0x45c8 <vfprintf+0xc6>
    457c:	22 60       	ori	r18, 0x02	; 2
    457e:	24 60       	ori	r18, 0x04	; 4
    4580:	23 c0       	rjmp	.+70     	; 0x45c8 <vfprintf+0xc6>
    4582:	28 60       	ori	r18, 0x08	; 8
    4584:	21 c0       	rjmp	.+66     	; 0x45c8 <vfprintf+0xc6>
    4586:	27 fd       	sbrc	r18, 7
    4588:	27 c0       	rjmp	.+78     	; 0x45d8 <vfprintf+0xd6>
    458a:	30 ed       	ldi	r19, 0xD0	; 208
    458c:	38 0f       	add	r19, r24
    458e:	3a 30       	cpi	r19, 0x0A	; 10
    4590:	78 f4       	brcc	.+30     	; 0x45b0 <vfprintf+0xae>
    4592:	26 ff       	sbrs	r18, 6
    4594:	06 c0       	rjmp	.+12     	; 0x45a2 <vfprintf+0xa0>
    4596:	fa e0       	ldi	r31, 0x0A	; 10
    4598:	5f 9e       	mul	r5, r31
    459a:	30 0d       	add	r19, r0
    459c:	11 24       	eor	r1, r1
    459e:	53 2e       	mov	r5, r19
    45a0:	13 c0       	rjmp	.+38     	; 0x45c8 <vfprintf+0xc6>
    45a2:	8a e0       	ldi	r24, 0x0A	; 10
    45a4:	38 9e       	mul	r3, r24
    45a6:	30 0d       	add	r19, r0
    45a8:	11 24       	eor	r1, r1
    45aa:	33 2e       	mov	r3, r19
    45ac:	20 62       	ori	r18, 0x20	; 32
    45ae:	0c c0       	rjmp	.+24     	; 0x45c8 <vfprintf+0xc6>
    45b0:	8e 32       	cpi	r24, 0x2E	; 46
    45b2:	21 f4       	brne	.+8      	; 0x45bc <vfprintf+0xba>
    45b4:	26 fd       	sbrc	r18, 6
    45b6:	5f c1       	rjmp	.+702    	; 0x4876 <vfprintf+0x374>
    45b8:	20 64       	ori	r18, 0x40	; 64
    45ba:	06 c0       	rjmp	.+12     	; 0x45c8 <vfprintf+0xc6>
    45bc:	8c 36       	cpi	r24, 0x6C	; 108
    45be:	11 f4       	brne	.+4      	; 0x45c4 <vfprintf+0xc2>
    45c0:	20 68       	ori	r18, 0x80	; 128
    45c2:	02 c0       	rjmp	.+4      	; 0x45c8 <vfprintf+0xc6>
    45c4:	88 36       	cpi	r24, 0x68	; 104
    45c6:	41 f4       	brne	.+16     	; 0x45d8 <vfprintf+0xd6>
    45c8:	f6 01       	movw	r30, r12
    45ca:	93 fd       	sbrc	r25, 3
    45cc:	85 91       	lpm	r24, Z+
    45ce:	93 ff       	sbrs	r25, 3
    45d0:	81 91       	ld	r24, Z+
    45d2:	6f 01       	movw	r12, r30
    45d4:	81 11       	cpse	r24, r1
    45d6:	c1 cf       	rjmp	.-126    	; 0x455a <vfprintf+0x58>
    45d8:	98 2f       	mov	r25, r24
    45da:	9f 7d       	andi	r25, 0xDF	; 223
    45dc:	95 54       	subi	r25, 0x45	; 69
    45de:	93 30       	cpi	r25, 0x03	; 3
    45e0:	28 f4       	brcc	.+10     	; 0x45ec <vfprintf+0xea>
    45e2:	0c 5f       	subi	r16, 0xFC	; 252
    45e4:	1f 4f       	sbci	r17, 0xFF	; 255
    45e6:	ff e3       	ldi	r31, 0x3F	; 63
    45e8:	f9 83       	std	Y+1, r31	; 0x01
    45ea:	0d c0       	rjmp	.+26     	; 0x4606 <vfprintf+0x104>
    45ec:	83 36       	cpi	r24, 0x63	; 99
    45ee:	31 f0       	breq	.+12     	; 0x45fc <vfprintf+0xfa>
    45f0:	83 37       	cpi	r24, 0x73	; 115
    45f2:	71 f0       	breq	.+28     	; 0x4610 <vfprintf+0x10e>
    45f4:	83 35       	cpi	r24, 0x53	; 83
    45f6:	09 f0       	breq	.+2      	; 0x45fa <vfprintf+0xf8>
    45f8:	57 c0       	rjmp	.+174    	; 0x46a8 <vfprintf+0x1a6>
    45fa:	21 c0       	rjmp	.+66     	; 0x463e <vfprintf+0x13c>
    45fc:	f8 01       	movw	r30, r16
    45fe:	80 81       	ld	r24, Z
    4600:	89 83       	std	Y+1, r24	; 0x01
    4602:	0e 5f       	subi	r16, 0xFE	; 254
    4604:	1f 4f       	sbci	r17, 0xFF	; 255
    4606:	44 24       	eor	r4, r4
    4608:	43 94       	inc	r4
    460a:	51 2c       	mov	r5, r1
    460c:	54 01       	movw	r10, r8
    460e:	14 c0       	rjmp	.+40     	; 0x4638 <vfprintf+0x136>
    4610:	38 01       	movw	r6, r16
    4612:	f2 e0       	ldi	r31, 0x02	; 2
    4614:	6f 0e       	add	r6, r31
    4616:	71 1c       	adc	r7, r1
    4618:	f8 01       	movw	r30, r16
    461a:	a0 80       	ld	r10, Z
    461c:	b1 80       	ldd	r11, Z+1	; 0x01
    461e:	26 ff       	sbrs	r18, 6
    4620:	03 c0       	rjmp	.+6      	; 0x4628 <vfprintf+0x126>
    4622:	65 2d       	mov	r22, r5
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	02 c0       	rjmp	.+4      	; 0x462c <vfprintf+0x12a>
    4628:	6f ef       	ldi	r22, 0xFF	; 255
    462a:	7f ef       	ldi	r23, 0xFF	; 255
    462c:	c5 01       	movw	r24, r10
    462e:	2c 87       	std	Y+12, r18	; 0x0c
    4630:	6d d1       	rcall	.+730    	; 0x490c <strnlen>
    4632:	2c 01       	movw	r4, r24
    4634:	83 01       	movw	r16, r6
    4636:	2c 85       	ldd	r18, Y+12	; 0x0c
    4638:	2f 77       	andi	r18, 0x7F	; 127
    463a:	22 2e       	mov	r2, r18
    463c:	16 c0       	rjmp	.+44     	; 0x466a <vfprintf+0x168>
    463e:	38 01       	movw	r6, r16
    4640:	f2 e0       	ldi	r31, 0x02	; 2
    4642:	6f 0e       	add	r6, r31
    4644:	71 1c       	adc	r7, r1
    4646:	f8 01       	movw	r30, r16
    4648:	a0 80       	ld	r10, Z
    464a:	b1 80       	ldd	r11, Z+1	; 0x01
    464c:	26 ff       	sbrs	r18, 6
    464e:	03 c0       	rjmp	.+6      	; 0x4656 <vfprintf+0x154>
    4650:	65 2d       	mov	r22, r5
    4652:	70 e0       	ldi	r23, 0x00	; 0
    4654:	02 c0       	rjmp	.+4      	; 0x465a <vfprintf+0x158>
    4656:	6f ef       	ldi	r22, 0xFF	; 255
    4658:	7f ef       	ldi	r23, 0xFF	; 255
    465a:	c5 01       	movw	r24, r10
    465c:	2c 87       	std	Y+12, r18	; 0x0c
    465e:	4b d1       	rcall	.+662    	; 0x48f6 <strnlen_P>
    4660:	2c 01       	movw	r4, r24
    4662:	2c 85       	ldd	r18, Y+12	; 0x0c
    4664:	20 68       	ori	r18, 0x80	; 128
    4666:	22 2e       	mov	r2, r18
    4668:	83 01       	movw	r16, r6
    466a:	23 fc       	sbrc	r2, 3
    466c:	19 c0       	rjmp	.+50     	; 0x46a0 <vfprintf+0x19e>
    466e:	83 2d       	mov	r24, r3
    4670:	90 e0       	ldi	r25, 0x00	; 0
    4672:	48 16       	cp	r4, r24
    4674:	59 06       	cpc	r5, r25
    4676:	a0 f4       	brcc	.+40     	; 0x46a0 <vfprintf+0x19e>
    4678:	b7 01       	movw	r22, r14
    467a:	80 e2       	ldi	r24, 0x20	; 32
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	51 d1       	rcall	.+674    	; 0x4922 <fputc>
    4680:	3a 94       	dec	r3
    4682:	f5 cf       	rjmp	.-22     	; 0x466e <vfprintf+0x16c>
    4684:	f5 01       	movw	r30, r10
    4686:	27 fc       	sbrc	r2, 7
    4688:	85 91       	lpm	r24, Z+
    468a:	27 fe       	sbrs	r2, 7
    468c:	81 91       	ld	r24, Z+
    468e:	5f 01       	movw	r10, r30
    4690:	b7 01       	movw	r22, r14
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	46 d1       	rcall	.+652    	; 0x4922 <fputc>
    4696:	31 10       	cpse	r3, r1
    4698:	3a 94       	dec	r3
    469a:	f1 e0       	ldi	r31, 0x01	; 1
    469c:	4f 1a       	sub	r4, r31
    469e:	51 08       	sbc	r5, r1
    46a0:	41 14       	cp	r4, r1
    46a2:	51 04       	cpc	r5, r1
    46a4:	79 f7       	brne	.-34     	; 0x4684 <vfprintf+0x182>
    46a6:	de c0       	rjmp	.+444    	; 0x4864 <vfprintf+0x362>
    46a8:	84 36       	cpi	r24, 0x64	; 100
    46aa:	11 f0       	breq	.+4      	; 0x46b0 <vfprintf+0x1ae>
    46ac:	89 36       	cpi	r24, 0x69	; 105
    46ae:	31 f5       	brne	.+76     	; 0x46fc <vfprintf+0x1fa>
    46b0:	f8 01       	movw	r30, r16
    46b2:	27 ff       	sbrs	r18, 7
    46b4:	07 c0       	rjmp	.+14     	; 0x46c4 <vfprintf+0x1c2>
    46b6:	60 81       	ld	r22, Z
    46b8:	71 81       	ldd	r23, Z+1	; 0x01
    46ba:	82 81       	ldd	r24, Z+2	; 0x02
    46bc:	93 81       	ldd	r25, Z+3	; 0x03
    46be:	0c 5f       	subi	r16, 0xFC	; 252
    46c0:	1f 4f       	sbci	r17, 0xFF	; 255
    46c2:	08 c0       	rjmp	.+16     	; 0x46d4 <vfprintf+0x1d2>
    46c4:	60 81       	ld	r22, Z
    46c6:	71 81       	ldd	r23, Z+1	; 0x01
    46c8:	88 27       	eor	r24, r24
    46ca:	77 fd       	sbrc	r23, 7
    46cc:	80 95       	com	r24
    46ce:	98 2f       	mov	r25, r24
    46d0:	0e 5f       	subi	r16, 0xFE	; 254
    46d2:	1f 4f       	sbci	r17, 0xFF	; 255
    46d4:	2f 76       	andi	r18, 0x6F	; 111
    46d6:	b2 2e       	mov	r11, r18
    46d8:	97 ff       	sbrs	r25, 7
    46da:	09 c0       	rjmp	.+18     	; 0x46ee <vfprintf+0x1ec>
    46dc:	90 95       	com	r25
    46de:	80 95       	com	r24
    46e0:	70 95       	com	r23
    46e2:	61 95       	neg	r22
    46e4:	7f 4f       	sbci	r23, 0xFF	; 255
    46e6:	8f 4f       	sbci	r24, 0xFF	; 255
    46e8:	9f 4f       	sbci	r25, 0xFF	; 255
    46ea:	20 68       	ori	r18, 0x80	; 128
    46ec:	b2 2e       	mov	r11, r18
    46ee:	2a e0       	ldi	r18, 0x0A	; 10
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	a4 01       	movw	r20, r8
    46f4:	48 d1       	rcall	.+656    	; 0x4986 <__ultoa_invert>
    46f6:	a8 2e       	mov	r10, r24
    46f8:	a8 18       	sub	r10, r8
    46fa:	43 c0       	rjmp	.+134    	; 0x4782 <vfprintf+0x280>
    46fc:	85 37       	cpi	r24, 0x75	; 117
    46fe:	29 f4       	brne	.+10     	; 0x470a <vfprintf+0x208>
    4700:	2f 7e       	andi	r18, 0xEF	; 239
    4702:	b2 2e       	mov	r11, r18
    4704:	2a e0       	ldi	r18, 0x0A	; 10
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	25 c0       	rjmp	.+74     	; 0x4754 <vfprintf+0x252>
    470a:	f2 2f       	mov	r31, r18
    470c:	f9 7f       	andi	r31, 0xF9	; 249
    470e:	bf 2e       	mov	r11, r31
    4710:	8f 36       	cpi	r24, 0x6F	; 111
    4712:	c1 f0       	breq	.+48     	; 0x4744 <vfprintf+0x242>
    4714:	18 f4       	brcc	.+6      	; 0x471c <vfprintf+0x21a>
    4716:	88 35       	cpi	r24, 0x58	; 88
    4718:	79 f0       	breq	.+30     	; 0x4738 <vfprintf+0x236>
    471a:	ad c0       	rjmp	.+346    	; 0x4876 <vfprintf+0x374>
    471c:	80 37       	cpi	r24, 0x70	; 112
    471e:	19 f0       	breq	.+6      	; 0x4726 <vfprintf+0x224>
    4720:	88 37       	cpi	r24, 0x78	; 120
    4722:	21 f0       	breq	.+8      	; 0x472c <vfprintf+0x22a>
    4724:	a8 c0       	rjmp	.+336    	; 0x4876 <vfprintf+0x374>
    4726:	2f 2f       	mov	r18, r31
    4728:	20 61       	ori	r18, 0x10	; 16
    472a:	b2 2e       	mov	r11, r18
    472c:	b4 fe       	sbrs	r11, 4
    472e:	0d c0       	rjmp	.+26     	; 0x474a <vfprintf+0x248>
    4730:	8b 2d       	mov	r24, r11
    4732:	84 60       	ori	r24, 0x04	; 4
    4734:	b8 2e       	mov	r11, r24
    4736:	09 c0       	rjmp	.+18     	; 0x474a <vfprintf+0x248>
    4738:	24 ff       	sbrs	r18, 4
    473a:	0a c0       	rjmp	.+20     	; 0x4750 <vfprintf+0x24e>
    473c:	9f 2f       	mov	r25, r31
    473e:	96 60       	ori	r25, 0x06	; 6
    4740:	b9 2e       	mov	r11, r25
    4742:	06 c0       	rjmp	.+12     	; 0x4750 <vfprintf+0x24e>
    4744:	28 e0       	ldi	r18, 0x08	; 8
    4746:	30 e0       	ldi	r19, 0x00	; 0
    4748:	05 c0       	rjmp	.+10     	; 0x4754 <vfprintf+0x252>
    474a:	20 e1       	ldi	r18, 0x10	; 16
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	02 c0       	rjmp	.+4      	; 0x4754 <vfprintf+0x252>
    4750:	20 e1       	ldi	r18, 0x10	; 16
    4752:	32 e0       	ldi	r19, 0x02	; 2
    4754:	f8 01       	movw	r30, r16
    4756:	b7 fe       	sbrs	r11, 7
    4758:	07 c0       	rjmp	.+14     	; 0x4768 <vfprintf+0x266>
    475a:	60 81       	ld	r22, Z
    475c:	71 81       	ldd	r23, Z+1	; 0x01
    475e:	82 81       	ldd	r24, Z+2	; 0x02
    4760:	93 81       	ldd	r25, Z+3	; 0x03
    4762:	0c 5f       	subi	r16, 0xFC	; 252
    4764:	1f 4f       	sbci	r17, 0xFF	; 255
    4766:	06 c0       	rjmp	.+12     	; 0x4774 <vfprintf+0x272>
    4768:	60 81       	ld	r22, Z
    476a:	71 81       	ldd	r23, Z+1	; 0x01
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	0e 5f       	subi	r16, 0xFE	; 254
    4772:	1f 4f       	sbci	r17, 0xFF	; 255
    4774:	a4 01       	movw	r20, r8
    4776:	07 d1       	rcall	.+526    	; 0x4986 <__ultoa_invert>
    4778:	a8 2e       	mov	r10, r24
    477a:	a8 18       	sub	r10, r8
    477c:	fb 2d       	mov	r31, r11
    477e:	ff 77       	andi	r31, 0x7F	; 127
    4780:	bf 2e       	mov	r11, r31
    4782:	b6 fe       	sbrs	r11, 6
    4784:	0b c0       	rjmp	.+22     	; 0x479c <vfprintf+0x29a>
    4786:	2b 2d       	mov	r18, r11
    4788:	2e 7f       	andi	r18, 0xFE	; 254
    478a:	a5 14       	cp	r10, r5
    478c:	50 f4       	brcc	.+20     	; 0x47a2 <vfprintf+0x2a0>
    478e:	b4 fe       	sbrs	r11, 4
    4790:	0a c0       	rjmp	.+20     	; 0x47a6 <vfprintf+0x2a4>
    4792:	b2 fc       	sbrc	r11, 2
    4794:	08 c0       	rjmp	.+16     	; 0x47a6 <vfprintf+0x2a4>
    4796:	2b 2d       	mov	r18, r11
    4798:	2e 7e       	andi	r18, 0xEE	; 238
    479a:	05 c0       	rjmp	.+10     	; 0x47a6 <vfprintf+0x2a4>
    479c:	7a 2c       	mov	r7, r10
    479e:	2b 2d       	mov	r18, r11
    47a0:	03 c0       	rjmp	.+6      	; 0x47a8 <vfprintf+0x2a6>
    47a2:	7a 2c       	mov	r7, r10
    47a4:	01 c0       	rjmp	.+2      	; 0x47a8 <vfprintf+0x2a6>
    47a6:	75 2c       	mov	r7, r5
    47a8:	24 ff       	sbrs	r18, 4
    47aa:	0d c0       	rjmp	.+26     	; 0x47c6 <vfprintf+0x2c4>
    47ac:	fe 01       	movw	r30, r28
    47ae:	ea 0d       	add	r30, r10
    47b0:	f1 1d       	adc	r31, r1
    47b2:	80 81       	ld	r24, Z
    47b4:	80 33       	cpi	r24, 0x30	; 48
    47b6:	11 f4       	brne	.+4      	; 0x47bc <vfprintf+0x2ba>
    47b8:	29 7e       	andi	r18, 0xE9	; 233
    47ba:	09 c0       	rjmp	.+18     	; 0x47ce <vfprintf+0x2cc>
    47bc:	22 ff       	sbrs	r18, 2
    47be:	06 c0       	rjmp	.+12     	; 0x47cc <vfprintf+0x2ca>
    47c0:	73 94       	inc	r7
    47c2:	73 94       	inc	r7
    47c4:	04 c0       	rjmp	.+8      	; 0x47ce <vfprintf+0x2cc>
    47c6:	82 2f       	mov	r24, r18
    47c8:	86 78       	andi	r24, 0x86	; 134
    47ca:	09 f0       	breq	.+2      	; 0x47ce <vfprintf+0x2cc>
    47cc:	73 94       	inc	r7
    47ce:	23 fd       	sbrc	r18, 3
    47d0:	12 c0       	rjmp	.+36     	; 0x47f6 <vfprintf+0x2f4>
    47d2:	20 ff       	sbrs	r18, 0
    47d4:	06 c0       	rjmp	.+12     	; 0x47e2 <vfprintf+0x2e0>
    47d6:	5a 2c       	mov	r5, r10
    47d8:	73 14       	cp	r7, r3
    47da:	18 f4       	brcc	.+6      	; 0x47e2 <vfprintf+0x2e0>
    47dc:	53 0c       	add	r5, r3
    47de:	57 18       	sub	r5, r7
    47e0:	73 2c       	mov	r7, r3
    47e2:	73 14       	cp	r7, r3
    47e4:	60 f4       	brcc	.+24     	; 0x47fe <vfprintf+0x2fc>
    47e6:	b7 01       	movw	r22, r14
    47e8:	80 e2       	ldi	r24, 0x20	; 32
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	2c 87       	std	Y+12, r18	; 0x0c
    47ee:	99 d0       	rcall	.+306    	; 0x4922 <fputc>
    47f0:	73 94       	inc	r7
    47f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    47f4:	f6 cf       	rjmp	.-20     	; 0x47e2 <vfprintf+0x2e0>
    47f6:	73 14       	cp	r7, r3
    47f8:	10 f4       	brcc	.+4      	; 0x47fe <vfprintf+0x2fc>
    47fa:	37 18       	sub	r3, r7
    47fc:	01 c0       	rjmp	.+2      	; 0x4800 <vfprintf+0x2fe>
    47fe:	31 2c       	mov	r3, r1
    4800:	24 ff       	sbrs	r18, 4
    4802:	11 c0       	rjmp	.+34     	; 0x4826 <vfprintf+0x324>
    4804:	b7 01       	movw	r22, r14
    4806:	80 e3       	ldi	r24, 0x30	; 48
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	2c 87       	std	Y+12, r18	; 0x0c
    480c:	8a d0       	rcall	.+276    	; 0x4922 <fputc>
    480e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4810:	22 ff       	sbrs	r18, 2
    4812:	16 c0       	rjmp	.+44     	; 0x4840 <vfprintf+0x33e>
    4814:	21 ff       	sbrs	r18, 1
    4816:	03 c0       	rjmp	.+6      	; 0x481e <vfprintf+0x31c>
    4818:	88 e5       	ldi	r24, 0x58	; 88
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	02 c0       	rjmp	.+4      	; 0x4822 <vfprintf+0x320>
    481e:	88 e7       	ldi	r24, 0x78	; 120
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	b7 01       	movw	r22, r14
    4824:	0c c0       	rjmp	.+24     	; 0x483e <vfprintf+0x33c>
    4826:	82 2f       	mov	r24, r18
    4828:	86 78       	andi	r24, 0x86	; 134
    482a:	51 f0       	breq	.+20     	; 0x4840 <vfprintf+0x33e>
    482c:	21 fd       	sbrc	r18, 1
    482e:	02 c0       	rjmp	.+4      	; 0x4834 <vfprintf+0x332>
    4830:	80 e2       	ldi	r24, 0x20	; 32
    4832:	01 c0       	rjmp	.+2      	; 0x4836 <vfprintf+0x334>
    4834:	8b e2       	ldi	r24, 0x2B	; 43
    4836:	27 fd       	sbrc	r18, 7
    4838:	8d e2       	ldi	r24, 0x2D	; 45
    483a:	b7 01       	movw	r22, r14
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	71 d0       	rcall	.+226    	; 0x4922 <fputc>
    4840:	a5 14       	cp	r10, r5
    4842:	30 f4       	brcc	.+12     	; 0x4850 <vfprintf+0x34e>
    4844:	b7 01       	movw	r22, r14
    4846:	80 e3       	ldi	r24, 0x30	; 48
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	6b d0       	rcall	.+214    	; 0x4922 <fputc>
    484c:	5a 94       	dec	r5
    484e:	f8 cf       	rjmp	.-16     	; 0x4840 <vfprintf+0x33e>
    4850:	aa 94       	dec	r10
    4852:	f4 01       	movw	r30, r8
    4854:	ea 0d       	add	r30, r10
    4856:	f1 1d       	adc	r31, r1
    4858:	80 81       	ld	r24, Z
    485a:	b7 01       	movw	r22, r14
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	61 d0       	rcall	.+194    	; 0x4922 <fputc>
    4860:	a1 10       	cpse	r10, r1
    4862:	f6 cf       	rjmp	.-20     	; 0x4850 <vfprintf+0x34e>
    4864:	33 20       	and	r3, r3
    4866:	09 f4       	brne	.+2      	; 0x486a <vfprintf+0x368>
    4868:	5d ce       	rjmp	.-838    	; 0x4524 <vfprintf+0x22>
    486a:	b7 01       	movw	r22, r14
    486c:	80 e2       	ldi	r24, 0x20	; 32
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	58 d0       	rcall	.+176    	; 0x4922 <fputc>
    4872:	3a 94       	dec	r3
    4874:	f7 cf       	rjmp	.-18     	; 0x4864 <vfprintf+0x362>
    4876:	f7 01       	movw	r30, r14
    4878:	86 81       	ldd	r24, Z+6	; 0x06
    487a:	97 81       	ldd	r25, Z+7	; 0x07
    487c:	02 c0       	rjmp	.+4      	; 0x4882 <vfprintf+0x380>
    487e:	8f ef       	ldi	r24, 0xFF	; 255
    4880:	9f ef       	ldi	r25, 0xFF	; 255
    4882:	2c 96       	adiw	r28, 0x0c	; 12
    4884:	e2 e1       	ldi	r30, 0x12	; 18
    4886:	12 c1       	rjmp	.+548    	; 0x4aac <__epilogue_restores__>

00004888 <__eerd_block_x32a4u>:
    4888:	e0 ec       	ldi	r30, 0xC0	; 192
    488a:	f1 e0       	ldi	r31, 0x01	; 1
    488c:	a7 85       	ldd	r26, Z+15	; 0x0f
    488e:	a7 fd       	sbrc	r26, 7
    4890:	fd cf       	rjmp	.-6      	; 0x488c <__eerd_block_x32a4u+0x4>
    4892:	a4 85       	ldd	r26, Z+12	; 0x0c
    4894:	a8 60       	ori	r26, 0x08	; 8
    4896:	a4 87       	std	Z+12, r26	; 0x0c
    4898:	60 50       	subi	r22, 0x00	; 0
    489a:	70 4f       	sbci	r23, 0xF0	; 240
    489c:	fc cd       	rjmp	.-1032   	; 0x4496 <memcpy>

0000489e <__eewr_block_x32a4u>:
    489e:	dc 01       	movw	r26, r24
    48a0:	cb 01       	movw	r24, r22
    48a2:	02 c0       	rjmp	.+4      	; 0x48a8 <__eewr_block_x32a4u+0xa>
    48a4:	2d 91       	ld	r18, X+
    48a6:	05 d0       	rcall	.+10     	; 0x48b2 <__eewr_r18_x32a4u>
    48a8:	41 50       	subi	r20, 0x01	; 1
    48aa:	50 40       	sbci	r21, 0x00	; 0
    48ac:	d8 f7       	brcc	.-10     	; 0x48a4 <__eewr_block_x32a4u+0x6>
    48ae:	08 95       	ret

000048b0 <__eewr_byte_x32a4u>:
    48b0:	26 2f       	mov	r18, r22

000048b2 <__eewr_r18_x32a4u>:
    48b2:	e0 ec       	ldi	r30, 0xC0	; 192
    48b4:	f1 e0       	ldi	r31, 0x01	; 1
    48b6:	37 85       	ldd	r19, Z+15	; 0x0f
    48b8:	37 fd       	sbrc	r19, 7
    48ba:	fd cf       	rjmp	.-6      	; 0x48b6 <__eewr_r18_x32a4u+0x4>
    48bc:	34 85       	ldd	r19, Z+12	; 0x0c
    48be:	37 7f       	andi	r19, 0xF7	; 247
    48c0:	34 87       	std	Z+12, r19	; 0x0c
    48c2:	37 85       	ldd	r19, Z+15	; 0x0f
    48c4:	31 ff       	sbrs	r19, 1
    48c6:	09 c0       	rjmp	.+18     	; 0x48da <__eewr_r18_x32a4u+0x28>
    48c8:	36 e3       	ldi	r19, 0x36	; 54
    48ca:	32 87       	std	Z+10, r19	; 0x0a
    48cc:	38 ed       	ldi	r19, 0xD8	; 216
    48ce:	34 bf       	out	0x34, r19	; 52
    48d0:	31 e0       	ldi	r19, 0x01	; 1
    48d2:	33 87       	std	Z+11, r19	; 0x0b
    48d4:	37 85       	ldd	r19, Z+15	; 0x0f
    48d6:	37 fd       	sbrc	r19, 7
    48d8:	fd cf       	rjmp	.-6      	; 0x48d4 <__eewr_r18_x32a4u+0x22>
    48da:	33 e3       	ldi	r19, 0x33	; 51
    48dc:	32 87       	std	Z+10, r19	; 0x0a
    48de:	80 83       	st	Z, r24
    48e0:	91 83       	std	Z+1, r25	; 0x01
    48e2:	12 82       	std	Z+2, r1	; 0x02
    48e4:	24 83       	std	Z+4, r18	; 0x04
    48e6:	25 e3       	ldi	r18, 0x35	; 53
    48e8:	22 87       	std	Z+10, r18	; 0x0a
    48ea:	28 ed       	ldi	r18, 0xD8	; 216
    48ec:	31 e0       	ldi	r19, 0x01	; 1
    48ee:	24 bf       	out	0x34, r18	; 52
    48f0:	33 87       	std	Z+11, r19	; 0x0b
    48f2:	01 96       	adiw	r24, 0x01	; 1
    48f4:	08 95       	ret

000048f6 <strnlen_P>:
    48f6:	fc 01       	movw	r30, r24
    48f8:	05 90       	lpm	r0, Z+
    48fa:	61 50       	subi	r22, 0x01	; 1
    48fc:	70 40       	sbci	r23, 0x00	; 0
    48fe:	01 10       	cpse	r0, r1
    4900:	d8 f7       	brcc	.-10     	; 0x48f8 <strnlen_P+0x2>
    4902:	80 95       	com	r24
    4904:	90 95       	com	r25
    4906:	8e 0f       	add	r24, r30
    4908:	9f 1f       	adc	r25, r31
    490a:	08 95       	ret

0000490c <strnlen>:
    490c:	fc 01       	movw	r30, r24
    490e:	61 50       	subi	r22, 0x01	; 1
    4910:	70 40       	sbci	r23, 0x00	; 0
    4912:	01 90       	ld	r0, Z+
    4914:	01 10       	cpse	r0, r1
    4916:	d8 f7       	brcc	.-10     	; 0x490e <strnlen+0x2>
    4918:	80 95       	com	r24
    491a:	90 95       	com	r25
    491c:	8e 0f       	add	r24, r30
    491e:	9f 1f       	adc	r25, r31
    4920:	08 95       	ret

00004922 <fputc>:
    4922:	0f 93       	push	r16
    4924:	1f 93       	push	r17
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	18 2f       	mov	r17, r24
    492c:	09 2f       	mov	r16, r25
    492e:	eb 01       	movw	r28, r22
    4930:	8b 81       	ldd	r24, Y+3	; 0x03
    4932:	81 fd       	sbrc	r24, 1
    4934:	03 c0       	rjmp	.+6      	; 0x493c <fputc+0x1a>
    4936:	8f ef       	ldi	r24, 0xFF	; 255
    4938:	9f ef       	ldi	r25, 0xFF	; 255
    493a:	20 c0       	rjmp	.+64     	; 0x497c <fputc+0x5a>
    493c:	82 ff       	sbrs	r24, 2
    493e:	10 c0       	rjmp	.+32     	; 0x4960 <fputc+0x3e>
    4940:	4e 81       	ldd	r20, Y+6	; 0x06
    4942:	5f 81       	ldd	r21, Y+7	; 0x07
    4944:	2c 81       	ldd	r18, Y+4	; 0x04
    4946:	3d 81       	ldd	r19, Y+5	; 0x05
    4948:	42 17       	cp	r20, r18
    494a:	53 07       	cpc	r21, r19
    494c:	7c f4       	brge	.+30     	; 0x496c <fputc+0x4a>
    494e:	e8 81       	ld	r30, Y
    4950:	f9 81       	ldd	r31, Y+1	; 0x01
    4952:	9f 01       	movw	r18, r30
    4954:	2f 5f       	subi	r18, 0xFF	; 255
    4956:	3f 4f       	sbci	r19, 0xFF	; 255
    4958:	28 83       	st	Y, r18
    495a:	39 83       	std	Y+1, r19	; 0x01
    495c:	10 83       	st	Z, r17
    495e:	06 c0       	rjmp	.+12     	; 0x496c <fputc+0x4a>
    4960:	e8 85       	ldd	r30, Y+8	; 0x08
    4962:	f9 85       	ldd	r31, Y+9	; 0x09
    4964:	81 2f       	mov	r24, r17
    4966:	09 95       	icall
    4968:	89 2b       	or	r24, r25
    496a:	29 f7       	brne	.-54     	; 0x4936 <fputc+0x14>
    496c:	2e 81       	ldd	r18, Y+6	; 0x06
    496e:	3f 81       	ldd	r19, Y+7	; 0x07
    4970:	2f 5f       	subi	r18, 0xFF	; 255
    4972:	3f 4f       	sbci	r19, 0xFF	; 255
    4974:	2e 83       	std	Y+6, r18	; 0x06
    4976:	3f 83       	std	Y+7, r19	; 0x07
    4978:	81 2f       	mov	r24, r17
    497a:	90 2f       	mov	r25, r16
    497c:	df 91       	pop	r29
    497e:	cf 91       	pop	r28
    4980:	1f 91       	pop	r17
    4982:	0f 91       	pop	r16
    4984:	08 95       	ret

00004986 <__ultoa_invert>:
    4986:	fa 01       	movw	r30, r20
    4988:	aa 27       	eor	r26, r26
    498a:	28 30       	cpi	r18, 0x08	; 8
    498c:	51 f1       	breq	.+84     	; 0x49e2 <__ultoa_invert+0x5c>
    498e:	20 31       	cpi	r18, 0x10	; 16
    4990:	81 f1       	breq	.+96     	; 0x49f2 <__ultoa_invert+0x6c>
    4992:	e8 94       	clt
    4994:	6f 93       	push	r22
    4996:	6e 7f       	andi	r22, 0xFE	; 254
    4998:	6e 5f       	subi	r22, 0xFE	; 254
    499a:	7f 4f       	sbci	r23, 0xFF	; 255
    499c:	8f 4f       	sbci	r24, 0xFF	; 255
    499e:	9f 4f       	sbci	r25, 0xFF	; 255
    49a0:	af 4f       	sbci	r26, 0xFF	; 255
    49a2:	b1 e0       	ldi	r27, 0x01	; 1
    49a4:	3e d0       	rcall	.+124    	; 0x4a22 <__ultoa_invert+0x9c>
    49a6:	b4 e0       	ldi	r27, 0x04	; 4
    49a8:	3c d0       	rcall	.+120    	; 0x4a22 <__ultoa_invert+0x9c>
    49aa:	67 0f       	add	r22, r23
    49ac:	78 1f       	adc	r23, r24
    49ae:	89 1f       	adc	r24, r25
    49b0:	9a 1f       	adc	r25, r26
    49b2:	a1 1d       	adc	r26, r1
    49b4:	68 0f       	add	r22, r24
    49b6:	79 1f       	adc	r23, r25
    49b8:	8a 1f       	adc	r24, r26
    49ba:	91 1d       	adc	r25, r1
    49bc:	a1 1d       	adc	r26, r1
    49be:	6a 0f       	add	r22, r26
    49c0:	71 1d       	adc	r23, r1
    49c2:	81 1d       	adc	r24, r1
    49c4:	91 1d       	adc	r25, r1
    49c6:	a1 1d       	adc	r26, r1
    49c8:	20 d0       	rcall	.+64     	; 0x4a0a <__ultoa_invert+0x84>
    49ca:	09 f4       	brne	.+2      	; 0x49ce <__ultoa_invert+0x48>
    49cc:	68 94       	set
    49ce:	3f 91       	pop	r19
    49d0:	2a e0       	ldi	r18, 0x0A	; 10
    49d2:	26 9f       	mul	r18, r22
    49d4:	11 24       	eor	r1, r1
    49d6:	30 19       	sub	r19, r0
    49d8:	30 5d       	subi	r19, 0xD0	; 208
    49da:	31 93       	st	Z+, r19
    49dc:	de f6       	brtc	.-74     	; 0x4994 <__ultoa_invert+0xe>
    49de:	cf 01       	movw	r24, r30
    49e0:	08 95       	ret
    49e2:	46 2f       	mov	r20, r22
    49e4:	47 70       	andi	r20, 0x07	; 7
    49e6:	40 5d       	subi	r20, 0xD0	; 208
    49e8:	41 93       	st	Z+, r20
    49ea:	b3 e0       	ldi	r27, 0x03	; 3
    49ec:	0f d0       	rcall	.+30     	; 0x4a0c <__ultoa_invert+0x86>
    49ee:	c9 f7       	brne	.-14     	; 0x49e2 <__ultoa_invert+0x5c>
    49f0:	f6 cf       	rjmp	.-20     	; 0x49de <__ultoa_invert+0x58>
    49f2:	46 2f       	mov	r20, r22
    49f4:	4f 70       	andi	r20, 0x0F	; 15
    49f6:	40 5d       	subi	r20, 0xD0	; 208
    49f8:	4a 33       	cpi	r20, 0x3A	; 58
    49fa:	18 f0       	brcs	.+6      	; 0x4a02 <__ultoa_invert+0x7c>
    49fc:	49 5d       	subi	r20, 0xD9	; 217
    49fe:	31 fd       	sbrc	r19, 1
    4a00:	40 52       	subi	r20, 0x20	; 32
    4a02:	41 93       	st	Z+, r20
    4a04:	02 d0       	rcall	.+4      	; 0x4a0a <__ultoa_invert+0x84>
    4a06:	a9 f7       	brne	.-22     	; 0x49f2 <__ultoa_invert+0x6c>
    4a08:	ea cf       	rjmp	.-44     	; 0x49de <__ultoa_invert+0x58>
    4a0a:	b4 e0       	ldi	r27, 0x04	; 4
    4a0c:	a6 95       	lsr	r26
    4a0e:	97 95       	ror	r25
    4a10:	87 95       	ror	r24
    4a12:	77 95       	ror	r23
    4a14:	67 95       	ror	r22
    4a16:	ba 95       	dec	r27
    4a18:	c9 f7       	brne	.-14     	; 0x4a0c <__ultoa_invert+0x86>
    4a1a:	00 97       	sbiw	r24, 0x00	; 0
    4a1c:	61 05       	cpc	r22, r1
    4a1e:	71 05       	cpc	r23, r1
    4a20:	08 95       	ret
    4a22:	9b 01       	movw	r18, r22
    4a24:	ac 01       	movw	r20, r24
    4a26:	0a 2e       	mov	r0, r26
    4a28:	06 94       	lsr	r0
    4a2a:	57 95       	ror	r21
    4a2c:	47 95       	ror	r20
    4a2e:	37 95       	ror	r19
    4a30:	27 95       	ror	r18
    4a32:	ba 95       	dec	r27
    4a34:	c9 f7       	brne	.-14     	; 0x4a28 <__ultoa_invert+0xa2>
    4a36:	62 0f       	add	r22, r18
    4a38:	73 1f       	adc	r23, r19
    4a3a:	84 1f       	adc	r24, r20
    4a3c:	95 1f       	adc	r25, r21
    4a3e:	a0 1d       	adc	r26, r0
    4a40:	08 95       	ret

00004a42 <__divmodsi4>:
    4a42:	05 2e       	mov	r0, r21
    4a44:	97 fb       	bst	r25, 7
    4a46:	16 f4       	brtc	.+4      	; 0x4a4c <__divmodsi4+0xa>
    4a48:	00 94       	com	r0
    4a4a:	0f d0       	rcall	.+30     	; 0x4a6a <__negsi2>
    4a4c:	57 fd       	sbrc	r21, 7
    4a4e:	05 d0       	rcall	.+10     	; 0x4a5a <__divmodsi4_neg2>
    4a50:	45 d0       	rcall	.+138    	; 0x4adc <__udivmodsi4>
    4a52:	07 fc       	sbrc	r0, 7
    4a54:	02 d0       	rcall	.+4      	; 0x4a5a <__divmodsi4_neg2>
    4a56:	46 f4       	brtc	.+16     	; 0x4a68 <__divmodsi4_exit>
    4a58:	08 c0       	rjmp	.+16     	; 0x4a6a <__negsi2>

00004a5a <__divmodsi4_neg2>:
    4a5a:	50 95       	com	r21
    4a5c:	40 95       	com	r20
    4a5e:	30 95       	com	r19
    4a60:	21 95       	neg	r18
    4a62:	3f 4f       	sbci	r19, 0xFF	; 255
    4a64:	4f 4f       	sbci	r20, 0xFF	; 255
    4a66:	5f 4f       	sbci	r21, 0xFF	; 255

00004a68 <__divmodsi4_exit>:
    4a68:	08 95       	ret

00004a6a <__negsi2>:
    4a6a:	90 95       	com	r25
    4a6c:	80 95       	com	r24
    4a6e:	70 95       	com	r23
    4a70:	61 95       	neg	r22
    4a72:	7f 4f       	sbci	r23, 0xFF	; 255
    4a74:	8f 4f       	sbci	r24, 0xFF	; 255
    4a76:	9f 4f       	sbci	r25, 0xFF	; 255
    4a78:	08 95       	ret

00004a7a <__prologue_saves__>:
    4a7a:	2f 92       	push	r2
    4a7c:	3f 92       	push	r3
    4a7e:	4f 92       	push	r4
    4a80:	5f 92       	push	r5
    4a82:	6f 92       	push	r6
    4a84:	7f 92       	push	r7
    4a86:	8f 92       	push	r8
    4a88:	9f 92       	push	r9
    4a8a:	af 92       	push	r10
    4a8c:	bf 92       	push	r11
    4a8e:	cf 92       	push	r12
    4a90:	df 92       	push	r13
    4a92:	ef 92       	push	r14
    4a94:	ff 92       	push	r15
    4a96:	0f 93       	push	r16
    4a98:	1f 93       	push	r17
    4a9a:	cf 93       	push	r28
    4a9c:	df 93       	push	r29
    4a9e:	cd b7       	in	r28, 0x3d	; 61
    4aa0:	de b7       	in	r29, 0x3e	; 62
    4aa2:	ca 1b       	sub	r28, r26
    4aa4:	db 0b       	sbc	r29, r27
    4aa6:	cd bf       	out	0x3d, r28	; 61
    4aa8:	de bf       	out	0x3e, r29	; 62
    4aaa:	09 94       	ijmp

00004aac <__epilogue_restores__>:
    4aac:	2a 88       	ldd	r2, Y+18	; 0x12
    4aae:	39 88       	ldd	r3, Y+17	; 0x11
    4ab0:	48 88       	ldd	r4, Y+16	; 0x10
    4ab2:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ab4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ab6:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ab8:	8c 84       	ldd	r8, Y+12	; 0x0c
    4aba:	9b 84       	ldd	r9, Y+11	; 0x0b
    4abc:	aa 84       	ldd	r10, Y+10	; 0x0a
    4abe:	b9 84       	ldd	r11, Y+9	; 0x09
    4ac0:	c8 84       	ldd	r12, Y+8	; 0x08
    4ac2:	df 80       	ldd	r13, Y+7	; 0x07
    4ac4:	ee 80       	ldd	r14, Y+6	; 0x06
    4ac6:	fd 80       	ldd	r15, Y+5	; 0x05
    4ac8:	0c 81       	ldd	r16, Y+4	; 0x04
    4aca:	1b 81       	ldd	r17, Y+3	; 0x03
    4acc:	aa 81       	ldd	r26, Y+2	; 0x02
    4ace:	b9 81       	ldd	r27, Y+1	; 0x01
    4ad0:	ce 0f       	add	r28, r30
    4ad2:	d1 1d       	adc	r29, r1
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	de bf       	out	0x3e, r29	; 62
    4ad8:	ed 01       	movw	r28, r26
    4ada:	08 95       	ret

00004adc <__udivmodsi4>:
    4adc:	a1 e2       	ldi	r26, 0x21	; 33
    4ade:	1a 2e       	mov	r1, r26
    4ae0:	aa 1b       	sub	r26, r26
    4ae2:	bb 1b       	sub	r27, r27
    4ae4:	fd 01       	movw	r30, r26
    4ae6:	0d c0       	rjmp	.+26     	; 0x4b02 <__udivmodsi4_ep>

00004ae8 <__udivmodsi4_loop>:
    4ae8:	aa 1f       	adc	r26, r26
    4aea:	bb 1f       	adc	r27, r27
    4aec:	ee 1f       	adc	r30, r30
    4aee:	ff 1f       	adc	r31, r31
    4af0:	a2 17       	cp	r26, r18
    4af2:	b3 07       	cpc	r27, r19
    4af4:	e4 07       	cpc	r30, r20
    4af6:	f5 07       	cpc	r31, r21
    4af8:	20 f0       	brcs	.+8      	; 0x4b02 <__udivmodsi4_ep>
    4afa:	a2 1b       	sub	r26, r18
    4afc:	b3 0b       	sbc	r27, r19
    4afe:	e4 0b       	sbc	r30, r20
    4b00:	f5 0b       	sbc	r31, r21

00004b02 <__udivmodsi4_ep>:
    4b02:	66 1f       	adc	r22, r22
    4b04:	77 1f       	adc	r23, r23
    4b06:	88 1f       	adc	r24, r24
    4b08:	99 1f       	adc	r25, r25
    4b0a:	1a 94       	dec	r1
    4b0c:	69 f7       	brne	.-38     	; 0x4ae8 <__udivmodsi4_loop>
    4b0e:	60 95       	com	r22
    4b10:	70 95       	com	r23
    4b12:	80 95       	com	r24
    4b14:	90 95       	com	r25
    4b16:	9b 01       	movw	r18, r22
    4b18:	ac 01       	movw	r20, r24
    4b1a:	bd 01       	movw	r22, r26
    4b1c:	cf 01       	movw	r24, r30
    4b1e:	08 95       	ret

00004b20 <_exit>:
    4b20:	f8 94       	cli

00004b22 <__stop_program>:
    4b22:	ff cf       	rjmp	.-2      	; 0x4b22 <__stop_program>
